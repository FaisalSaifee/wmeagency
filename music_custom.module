<?php

/*******************************************************
 *
 * Copyright Â© 2017, WME/IMG, all rights reserved
 * Written under contract by Robosoft Technologies Pvt. Ltd.
 *
 ******************************************************/

function music_custom_menu()
{
    $items = array();
    //For adding Music talents from connect DB starts
    $items['custom-404'] = array(
        'page callback' => 'music_custom_404',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
    );
    $items['custom-403'] = array(
        'page callback' => 'music_custom_403',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
    );
    $items['move-tivo-about'] = array(
        'title'              => 'Remove Tivo About',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'access arguments'   => array('administer agent dashboard'),
        'page callback'      => 'move_tivo_about'
    );
    $items['update-music-profile-aliases'] = array(
        'title'              => 'Update Music profile Aliases',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'access arguments'   => array('administer agent dashboard'),
        'page callback'      => 'update_music_profile_alias'
    );
    $items['sync-photo'] = array(
        'title'              => 'Sync Music',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'access arguments'   => array('administer agent dashboard'),
        'page callback'      => 'update_profile_pictures_one_time',
        'file'               => 'sync.music.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/sync_music",
    );
    $items['sync-music'] = array(
        'title'              => 'Sync Music',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'access arguments'   => array('administer agent dashboard'),
        'page callback'      => 'sync_music',
        'file'               => 'sync.music.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/sync_music",
    );
    $items['sync-music-agents'] = array(
        'title'              => 'Sync Music',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'access arguments'   => array('administer agent dashboard'),
        'page callback'      => 'sync_music_agents',
        'file'               => 'sync.music-agents.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/sync_music",
    );
    //For adding TV/Scripted talents from connect DB ends
    $items['Music'] = array(
        'title'              => 'Music profile',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music',
        'access callback'    => TRUE,
    );
	/*$items['music'] = array(
        'title'              => 'Music profile',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music',
        'access callback'    => TRUE,
    );*/
    $items['Music/bulk-operation'] = array(
        'title'              => 'Music bulk operation',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_bulk_operation',
        'access callback'    => TRUE,
    );
    $items['Music/load-music-category'] = array(
        'title'              => 'Music bulk operation',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_load_music_category',
        'access callback'    => TRUE,
    );
    $items['Music/layout-session/%'] = array(
        'title'              => 'Music layout session',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_layout_session',
        'access callback'    => TRUE,
    );
    $items['Music/%'] = array(
        'title'              => 'Music profile',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_profile',
        'access callback'    => TRUE,
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
	/*$items['music/%'] = array(
        'title'              => 'Music profile',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_profile',
        'access callback'    => TRUE,
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );*/
    $items['Music/xls/import'] = array(
        'title'              => 'Bulk import of Music profiles using xlsx file',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'drupal_get_form',
        'page arguments'     => array('music_profiles_bulk_import_xls_form'),
        'access arguments'   => array('administer music'),
        'file'               => 'music.profiles.import.xls.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/bulk_import_xls",
    );
    $items['Music/site-settings'] = array(
        'title'              => 'Site Settings',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'drupal_get_form',
        'page arguments'     => array('music_site_settings_form'),
        'access arguments'   => array('administer music'),
        'file'               => 'music.site.settings.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_settings",
    );
    $items['Music/talents/auto-suggest'] = array(
        'title'            => 'Music talents auto suggest',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_auto_suggest',
    );
    $items['Music/add-roster/%/%'] = array(
        'title'            => 'Music add roster to talent',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_add_roster',
    );
    $items['Music/add-et/%/%'] = array(
        'title'            => 'Music add et to talent',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_add_et',
    );
    $items['Music/%ctools_js/remove-talent/roster/%'] = array(
        'title'            => 'Music remove talent from roster',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_remove_talent_roster',
    );
    $items['Music/%ctools_js/remove-talent/et/%'] = array(
        'title'            => 'Music remove talent from et',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_remove_talent_et',
    );
    $items['Music/remove-et/%/%'] = array(
        'title'            => 'Music remove et from talent',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_remove_et',
    );
    $items['Music/talents/auto-suggest/rosters'] = array(
        'title'            => 'Music talents auto suggest rosters',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_auto_suggest_rosters',
    );
    $items['Music/talents/auto-suggest/ets'] = array(
        'title'            => 'Music talents auto suggest engagement types',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_auto_suggest_ets',
    );
    $items['Music/talents/auto-suggest/music-agents/%'] = array(
        'title'            => 'Music talents auto suggest Music Agents',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_auto_suggest_music_agents',
    );
    $items['Music/talents/auto-suggest/featured'] = array(
        'title'            => 'Music talents auto suggest featured',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_auto_suggest_featured',
    );
    $items['Music/talents/infinite-scroll-rosters/%'] = array(
        'title'            => 'Music talents infinite scroll rosters',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_infinite_scroll_rosters',
    );
    $items['Music/talents/infinite-scroll-grid/%'] = array(
        'title'            => 'Music talents infinite scroll grid',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_infinite_scroll_grid',
    );
    $items['Music/talents/infinite-scroll-list/%'] = array(
        'title'            => 'Music talents infinite scroll list',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_infinite_scroll_list',
    );
    $items['Music/add-image/%ctools_js/%/%'] = array(
        'title'              => 'Add Poster',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_image',
        'access arguments'   => array('manage music-profile content'),
        'file path'          => drupal_get_path('module', 'node'),
        'file'               => 'node.pages.inc',
    );
    $items['Music/manage-selling-point/%ctools_js/%/%'] = array(
        'title'              => 'Add selling point',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_manage_selling_point',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/first-add-selling-point/%ctools_js/%'] = array(
        'title'              => 'Add selling point',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_first_add_selling_point',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/first-add-selling-point-nf/%ctools_js/%'] = array(
        'title'              => 'Add selling point',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_first_add_selling_point_nf',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/add-to-featured-list/%'] = array(
        'title'              => 'Add to featured list',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_to_featured_list',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/edit-selling-point/%ctools_js/%/%/%'] = array(
        'title'              => 'Edit selling point',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_edit_selling_point',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/remove-featured/%ctools_js/%'] = array(
        'title'              => 'Remove featured',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_remove_featured',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/add-featured/%ctools_js'] = array(
        'title'              => 'Add featured',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_featured',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/add-artist-to-roster/%ctools_js'] = array(
        'title'              => 'Add Artist',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_artist_to_roster',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/add-artist-to-engagement-type/%ctools_js'] = array(
        'title'              => 'Add Artist',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_artist_to_engagement_type',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/manage-featured/%/%'] = array(
        'title'              => 'Manage featured',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_manage_featured',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/delete-image/%ctools_js/%'] = array(
        'title'              => 'Delete image',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_delete_image',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music_delete_image.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_delete_image",
    );

    $items['Music/riders/%/%ctools_js'] = array(
        'title'              => 'Edit Riders',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(2, 3),
        'access callback'    => TRUE,
        'page callback'      => 'music_profile_riders_list',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
    $items['Music/profile/riders/add/%/%/%ctools_js'] = array(
        //$items['Music/%ctools_js/change-rider/%/%'] = array (
        'title'              => 'Music profile Rider',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(4, 5, 6),
        'access callback'    => TRUE,
        'page callback'      => 'add_music_profile_rider',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
    $items['Music/profile/rider/edit/%/%/%/%ctools_js'] = array(
        //$items['Music/%ctools_js/change-rider/%/%'] = array (
        'title'              => 'Music profile Rider',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(4, 5, 6, 7),
        'access callback'    => TRUE,
        'page callback'      => 'edit_music_profile_rider',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );

    $items['Music/profile/rider/%/%/%/%/%ctools_js'] = array(
        'title'              => 'Music profile rider',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(3, 4, 5, 6, 7),
        'access callback'    => TRUE,
        'page callback'      => 'rename_music_profile_rider',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );

    /***Gallery Menu callbacks Start ***/

    $items['Music/gallery/%/%ctools_js'] = array(
        'title'              => 'Edit Gallery',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(2, 3),
        'access callback'    => TRUE,
        'page callback'      => 'music_profile_gallery_list',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
    $items['Music/profile/gallery/add/%/%/%ctools_js'] = array(
        'title'              => 'Music profile gallery',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(4, 5, 6),
        'access callback'    => TRUE,
        'page callback'      => 'add_music_profile_gallery',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
    $items['Music/profile/gallery/edit/%/%/%ctools_js'] = array(
        'title'              => 'Music profile gallery',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(4, 5, 6, 7),
        'access callback'    => TRUE,
        'page callback'      => 'edit_music_profile_gallery',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );

    $items['Music/profile/gallery/%/%/%/%/%ctools_js'] = array(
        'title'              => 'Music profile gallery',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments' => array(3, 4, 5, 6, 7),
        'access callback'    => TRUE,
        'page callback'      => 'rename_music_profile_gallery',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );

    /** Gallery menu callbacks end **/

    /***AdMats Menu callbacks Start ***/

    $items['Music/admats/%/%ctools_js'] = array(
        'title'              => 'Edit AdMats',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(2, 3),
        'access callback'    => TRUE,
        'page callback'      => 'music_profile_admats_list',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
    $items['Music/profile/admats/add/%/%/%ctools_js'] = array(
        'title'              => 'Music profile AdMats',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(4, 5, 6),
        'access callback'    => TRUE,
        'page callback'      => 'add_music_profile_admats',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );
    $items['Music/profile/admats/edit/%/%/%ctools_js'] = array(
        'title'              => 'Music profile AdMats',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(4, 5, 6, 7),
        'access callback'    => TRUE,
        'page callback'      => 'edit_music_profile_admats',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );

    $items['Music/profile/admats/%/%/%/%/%ctools_js'] = array(
        'title'              => 'Music profile AdMats',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments' => array(3, 4, 5, 6, 7),
        'access callback'    => TRUE,
        'page callback'      => 'rename_music_profile_admats',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.profile.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_profile",
    );

    /** Gallery menu callbacks end **/

    $items['Music/manage-category/%ctools_js'] = array(
        'title'              => 'Manage category',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(2),
        'access callback'    => TRUE,
        'page callback'      => 'music_manage_category',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/add-category/%ctools_js'] = array(
        'title'              => 'Add category',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_category',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/edit-category/%ctools_js/%'] = array(
        'title'              => 'Edit category',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(2, 3),
        'access callback'    => TRUE,
        'page callback'      => 'music_update_category',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/remove-category/%ctools_js/%'] = array(
        'title'              => 'Delete category',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(2, 3),
        'access callback'    => TRUE,
        'page callback'      => 'music_remove_category',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/add-region/%ctools_js'] = array(
        'title'              => 'Add region',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_add_region',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/delete-region/%ctools_js/%'] = array(
        'title'              => 'Delete region',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_delete_region',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/uncheck-locations/%ctools_js/%'] = array(
        'title'              => 'Uncheck locations',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_uncheck_locations',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/remove-agent/%ctools_js/%/%'] = array(
        'title'              => 'Remove agent',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_remove_agent',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/edit-agents-for-region/%ctools_js/%'] = array(
        'title'              => 'Edit Agents For Region',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'edit_agents_for_region',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/add-agents-to-region/%ctools_js/%'] = array(
        'title'              => 'Add Agents to Region',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'add_agents_to_region',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/add-group-email-to-region/%ctools_js/%'] = array(
        'title'              => 'Add Group Email to Region',
        'type'               => MENU_CALLBACK,
        'weight'             => 4,  // Adjust the weight to control the order of the tabs
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'add_group_email_to_region',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/manage-region/%ctools_js/%'] = array(
        'title' => 'Group Emails',
        'page callback' => 'music_custom_manage_region_page',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'access arguments' => array('manage music-profile content'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['Music/region/ajax-agents'] = array(
        'title'              => 'Auto fill agents to region',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'auto_fill_agents_to_region',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/region/get-group-email'] = array(
        'title'              => 'Auto fill group email',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_get_group_email',
        'access arguments'   => array('manage music-profile content'),
    );

    $items['Music/agent-regions/pdf'] = array(
        'title'              => 'Music Agent Regions in PDF',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'page callback'      => 'music_agent_regions_pdf',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.agent.regions.pdf.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_agent_regions_pdf",
    );
    $items['Music/agent-regions/share'] = array(
        'title'              => 'Music Agent Regions in PDF',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'page callback'      => 'music_agent_regions_share',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.agent.regions.share.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_agent_regions_share",
    );
    $items['Music/agent-regions/share-all'] = array(
        'title'              => 'Music Agent Regions in PDF',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'page callback'      => 'music_agent_regions_share_all',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.agent.regions.share.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_agent_regions_share",
    );
    $items['Music/agent-regions/pdf-all'] = array(
        'title'              => 'Music Agent Regions in PDF',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'page callback'      => 'music_agent_regions_pdf_all',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.agent.regions.pdf.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_agent_regions_pdf",
    );
    $items['Music/agent-regions/create-pdf'] = array(
        'title'              => 'Music Agent Regions in PDF',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'page callback'      => 'music_agent_create_pdf',
        'access arguments'   => array('manage music-profile content'),
        'file'               => 'music.agent.regions.pdf.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_agent_regions_pdf",
    );
    $items['Music/%ctools_js/change-pic/%/%'] = array(
        'title'              => 'Music profile pic',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'change_music_profile_pic',
        'access arguments'   => array('manage music-profile content'),
    );
    $items['Music/load-music-region/%'] = array(
        'title'              => 'Load Music Region Agents',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'access callback'    => TRUE,
        'page callback'      => 'load_music_region',
        'access arguments'   => array('manage music-profile content'),
        'file path'          => drupal_get_path('module', 'node'),
        'file'               => 'node.pages.inc',
    );
    $items['Music/reset-map'] = array(
        'title'              => 'Reset Map',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_reset_map',
        'access callback'    => TRUE,
    );
    $items['Music/load-map/%'] = array(
        'title'              => 'Load Map',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_load_map',
        'access callback'    => TRUE,
    );
    $items['Music/agent-load-map/%'] = array(
        'title'              => 'Agent Load Map',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page callback'      => 'music_agent_load_map',
        'access callback'    => TRUE,
    );
    $items['Music/screen-resolutions'] = array(
        'title'            => 'Music screen resolutions',
        'type'             => MENU_CALLBACK,
        'page arguments'   => array(4),
        'access callback'  => TRUE,
        'page callback'    => 'music_screen_resolutions'
    );
    $items['Music/region/available-states/%'] = array(
        'title'            => 'Music region available states',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_region_available_states'
    );
    $items['Music/region/current-states/%'] = array(
        'title'            => 'Music region current states',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_region_current_states'
    );
    $items['Music/region/used-states/%'] = array(
        'title'            => 'Music region used states',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_region_used_states'
    );
    $items['Music/region-client'] = array(
        'title'            => 'Music Clients',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_region_client'
    );
    $items['Music/region/category-used-states'] = array(
        'title'            => 'Music region category used states',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_region_category_used_states'
    );
    $items['Music/region/validate-name/%/%'] = array(
        'title'            => 'Music region validate name',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_region_validate_name'
    );
    $items['Music/user/activate/%ctools_js/%/%/%'] = array(
        'title' => 'Reset password',
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_user_activate',
        'access callback'    => TRUE,
    );
    $items['Music/user/register/%ctools_js'] = array(
        'title'              => 'Music user register',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_user_register',
        'access callback'    => TRUE,
    );
    $items['Music/manage-report'] = array(
        'title'              => 'Music Report Management',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'music_manage_report',
        'access callback'    => TRUE,
        'file'               => 'music.report.inc',
        'file path'          => drupal_get_path('module', 'music_custom') . "/music_report",
    );
    $items['Music/profile/status'] = array(
        'title'              => 'Music Profile Ajax',
        'type'               => MENU_CALLBACK,
        'weight'             => 3,
        'page arguments'     => array(1),
        'access callback'    => TRUE,
        'page callback'      => 'call_music_ajax',
        'access callback'    => TRUE
    );
    $items['Music/talents/scroll-youtube/%'] = array(
        'title'            => 'Music talents scroll youtube',
        'type'             => MENU_CALLBACK,
        'access callback'  => TRUE,
        'page callback'    => 'music_talents_scroll_youtube',
    );
    $items['generateExcelReport'] = array(
        'title'              => 'Export Excel Report',
        'type'               => MENU_CALLBACK,
        'access callback'    => TRUE,
        'page callback'      => 'export_excel_callback'
    );
    return $items;
}

function music_custom_manage_region_page($ctools_js, $operation = 'add-agents') {
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add Agents To Region'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_group_email_to_region_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically

        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_group_email_to_region_form');
    }

}













/**
 * Retrieve nodes in between particular date and of particular type
 */

function export_excel_callback()
{
    $lastDate = strtotime("2018/11/21");
    $todayTime = time();
    $node_type = "music_profile";

    /* Fetch Clients as per date/week/month wise */
    $result = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(created), '%e %b %Y') AS 'date_formatted', title FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate order by created ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($result, array('Date', 'Client Name'));
    $index = 1;
    $filename = 'metrics';
    $loadExcelLibPath = function_exists('libraries_get_path') ? libraries_get_path('PHPExcel') : 'sites/all/libraries/PHPExcel';
    $phpExcelPath = $loadExcelLibPath . '/Classes/PHPExcel.php';
    @include($phpExcelPath);
    $objPHPExcel = new PHPExcel();
    $topColStyle = array(
        'font' => array(
            'bold' => TRUE,
            'color' => array('rgb' => 'FFFFFF'),
            'size' => 14
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => '000000')
        ),
        'alignment' => array(
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_TOP,
        )
    );
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result);
    $objPHPExcel->getActiveSheet()->setTitle('All Clients');
    /* Fetch Clients as per date wise */
    $result1 = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(created), '%e %b %Y') AS 'date_formatted', count(nid) as count FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate group by date_formatted order by created ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($result1, array('Date', 'Count'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result1);
    $objPHPExcel->getActiveSheet()->setTitle('Clients - Date Wise');

    /* Fetch Clients as per month wise */
    $index++;
    $result2 = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(created), '%b %Y') AS 'date_formatted', count(nid) as count FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate group by date_formatted order by created ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($result2, array('Month', 'Count'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result2);
    $objPHPExcel->getActiveSheet()->setTitle('Clients - Month Wise');

    /* Fetch Clients as per week wise */
    $index++;
    $result3 = db_query("SELECT week(DATE_FORMAT(FROM_UNIXTIME(created), '%Y-%m-%d'),1) AS 'week',DATE_FORMAT(FROM_UNIXTIME(created), '%Y') as year,count(nid) as count FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate group by week order by created ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    if (!empty($result3)) {
        foreach ($result3 as $key => $each) {
            $each['week'] = $each['week'];
            $resultDates = Start_End_Date_of_a_week($each['week'], $each['year']);
            $startDate = $resultDates[0];
            $endDate = $resultDates[1];
            $result3[$key]['week'] = ordinal($each['week']) . " week of " . $each['year'];
            unset($result3[$key]['year']);
        }
    }
    array_unshift($result3, array('Week', 'Count'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result3);
    $objPHPExcel->getActiveSheet()->setTitle('Clients - Week Wise');

    /* Client Page updated records */
    /* Fetch Clients as per date wise */
    $index++;
    $result11 = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(changed), '%e %b %Y') AS 'date_formatted', title FROM node WHERE type = :nodeType AND changed BETWEEN :startDate AND :endDate order by date_formatted ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($result11, array('Date', 'Name'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result11);
    $objPHPExcel->getActiveSheet()->setTitle('Client pages - Date Wise');

    /* Fetch Clients as per month wise */
    $index++;
    $result22 = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(changed), '%b %Y') AS 'date_formatted', title FROM node WHERE type = :nodeType AND changed BETWEEN :startDate AND :endDate order by date_formatted ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($result22, array('Month', 'Name'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result22);
    $objPHPExcel->getActiveSheet()->setTitle('Client pages - Month Wise');

    /* Fetch Clients as per week wise */
    $index++;
    $result33 = db_query("SELECT week(DATE_FORMAT(FROM_UNIXTIME(changed), '%Y-%m-%d'),1) AS 'week',DATE_FORMAT(FROM_UNIXTIME(changed), '%Y') as year,title FROM node WHERE type = :nodeType AND changed BETWEEN :startDate AND :endDate order by changed ASC", array(':nodeType' => $node_type, ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    if (!empty($result33)) {
        foreach ($result33 as $key => $each) {
            $each['week'] = $each['week'];
            $resultDates = Start_End_Date_of_a_week($each['week'], $each['year']);
            $startDate = $resultDates[0];
            $endDate = $resultDates[1];
            $result33[$key]['week'] = ordinal($each['week']) . " week of " . $each['year'];
            unset($result33[$key]['year']);
        }
    }
    array_unshift($result33, array('Week', 'Name'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($result33);
    $objPHPExcel->getActiveSheet()->setTitle('Client pages - Week Wise');

    /* End of client Page updated records */

    /* Submission records Date Wise start */
    $index++;
    $submissionResult = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(created), '%e %b %Y') AS 'date_formatted',count(nid) as count FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate group by date_formatted order by created ASC", array(':nodeType' => 'music_booking_inquiry', ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($submissionResult, array('Date', 'Count'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($submissionResult);
    $objPHPExcel->getActiveSheet()->setTitle('Submissions - Date Wise');
    /* End of submission records Date Wise start */

    /* Submission records Month Wise start */
    $index++;
    $submissionResult1 = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(created), '%b %Y') AS 'date_formatted',count(nid) as count FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate group by date_formatted order by created ASC", array(':nodeType' => 'music_booking_inquiry', ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($submissionResult1, array('Month', 'Count'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($submissionResult1);
    $objPHPExcel->getActiveSheet()->setTitle('Submissions - Month Wise');
    /* End of submission records Month Wise start */

    /* Submission records Week Wise start */
    $index++;
    $submissionResult2 = db_query("SELECT week(DATE_FORMAT(FROM_UNIXTIME(created), '%Y-%m-%d'),1) AS 'week',DATE_FORMAT(FROM_UNIXTIME(created), '%Y') as year,count(nid) as count FROM node WHERE type = :nodeType AND created BETWEEN :startDate AND :endDate group by week order by created ASC", array(':nodeType' => 'music_booking_inquiry', ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    if (!empty($submissionResult2)) {
        foreach ($submissionResult2 as $key => $each) {
            $each['week'] = $each['week'];
            $resultDates = Start_End_Date_of_a_week($each['week'], $each['year']);
            $startDate = $resultDates[0];
            $endDate = $resultDates[1];
            $submissionResult2[$key]['week'] = ordinal($each['week']) . " week of " . $each['year'];
            unset($submissionResult2[$key]['year']);
        }
    }
    array_unshift($submissionResult2, array('Week', 'Count'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($submissionResult2);
    $objPHPExcel->getActiveSheet()->setTitle('Submissions - Week Wise');
    /* End of submission records Week Wise start */

    /* Agent Map regions update */
    /* Agent Map regions as per date wise */
    $index++;
    $regionResult = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(changed), '%e %b %Y') AS 'date_formatted', title FROM node WHERE type = :nodeType AND changed BETWEEN :startDate AND :endDate order by changed ASC", array(':nodeType' => 'music_regions', ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($regionResult, array('Date', 'Agent map regions'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($regionResult);
    $objPHPExcel->getActiveSheet()->setTitle('Agent regions - Date Wise');

    /* Fetch Clients as per month wise */
    $index++;
    $regionResult1 = db_query("SELECT DATE_FORMAT(FROM_UNIXTIME(changed), '%b %Y') AS 'date_formatted', title FROM node WHERE type = :nodeType AND changed BETWEEN :startDate AND :endDate order by changed ASC", array(':nodeType' => 'music_regions', ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    array_unshift($regionResult1, array('Month', 'Agent map regions'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($regionResult1);
    $objPHPExcel->getActiveSheet()->setTitle('Agent regions - Month Wise');

    /* Fetch Clients as per week wise */
    $index++;
    $regionResult2 = db_query("SELECT week(DATE_FORMAT(FROM_UNIXTIME(changed), '%Y-%m-%d'),1) AS 'week',DATE_FORMAT(FROM_UNIXTIME(changed), '%Y') as year,title FROM node WHERE type = :nodeType AND changed BETWEEN :startDate AND :endDate order by changed ASC", array(':nodeType' => 'music_regions', ':startDate' => $lastDate, ':endDate' => $todayTime))->fetchAll(PDO::FETCH_ASSOC);
    if (!empty($regionResult2)) {
        foreach ($regionResult2 as $key => $each) {
            $each['week'] = $each['week'];
            $resultDates = Start_End_Date_of_a_week($each['week'], $each['year']);
            $startDate = $resultDates[0];
            $endDate = $resultDates[1];
            $regionResult2[$key]['week'] = ordinal($each['week']) . " week of " . $each['year'];
            unset($regionResult2[$key]['year']);
        }
    }
    array_unshift($regionResult2, array('Week', 'Agent map regions'));
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($index);
    $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
    $objPHPExcel->getActiveSheet()->fromArray($regionResult2);
    $objPHPExcel->getActiveSheet()->setTitle('Agent regions - Week Wise');
    /* End of client Page updated records */
    $objPHPExcel->setActiveSheetIndex(0);
    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    header('Content-Disposition: attachment;filename="' . $filename . '"');
    header('Cache-Control: max-age=0');
    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
    $objWriter->save('php://output');
    exit();
}

function ordinal($number)
{
    $ends = array('th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th');
    if ((($number % 100) >= 11) && (($number % 100) <= 13))
        return $number . 'th';
    else
        return $number . $ends[$number % 10];
}

function Start_End_Date_of_a_week($week, $year)
{
    $time = strtotime("1 January $year", time());
    $day = date('w', $time);
    $time += ((7 * $week) + 1 - $day) * 24 * 3600;
    $dates[0] = date('d M Y', $time);
    $time += 6 * 24 * 3600;
    $dates[1] = date('d M Y', $time);
    return $dates;
}


function fetchReportsData($viewName, $displayName = '', $limit = 0)
{
    $view = views_get_view($viewName);
    $view->build($displayName);
    $view->set_items_per_page($limit);
    $view->execute();
    $results = $view->result;
    return $results;
}

function fetchReportsPdfHtml($viewName, $displayName = '', $limit = 0, $statusParam = '', $report)
{
    $params = getPageQueryParameters();
    switch ($report) {
        case 'rosters':
            $rosterNames = '';
            if (isset($params['field_music_roster_types_tid'])) {
                $termItems = '';
                foreach ($params['field_music_roster_types_tid'] as $eachTerm) {
                    if ($eachTerm != 'all') {
                        $term = taxonomy_term_load($eachTerm);
                        $termItems .= $term->name . ", ";
                    }
                }
                if ($termItems != '') {
                    $rosterNames = "ROSTER's- " . rtrim($termItems, ', ');
                }
            }
            $colName = 'ROSTER NAME';
            $row2col1 = 'Connect ID';
            $row2col2 = 'Client Name';
            break;
        case 'category':
            $colName = 'Category NAME';
            $row2col1 = 'Connect ID';
            $row2col2 = 'Client Name';
            $row2col3 = 'Selling Point';
            $row2col4 = 'Expiry Date';
            break;
        case 'artist':
            $colName = 'Clients';
            $row2col1 = 'Connect ID';
            $row2col2 = 'Client Name';
            $row2col3 = 'Rosters';
            $row2col4 = 'Category';
            break;
    }
    $results = fetchReportsData($viewName, $displayName, $limit);
    $logo_url = drupal_realpath(drupal_get_path("theme", "talento_theme")) . "/images/WME-ReBrand-pdf.png";
    $logo = "<img src='$logo_url'/>";


    $html = "<table style='width:100%'><tr><td style='text-align:left;width:100%;border-bottom:1px solid #cccccc;padding-bottom:10px'>" . $logo . "</td></tr></table>";
    if ($rosterNames != '') {
        $html .= "<table style='overflow-wrap: break-word; width:100%; table-layout: fixed'><tr><td style='text-align:center;width:100%;border-bottom:1px solid #cccccc;padding-bottom:10px'>" . $rosterNames . "</td></tr></table>";
    }

    $firstCol = "width:50%";
    $tdWidth = $colSpan = '';
    if ($report == 'rosters') {
        $firstCol = "width:100%";
        $tdWidth = "width:25%";
        $colSpan = "colspan='4'";
    }
    $htmlInr = '';
    if ($report == 'artist') {
        if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
            $firstCol = "width:15%";
            $secondCol = "width:25%";
            $thirdCol = "width:30%";
            $htmlInr .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;font-size: 15px;line-height: 21px;float-left;word-wrap:break-word;" . $thirdCol . "'>";
            $htmlInr .= $row2col3;
            $htmlInr .= "</td>";
            $htmlInr .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;    font-size: 15px;    line-height: 21px;float-left;word-wrap:break-word;" . $thirdCol . "'>";
            $htmlInr .= $row2col4;
            $htmlInr .= "</td>";
        } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
            $firstCol = "width:15%";
            $secondCol = "width:25%";
            $thirdCol = "width:60%";
            $htmlInr .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;    font-size: 15px;    line-height: 21px;float-left;word-wrap:break-word;" . $thirdCol . "'>";
            $htmlInr .= $row2col3;
            $htmlInr .= "</td>";
        } elseif (isset($params['category']) && $params['category'] == 1) {
            $firstCol = "width:15%";
            $secondCol = "width:25%";
            $thirdCol = "width:60%";
            $htmlInr .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;    font-size: 15px;    line-height: 21px;float-left;word-wrap:break-word;" . $thirdCol . "'>";
            $htmlInr .= $row2col4;
            $htmlInr .= "</td>";
        }
    } elseif ((isset($params['includepoints']) && $params['includepoints'] == 1) && $report == 'category') {
        $firstCol = "width:15%";
        $secondCol = "width:25%";
        $thirdCol = "width:30%";
        $htmlInr .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;    font-size: 15px;    line-height: 21px;float-left;word-wrap:break-word;" . $thirdCol . "'>";
        $htmlInr .= $row2col3;
        $htmlInr .= "</td>";
        $htmlInr .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;    font-size: 15px;    line-height: 21px;float-left;word-wrap:break-word;" . $thirdCol . "'>";
        $htmlInr .= $row2col4;
        $htmlInr .= "</td>";
    }

    $tableStarts = "<table style='width:100%'>";
    $tableStarts .= "<tr>";
    $tableStarts .= "<td align='left' valign='top' style='color:#23527c;font-family: brandongrotesquebld;font-size: 15px;line-height: 21px;float:left;word-wrap:break-word;'>";
    $tableStarts .= $row2col2;
    $tableStarts .= "</td>";
    $tableStarts .= $htmlInr;
    $tableStarts .= "</tr>";
    $html .= $tableStarts;



    $array = array();
    $totalResults = count($results);
    $i = 1;
    $k = 0;
    if (!empty($results)) {
        foreach ($results as $eachItem) {
            $alreadyStarted = FALSE;
            $status = $eachItem->field_field_profile_status[0]['rendered']['#markup'];

            $cnctId = $eachItem->field_field_connect_id[0]['raw']['value'];
            $name = $eachItem->field_field_display_name[0]['raw']['value'];
            if (empty($name)) {
                $name = $eachItem->node_title;
            }
            if (isset($eachItem->field_field_profile_status[0]['rendered']['#markup']) && ($eachItem->field_field_profile_status[0]['rendered']['#markup'] == 'Published') && (!empty($eachItem->field_field_featured_artist_for)) && (isset($params['field_profile_status_value']) && in_array('2', $params['field_profile_status_value']))) {
                $name .= ' *';
            }
            if ($report == 'artist') {
                $rosters = $category = '';
                if (isset($params['rosters']) && ($params['rosters'] == 1) || isset($params['category']) && ($params['category'] == 1)) {
                    if (!empty($eachItem->field_field_music_roster_types)) {
                        foreach ($eachItem->field_field_music_roster_types as $rosterItem) {
                            if ($rosterItem['rendered']['#markup'] != 'Jazz' && $rosterItem['rendered']['#markup'] != 'Soundtracks') {
                                $rosters .= $rosterItem['rendered']['#markup'] . ", ";
                            }
                        }
                        $rosters = rtrim($rosters, ', ');
                    }
                    if (!empty($eachItem->field_field_music_engagement_types)) {
                        foreach ($eachItem->field_field_music_engagement_types as $catItem) {
                            $category .= $catItem['rendered']['#markup'] . ", ";
                        }
                        $category = rtrim($category, ', ');
                    }
                }
            }

            $array[$status]++;
            if ($array[$status] == 1 && ($statusParam)) {
                if ($k > 1 && ($report == 'rosters')) {
                    $html .= "</tr>";
                }
                $html .= "<tr><td style='font-family: brandongrotesquebld;text-align:left;font-size:16px; margin-top:10px; margin-bottom:10px;line-height: 21px;word-wrap:break-word;'>$status Clients</td></tr>";
                if ($k > 1 && ($report == 'rosters')) {
                    $html .= "<tr>";
                    $alreadyStarted = TRUE;
                }
            }

            //content
            if ($report != 'rosters') {
                $html .= "<tr>";
            } elseif ((($k % 4 == 0 && ($report == 'rosters')) || $i == 1) && !($alreadyStarted)) {
                $html .= "<tr>";
            }

            $html .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float:left;word-wrap:break-word;" . $tdWidth . "'>$name</td>";
            if ($report == 'artist') {
                if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                    $html .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;'>";
                    $html .= $rosters;
                    $html .= "</td>";
                    $html .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;'>";
                    $html .= $category;
                    $html .= "</td>";
                } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                    $html .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;'>";
                    $html .= $rosters;
                    $html .= "</td>";
                } elseif (isset($params['category']) && $params['category'] == 1) {
                    $html .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;'>";
                    $html .= $category;
                    $html .= "</td>";
                }
            } elseif ((isset($params['includepoints']) && $params['includepoints'] == 1) && ($report == 'category')) {
                $includeHtml = '';
                if (!empty($eachItem->field_field_music_engagement_types)) {
                    $date = date("Y-m-d");
                    $today = strtotime($date);
                    $todayplus15days = strtotime($date . ' + 15 days');
                    $active = $expiring = $expired = 0;
                    $include = 1;
                    if (in_array('active', $params['field_selling_points'])) {
                        $active = 1;
                    }
                    if (in_array('expiring', $params['field_selling_points'])) {
                        $expiring = 1;
                    }
                    if (in_array('expired', $params['field_selling_points'])) {
                        $expired = 1;
                    }
                    $engagementTypes = array();
                    $j = 0;
                    foreach ($eachItem->field_field_music_engagement_types as $each) {
                        $item = $each['rendered']['#markup'];
                        $engagementTypes[$j] = $item;
                        $j++;
                    }
                    if (!empty($eachItem->field_field_college_selling_point) && !empty($eachItem->field_field_college_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_college_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('College', $engagementTypes))) {
                            $includeHtml .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left; padding-right:20px;'>";
                            $includeHtml .= $eachItem->field_field_college_selling_point[0]['raw']['value'];
                            $includeHtml .= "</td>";
                            $includeHtml .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;width:100px;'>";
                            $includeHtml .= $date;
                            $includeHtml .= "</td>";
                        }
                    }
                    if (!empty($eachItem->field_field_corp_private_events_sellin) && !empty($eachItem->field_field_corp_pvt_events_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_corp_pvt_events_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Corp/Private Events', $engagementTypes))) {
                            if ($includeHtml != '') {
                                $starting = "</tr><tr><td></td><td></td>";
                            }
                            $includeHtml .= $starting . "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;'>";
                            $includeHtml .= $eachItem->field_field_corp_private_events_sellin[0]['raw']['value'];
                            $includeHtml .= "</td>";
                            $includeHtml .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;width:100px;'>";
                            $includeHtml .= $date;
                            $includeHtml .= "</td>";
                        }
                    }
                    if (!empty($eachItem->field_field_fairs_selling_point) && !empty($eachItem->field_field_fairs_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_fairs_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Fairs', $engagementTypes))) {
                            if ($includeHtml != '') {
                                $starting = "</tr><tr><td></td><td></td>";
                            }
                            $includeHtml .= $starting . "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;'>";
                            $includeHtml .= $eachItem->field_field_fairs_selling_point[0]['raw']['value'];
                            $includeHtml .= "</td>";
                            $includeHtml .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;width:100px;'>";
                            $includeHtml .= $date;
                            $includeHtml .= "</td>";
                        }
                    }

                    if (!empty($eachItem->field_field_festivals_selling_point) && !empty($eachItem->field_field_festivals_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_festivals_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Festivals', $engagementTypes))) {
                            if ($includeHtml != '') {
                                $starting = "</tr><tr><td></td><td></td>";
                            }
                            $includeHtml .= $starting . "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;'>";
                            $includeHtml .= $eachItem->field_field_festivals_selling_point[0]['raw']['value'];
                            $includeHtml .= "</td>";
                            $includeHtml .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;width:100px;'>";
                            $includeHtml .= $date;
                            $includeHtml .= "</td>";
                        }
                    }


                    if (!empty($eachItem->field_field_podcasts_selling_point) && !empty($eachItem->field_field_podcasts_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_podcasts_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Podcasts', $engagementTypes))) {
                            if ($includeHtml != '') {
                                $starting = "</tr><tr><td></td><td></td>";
                            }
                            $includeHtml .= $starting . "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;'>";
                            $includeHtml .= $eachItem->field_field_podcasts_selling_point[0]['raw']['value'];
                            $includeHtml .= "</td>";
                            $includeHtml .= "<td align='left' valign='top' style='color:#666666;font-size:14px;font-family: brandongrotesqueregular;float-left;padding-right:20px;width:100px;'>";
                            $includeHtml .= $date;
                            $includeHtml .= "</td>";
                        }
                    }
                }
            }
            $html .= $includeHtml;
            if ($report != 'rosters') {
                $html .= "</tr><tr><td style='height:15px'></td><td></td></tr>";
            } elseif (($i % 4 == 0 && ($report == 'rosters')) || ($i == $totalResults)) {
                $html .= "</tr><tr><td style='height:15px'></td><td></td></tr>";
            }
            $i++;
            $k++;
        }
    }
    $html .= '</table>';
    return $html;
}

function fetchReportsXLSHtml($viewName, $displayName = '', $limit = 0, $statusParam = '', $report)
{
    global $base_url;
    $params = getPageQueryParameters();
    $results = fetchReportsData($viewName, $displayName, $limit);
    $data = array();
    if (!empty($results)) {
        foreach ($results as $eachItem) {
            $status = isset($eachItem->field_field_profile_status[0]['rendered']['#markup']) ? strtolower($eachItem->field_field_profile_status[0]['rendered']['#markup']) : ''; // fetch status i.e. publish/unpublish/archive

            /*** if client is published > check if its a feature artist and from front publish - featured is selected ***/
            // if(isset($eachItem->field_field_profile_status[0]['rendered']['#markup']) && ($eachItem->field_field_profile_status[0]['rendered']['#markup']=='Published') && (!empty($eachItem->field_field_featured_artist_for)) && (isset($params['field_profile_status_value']) && in_array('2',$params['field_profile_status_value'])))
            // {
            // $status='featured';
            // }
            $cnctId = $eachItem->field_field_connect_id[0]['raw']['value'];
            $name = empty($eachItem->field_field_display_name[0]['raw']['value']) ? $eachItem->node_title : $eachItem->field_field_display_name[0]['raw']['value'];
            $statusCol = $eachItem->field_field_profile_status[0]['rendered']['#markup'];
            $clientAlias = variable_get('mpid_' . $cnctId);
            $bioUrl = $base_url . "" . url("Music/" . $clientAlias);
            if ($report == 'artist') {
                if (isset($params['rosters']) && ($params['rosters'] == 1) || isset($params['category']) && ($params['category'] == 1)) {
                    $rosters = $category = '';
                    if (!empty($eachItem->field_field_music_roster_types)) {
                        foreach ($eachItem->field_field_music_roster_types as $rosterItem) {
                            if ($rosterItem['rendered']['#markup'] != 'Jazz' && $rosterItem['rendered']['#markup'] != 'Soundtracks') {
                                $rosters .= $rosterItem['rendered']['#markup'] . ", ";
                            }
                        }
                        $rosters = rtrim($rosters, ', ');
                    }
                    if (!empty($eachItem->field_field_music_engagement_types)) {
                        foreach ($eachItem->field_field_music_engagement_types as $catItem) {
                            $category .= $catItem['rendered']['#markup'] . ", ";
                        }
                        $category = rtrim($category, ', ');
                    }
                }
            } elseif ((isset($params['includepoints']) && $params['includepoints'] == 1) && ($report == 'category')) {
                $sellingPoint = $expiryDate = '';
                if (!empty($eachItem->field_field_music_engagement_types)) {
                    $date = date("Y-m-d");
                    $today = strtotime($date);
                    $todayplus15days = strtotime($date . ' + 15 days');
                    $active = $expiring = $expired = 0;
                    $include = 1;
                    if (in_array('active', $params['field_selling_points'])) {
                        $active = 1;
                    }
                    if (in_array('expiring', $params['field_selling_points'])) {
                        $expiring = 1;
                    }
                    if (in_array('expired', $params['field_selling_points'])) {
                        $expired = 1;
                    }
                    $engagementTypes = array();
                    $j = 0;
                    foreach ($eachItem->field_field_music_engagement_types as $each) {
                        $item = $each['rendered']['#markup'];
                        $engagementTypes[$j] = $item;
                        $j++;
                    }

                    if (!empty($eachItem->field_field_college_selling_point) && !empty($eachItem->field_field_college_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_college_sp_expires[0]['raw']['value']);
                        //echo $time1."]]";
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('College', $engagementTypes))) {
                            $sellingPoint .= $eachItem->field_field_college_selling_point[0]['raw']['value'];
                            $expiryDate .= $date;
                        }
                    }
                    if (!empty($eachItem->field_field_corp_private_events_sellin) && !empty($eachItem->field_field_corp_pvt_events_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_corp_pvt_events_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Corp/Private Events', $engagementTypes))) {
                            if ($sellingPoint != '') {
                                $sellingPoint .= "\r";
                            }
                            if ($expiryDate != '') {
                                $expiryDate .= "\r";
                            }
                            $sellingPoint .= $eachItem->field_field_corp_private_events_sellin[0]['raw']['value'];
                            $expiryDate .= $date;
                        }
                    }
                    if (!empty($eachItem->field_field_fairs_selling_point) && !empty($eachItem->field_field_fairs_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_fairs_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Fairs', $engagementTypes))) {
                            if ($sellingPoint != '') {
                                $sellingPoint .= "\r";
                            }
                            if ($expiryDate != '') {
                                $expiryDate .= "\r";
                            }
                            $sellingPoint .= $eachItem->field_field_fairs_selling_point[0]['raw']['value'];
                            $expiryDate .= $date;
                        }
                    }

                    if (!empty($eachItem->field_field_festivals_selling_point) && !empty($eachItem->field_field_festivals_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_festivals_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Festivals', $engagementTypes))) {
                            if ($sellingPoint != '') {
                                $sellingPoint .= "\r";
                            }
                            if ($expiryDate != '') {
                                $expiryDate .= "\r";
                            }
                            $sellingPoint .= $eachItem->field_field_festivals_selling_point[0]['raw']['value'];
                            $expiryDate .= $date;
                        }
                    }


                    if (!empty($eachItem->field_field_podcasts_selling_point) && !empty($eachItem->field_field_podcasts_sp_expires)) {
                        $time1 = strtotime($eachItem->field_field_podcasts_sp_expires[0]['raw']['value']);
                        $date = date('m/d/Y', $time1);
                        if (((($active == 1 && $time1 > $today) || ($expired == 1 && $time1 <= $today) || ($expiring == 1 && ($time1 > $today && $time1 <= $todayplus15days))) || ($include == 1)) && (in_array('Podcasts', $engagementTypes))) {
                            if ($sellingPoint != '') {
                                $sellingPoint .= "\r";
                            }
                            if ($expiryDate != '') {
                                $expiryDate .= "\r";
                            }
                            $sellingPoint .= $eachItem->field_field_podcasts_selling_point[0]['raw']['value'];
                            $expiryDate .= $date;
                        }
                    }
                }
            }
            switch ($report) {
                case 'rosters':
                    $rosterNames = "ROSTER's";
                    if (isset($params['field_music_roster_types_tid'])) {
                        $termItems = '';
                        foreach ($params['field_music_roster_types_tid'] as $eachTerm) {
                            if ($eachTerm != 'all') {
                                $term = taxonomy_term_load($eachTerm);
                                $termItems .= $term->name . ", ";
                            }
                            if ($termItems != '') {
                                $rosterNames = "ROSTER's - " . rtrim($termItems, ', ');
                            }
                        }
                    }
                    $colName = $rosterNames;
                    $row2col1 = 'Connect ID';
                    $row2col2 = 'Client Name';
                    break;
                case 'category':
                    $categoryNames = "Category's";
                    if (isset($params['field_music_engagement_types_tid'])) {
                        $termItems = '';
                        foreach ($params['field_music_engagement_types_tid'] as $eachTerm) {
                            if ($eachTerm != 'all') {
                                $term = taxonomy_term_load($eachTerm);
                                $termItems .= $term->name . ", ";
                            }
                            if ($termItems != '') {
                                $categoryNames = "(" . rtrim($termItems, ', ') . ")";
                            }
                        }
                    }
                    $colName = $categoryNames;
                    $row2col1 = 'Connect ID';
                    $row2col2 = 'Client Name';
                    $row2col3 = 'Selling Point';
                    $row2col4 = 'Expiry Date';
                    break;
                case 'artist':
                    $colName = 'Clients';
                    $row2col1 = 'Connect ID';
                    $row2col2 = 'Client Name';
                    $row2col3 = 'Rosters';
                    $row2col4 = 'Category';
                    $row2col5 = 'Status';
                    $row2col6 = 'URL';
                    break;
            }

            if ($statusParam) {
                //$data[$status][0]=array("",$colName);
                if ((isset($params['includepoints']) && $params['includepoints'] == 1) && ($report == 'category')) {
                    $data[$status][0] = array($row2col1, $row2col2, $row2col3, $row2col4);
                    $data[$status][] = array($cnctId, $name, $sellingPoint, $expiryDate);
                } elseif (($report == 'artist') && ((isset($params['category']) && $params['category'] == 1) || (isset($params['rosters']) && $params['rosters'] == 1))) {
                    if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                        $data[$status][0] = array($row2col1, $row2col2, $row2col3, $row2col4, $row2col5, $row2col6);
                        $data[$status][] = array($cnctId, $name, $rosters, $category, $statusCol, $bioUrl);
                    } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                        $data[$status][0] = array($row2col1, $row2col2, $row2col3, $row2col5, $row2col6);
                        $data[$status][] = array($cnctId, $name, $rosters, $statusCol, $bioUrl);
                    } elseif (isset($params['category']) && $params['category'] == 1) {
                        $data[$status][0] = array($row2col1, $row2col2, $row2col4, $row2col5, $row2col6);
                        $data[$status][] = array($cnctId, $name, $category, $statusCol, $bioUrl);
                    }
                } else {
                    $data[$status][0] = array($row2col1, $row2col2, $row2col5, $row2col6);
                    $data[$status][] = array($cnctId, $name, $statusCol, $bioUrl);
                }
            } else {
                //$data[0]=array("",$colName);
                if ((isset($params['includepoints']) && $params['includepoints'] == 1) && ($report == 'category')) {
                    $data[0] = array($row2col1, $row2col2, $row2col3, $row2col4);
                    $data[] = array($cnctId, $name, $sellingPoint, $expiryDate);
                } elseif ($report == 'artist' && (isset($params['category']) || isset($params['rosters']))) {
                    if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                        $data[0] = array($row2col1, $row2col2, $row2col3, $row2col4, $row2col5, $row2col6);
                        $data[] = array($cnctId, $name, $rosters, $category, $statusCol, $bioUrl);
                    } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                        $data[0] = array($row2col1, $row2col2, $row2col3, $row2col5, $row2col6);
                        $data[] = array($cnctId, $name, $rosters, $statusCol, $bioUrl);
                    } elseif (isset($params['category']) && $params['category'] == 1) {
                        $data[0] = array($row2col1, $row2col2, $row2col4, $row2col5, $row2col6);
                        $data[] = array($cnctId, $name, $category, $statusCol, $bioUrl);
                    }
                } else {
                    $data[0] = array($row2col1, $row2col2, $row2col5, $row2col6);
                    $data[] = array($cnctId, $name, $statusCol, $bioUrl);
                }
            }
        }
    }
    return $data;
}

function downloadRostersXls($data = '', $statusParam = '', $op = '', $report = '')
{
    ini_set('max_execution_time', 0);
    $params = getPageQueryParameters();
    $library = libraries_load('PHPExcel');
    $objPHPExcel = new PHPExcel();
    $topColStyle = array(
        'font' => array(
            'bold' => TRUE,
            'color' => array('rgb' => 'FFFFFF'),
            'size' => 14
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => '000000')
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_TOP,
        )
    );
    $secondStyle = array(
        'font' => array(
            'bold' => TRUE,
            'color' => array('rgb' => 'FFFFFF'),
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => '000000')
        )
    );

    switch ($report) {
        case 'rosters':
            $title = 'Rosters Report';
            $filename = 'rosters_report.xlsx';
            break;
        case 'category':
            $title = 'Category Report';
            $filename = 'category_report.xlsx';
            break;
        case 'artist':
            $title = 'Clients Report';
            $filename = 'clients_report.xlsx';
            break;
    }
    if ($statusParam) {
        /* Styling of published worksheet */
        $SheetExist = 0;
        $index = 1;
        if (isset($data['published']) && (!empty($data['published']))) {
            $SheetExist = 1;
            $objPHPExcel->getActiveSheet()->fromArray($data['published']);
            $objPHPExcel->getActiveSheet()->setTitle('Published');
            //$objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($secondStyle);
            //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
            $objPHPExcel->getActiveSheet()->getStyle('B1:B' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getStyle('D1:D' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
            //$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            //$objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(50);
            if (isset($params['includepoints']) && $params['includepoints'] == 1 && $report == 'category') {
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
                //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                    ->getAlignment()->setWrapText(true);
            } elseif ($report == 'artist') {
                if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('F1:F' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['category']) && $params['category'] == 1) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                }
            }
        }
        /* End Styling of published worksheet */

        /* Styling of featured worksheet */
        if (isset($data['featured']) && (!empty($data['featured']))) {
            if ($SheetExist == 1) {
                $objPHPExcel->createSheet();
                $objPHPExcel->setActiveSheetIndex($index);
                $index = $index + 1;
            } else {
                $SheetExist = 1;
            }
            $objPHPExcel->getActiveSheet()->fromArray($data['featured']);
            $objPHPExcel->getActiveSheet()->setTitle('Featured');
            //$objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($secondStyle);
            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
            $objPHPExcel->getActiveSheet()->getStyle('B1:B' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(50);        //$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            //$objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(50);
            if (isset($params['includepoints']) && $params['includepoints'] == 1 && $report == 'category') {
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
                //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                    ->getAlignment()->setWrapText(true);
            } elseif ($report == 'artist') {
                if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                    //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('D1:D' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                    $objPHPExcel->getActiveSheet()->getStyle('C1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('C2')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['category']) && $params['category'] == 1) {
                    $objPHPExcel->getActiveSheet()->getStyle('C1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('C2')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                }
            }
        }
        /* End Styling of featured worksheet */

        /* Styling of unpublished worksheet */
        if (isset($data['unpublished']) && (!empty($data['unpublished']))) {
            if ($SheetExist == 1) {
                $objPHPExcel->createSheet();
                $objPHPExcel->setActiveSheetIndex($index);
                $index = $index + 1;
            } else {
                $SheetExist = 1;
            }
            $objPHPExcel->getActiveSheet()->fromArray($data['unpublished']);
            $objPHPExcel->getActiveSheet()->setTitle('Unpublished');
            //$objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($secondStyle);
            //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
            $objPHPExcel->getActiveSheet()->getStyle('B1:B' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getStyle('D1:D' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
            //$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            //$objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(50);
            if (isset($params['includepoints']) && $params['includepoints'] == 1 && $report == 'category') {
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
                //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                    ->getAlignment()->setWrapText(true);
            } elseif ($report == 'artist') {
                if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('F1:F' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['category']) && $params['category'] == 1) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                }
            }
        }
        /* End Styling of unpublished worksheet */

        /* Styling of Archived worksheet */
        if (isset($data['archived']) && (!empty($data['archived']))) {
            if ($SheetExist == 1) {
                $objPHPExcel->createSheet();
                $objPHPExcel->setActiveSheetIndex($index);
                $index = $index + 1;
            } else {
                $SheetExist = 1;
            }
            $objPHPExcel->getActiveSheet()->fromArray($data['archived']);
            $objPHPExcel->getActiveSheet()->setTitle('Archived');
            //$objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($secondStyle);
            //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
            $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
            $objPHPExcel->getActiveSheet()->getStyle('B1:B' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getStyle('D1:D' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
            //$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            //$objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(50);
            if (isset($params['includepoints']) && $params['includepoints'] == 1 && $report == 'category') {
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
                //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())
                    ->getAlignment()->setWrapText(true);
            } elseif ($report == 'artist') {
                if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('F1:F' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                } elseif (isset($params['category']) && $params['category'] == 1) {
                    //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                    $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                    $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())
                        ->getAlignment()->setWrapText(true);
                }
            }
        }
        $objPHPExcel->setActiveSheetIndex(0);
        /* End Styling of Archived worksheet */
    } else {
        $objPHPExcel->getActiveSheet()->fromArray($data);
        $objPHPExcel->getActiveSheet()->setTitle($title);
        //$objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($topColStyle);
        $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($secondStyle);
        //$objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($topColStyle);
        $objPHPExcel->getActiveSheet()->getStyle('C1:D1')->applyFromArray($secondStyle);
        $objPHPExcel->getActiveSheet()->getStyle('B1:B' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
        $objPHPExcel->getActiveSheet()->getStyle('C1:C' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
        $objPHPExcel->getActiveSheet()->getStyle('D1:D' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(50);
        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
        //$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
        //$objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(50);

        if ($report == 'artist' && (isset($params['category']) && $params['category'] == 1) || (isset($params['rosters']) && $params['rosters'] == 1)) {
            if ((isset($params['category']) && $params['category'] == 1) && (isset($params['rosters']) && $params['rosters'] == 1)) {
                //$objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('E1:F1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(50);
                $objPHPExcel->getActiveSheet()->getStyle('F1:F' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            } elseif (isset($params['rosters']) && $params['rosters'] == 1) {
                //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            } elseif (isset($params['category']) && $params['category'] == 1) {
                //$objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($topColStyle);
                $objPHPExcel->getActiveSheet()->getStyle('E1')->applyFromArray($secondStyle);
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
                $objPHPExcel->getActiveSheet()->getStyle('E1:E' . $objPHPExcel->getActiveSheet()->getHighestRow())->getAlignment()->setWrapText(true);
            }
        }
    }
    if ($op == 'open') {
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit();
    } else {
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $wrapper = file_stream_wrapper_get_instance_by_uri('public://');
        $filepath = $wrapper->realpath() . '/reports/' . $filename;
        $objWriter->save($filepath);
    }
    //exit;
}

function get_curl_data_ajax($url)
{
    $ch = curl_init();
    $timeout = 5;
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    $data = curl_exec($ch);
    curl_close($ch);
    return $data;
}

function covtime_ajax($youtube_time)
{
    preg_match_all('/(\d+)/', $youtube_time, $parts);

    // Put in zeros if we have less than 3 numbers.
    if (count($parts[0]) == 1) {
        array_unshift($parts[0], "0", "0");
    } elseif (count($parts[0]) == 2) {
        array_unshift($parts[0], "0");
    }

    $sec_init = $parts[0][2];
    $seconds = $sec_init % 60;
    $seconds_overflow = floor($sec_init / 60);

    $min_init = $parts[0][1] + $seconds_overflow;
    $minutes = ($min_init) % 60;
    $minutes_overflow = floor(($min_init) / 60);

    $hours = $parts[0][0] + $minutes_overflow;

    if ($hours != 0) {
        return $hours . ':' . $minutes . ':' . $seconds;
    } else {
        return $minutes . ':' . $seconds;
    }
}
function number_format_short_ajax($n, $precision = 1)
{
    if ($n < 900) {
        $n_format = number_format($n, $precision);
        $suffix = '';
    } else if ($n < 900000) {
        $n_format = number_format($n / 1000, $precision);
        $suffix = 'K';
    } else if ($n < 900000000) {
        $n_format = number_format($n / 1000000, $precision);
        $suffix = 'M';
    } else if ($n < 900000000000) {
        $n_format = number_format($n / 1000000000, $precision);
        $suffix = 'B';
    } else {
        $n_format = number_format($n / 1000000000000, $precision);
        $suffix = 'T';
    }
    if ($precision > 0) {
        $dotzero = '.' . str_repeat('0', $precision);
        $n_format = str_replace($dotzero, '', $n_format);
    }
    return $n_format . $suffix;
}
function time_elapsed_string_ajax($datetime, $full = false)
{
    $now = new DateTime;
    $ago = new DateTime($datetime);
    $diff = $now->diff($ago);
    $diff->w = floor($diff->d / 7);
    $diff->d -= $diff->w * 7;

    $string = array(
        'y' => 'year',
        'm' => 'month',
        'w' => 'week',
        'd' => 'day',
        'h' => 'hour',
        'i' => 'minute',
        's' => 'second',
    );
    foreach ($string as $k => &$v) {
        if ($diff->$k) {
            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');
        } else {
            unset($string[$k]);
        }
    }

    if (!$full) {
        $string = array_slice($string, 0, 1);
    }
    return $string ? implode(', ', $string) . ' ago' : 'just now';
}

function YoutubeFeedsAjax($youtube_id, $next)
{
    $key = YOUTUBE_FEED_KEY;
    $endpoint_v31 = YOUTUBE_ENDPOINT_1;
    $endpoint_v32 = YOUTUBE_ENDPOINT_2;
    $endpoint_v33 = YOUTUBE_ENDPOINT_3;

    $url = '';
    if (strpos($youtube_id, 'channel/') !== false) {
        $channelId = str_replace('channel/', '', $youtube_id);
        $url = $endpoint_v31 . '?part=contentDetails&id=' . $channelId . '&key=' . $key;
    } else {
        $username = $youtube_id;
        if (strpos($youtube_id, 'user/') !== false) {
            $username = str_replace('user/', '', $youtube_id);
        }
        $url = $endpoint_v31 . '?part=contentDetails&forUsername=' . $username . '&key=' . $key;
    }
    $result = get_curl_data_ajax($url);
    $playlistData = json_decode($result);
    $playlistId = false;
    if (!empty($playlistData->items)) {
        $playlistId = $playlistData->items[0]->contentDetails->relatedPlaylists->uploads;
    }
    $feeds = array();
    $videos = array();
    if ($playlistId) {
        $url = $endpoint_v32 . '?part=contentDetails,snippet&playlistId=' . $playlistId . '&maxResults=5&key=' . $key;
        if (!empty($next)) {
            $url .= '&pageToken=' . $next;
        }
        $result = get_curl_data_ajax($url);
        $feedData = json_decode($result);
        $nextPageToken = $feedData->nextPageToken;
        $totalResults = $feedData->pageInfo->totalResults;
        $resultsPerPage = $feedData->pageInfo->resultsPerPage;
        if (!empty($feedData->items)) {
            foreach ($feedData->items as $items) {
                $videos[] = $items->snippet->resourceId->videoId;
            }
            if (!empty($videos)) {
                $url = $endpoint_v33 . '?part=contentDetails,statistics,snippet&id=' . implode(',', $videos) . '&key=' . $key;
                $result = get_curl_data_ajax($url);
                $videoData = json_decode($result);
                if (!empty($videoData->items)) {
                    foreach ($videoData->items as $video) {
                        $duration = covtime_ajax($video->contentDetails->duration);
                        $feeds[] = [
                            'title' => $video->snippet->title,
                            'description' => $video->snippet->description,
                            'thumbnail' => $video->snippet->thumbnails->medium->url,
                            'url' => 'https://www.youtube.com/watch?v=' . $video->id,
                            'channel' => $video->snippet->channelTitle,
                            'duration' => $duration,
                            'views' => number_format_short_ajax($video->statistics->viewCount),
                            'published' => time_elapsed_string_ajax($video->snippet->publishedAt),
                            'next' => $nextPageToken
                        ];
                    }
                }
            }
        }
    }
    return $feeds;
}

function music_talents_scroll_youtube()
{
    $youtube_id = arg(3);
    $next = $_REQUEST['nxt'];
    $youtube_feeds = YoutubeFeedsAjax($youtube_id, $next);
    $youtube_iframe = '';
    $token = '';
    if (!empty($youtube_feeds)) {
        foreach ($youtube_feeds as $youtube_feed) {
            $youtube_iframe .= '<div class="row">
				<div class="col-md-12 col-xs-12 youtube-col">
					<div class="row">
						<div class="col-md-6 col-xs-6 img-time">
							<a href="' . $youtube_feed['url'] . '" target="_blank"><img src="' . $youtube_feed['thumbnail'] . '" class="img-thumbnail"></a>
							<span>' . $youtube_feed['duration'] . '</span>
						</div>
						<div class="col-md-6 col-xs-6 youtube-txt">
							<ul class="list-group list-group-flush youtube-list">
							  <li class="list-group-item youtube-title truncate"><a href="' . $youtube_feed['url'] . '" target="_blank"><strong>' . $youtube_feed['title'] . '</strong></a></li>
							  <li class="list-group-item">' . $youtube_feed['channel'] . '<img class="youtube-tick" src="' . $base_url . '/sites/all/themes/talento_theme/images/youtube-tick.png"/></li>
							  <li class="list-group-item">' . $youtube_feed['views'] . ' views . ' . $youtube_feed['published'] . '</li>
							</ul>
						</div>
					</div>
				</div></div>';
            $token = $youtube_feed['next'];
        }
        echo json_encode(array(
            'result' => $youtube_iframe,
            'count'  => $count,
            'token'  => $token
        ));
    }
}

function call_music_ajax()
{
    $nid = $_POST['unq'];
    $name = $_POST['name'];
    if ($name == 'published') {
        $status = 1;
    } elseif ($name == 'unpublished') {
        $status = 2;
    }
    if ($status) {
        $node = node_load($nid);
        $node->field_profile_status['und'][0]['value'] = $status;
        node_save($node);
        writeLogMessageToFile("Node ID: " . $nid . ", Status: " . $name . ", Hook: call_music_ajax");
        return true;
    }
}

function music_custom_cron()
{
    ini_set('max_execution_time', 0);
    $cron_start_at = date('Y-m-d H:i:s');
    variable_set('sync_cron_running', time());
    module_load_include('inc', 'music_custom', 'sync_music/sync.music');
    sync_music();
    module_load_include('inc', 'music_custom', 'sync_music/sync.music-agents');
    sync_music_agents();
    variable_set('music_cron_custom_timestamp', $cron_start_at);
    variable_set('music_agent_cron_timestamp', $cron_start_at);
    variable_set('sync_cron_running', 'false');
    watchdog('sync_cron_music_custom', 'Cron is ended at ' . time());
}

function music_user_register($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        ctools_add_js('music-user-register', 'music_custom');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Register A New Account'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_user_register_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_user_register_form');
    }
}

function music_user_register_form($form, $form_state)
{
    global $base_url;
    $form = array();
    $form['#attributes'] = array('class' => array('music-user-register-form'));
    $form['validation_message'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="validation_message_wrapper">',
        '#suffix' => '</div>',
    );
    $form['first_name'] = array(
        '#prefix'   => '<div class="full-name-wrapper"><div class="first-name">',
        '#type'     => 'textfield',
        '#name'     => 'first_name',
        '#title'    => t('First Name'),
        '#size'     => 60,
        '#suffix'   => '<div class="first-name-message"></div></div>',
    );
    $form['last_name'] = array(
        '#prefix'   => '<div class="last-name">',
        '#type'     => 'textfield',
        '#title'    => t('Last Name'),
        '#size'     => 60,
        '#suffix'   => '<div class="last-name-message"></div></div></div>',
    );
    $form['company_name'] = array(
        '#type'     => 'textfield',
        '#title'    => t('Company Name'),
        '#size'     => 60,
        '#suffix'   => '<div class="company-message"></div>',
    );
    $form['phone_number'] = array(
        '#type'     => 'textfield',
        '#title'    => t('Phone Number (Optional)'),
        '#size'     => 60,
    );
    $form['email_address'] = array(
        '#type'     => 'textfield',
        '#title'    => t('Email Address'),
        '#size'     => 60,
        '#suffix'   => '<div class="email-message"></div>',
    );

    $special_character = "~`!@#$%^&*()+=_-{}[]\|:;\"'?/<>,.";
    $form['password'] = array(
        '#type'     => 'password',
        '#title'    => t('Password'),
        '#size'     => 60,
        '#suffix'   => '<div class="password-message"></div><div class="password-info">Password must be a minimum of eight (8) characters in length and contain at least one (1) special character (' . $special_character . ').</div>',
    );
    $form['confirm_password'] = array(
        '#type'     => 'password',
        '#title'    => t('Confirm Password'),
        '#size'     => 60,
        '#suffix'   => '<div class="conf-password-message"></div>',
    );
    $form['markup'] = array(
        '#markup' => '<div class="custom-chk-wrapper"><span class="custom-chk"></span><span class="chk-label">I agree to the <a href="' . $base_url . '/tos/" target="_blank">Terms of Use</a></span></div><div class="custom-chk-wrapper"><span class="custom-chk"></span><span class="chk-label">I agree to the <a href="' . $base_url . '/privacypolicy/" target="_blank">Privacy Policy</a></span></div>',
    );
    $form['cancel'] = array(
        '#prefix'     => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'       => 'submit',
        '#value'      => t('Cancel'),
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn')),
    );
    $form['submit'] = array(
        '#type'       => 'button',
        '#value'      => t('Next'),
        // You may need this to disable validation.
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'music_user_register_form_submit',
            'event'    => 'click',
        ),
        '#attributes' => array(
            'class' => array('disabled-btn btn-success modal-btn sbmt-btn btn', 'music_user_register_form_submit'),
            'disabled' => 'disabled'
        ),
        '#suffix'     => '</div></div>',
    );
    return $form;
}

function music_user_register_form_submit(&$form, &$form_state)
{
    global $music_tid, $base_url;
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('music-user-register', 'music_custom');
    ctools_add_js('ajax-responder');
    $output = array();
    $flag = array();

    $phone_no = $form_state['values']['field_phone_no'];
    if (empty($phone_no)) {
        $phone_no = "";
    }

    $first_name = trim($form_state['values']['first_name']);
    if (empty($first_name)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.first-name-message', '<div class="custom-error red-label">First name field is required.</div>');
    } else {
        $flag[] = 0;
        $output[] = ajax_command_html('.first-name-message', '');
    }

    $last_name = trim($form_state['values']['last_name']);
    if (empty($last_name)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.last-name-message', '<div class="custom-error red-label">Last name field is required.</div>');
    } else {
        $flag[] = 0;
        $output[] = ajax_command_html('.last-name-message', '');
    }

    $company_name = trim($form_state['values']['company_name']);
    if (empty($company_name)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.company-message', '<div class="custom-error red-label">Company field is required.</div>');
    } else {
        $flag[] = 0;
        $output[] = ajax_command_html('.company-message', '');
    }

    $email_address = trim($form_state['values']['email_address']);
    $user_exists   = user_load_by_mail($email_address);
    if (empty($email_address)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.email-message', '<div class="custom-error red-label">Email field is required.</div>');
    } else if (filter_var($email_address, FILTER_VALIDATE_EMAIL) === false) {
        $flag[] = 1;
        $output[] = ajax_command_html('.email-message', '<div class="custom-error red-label">Invalid email address.</div>');
    } else if (is_object($user_exists)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.email-message', '<div class="custom-error red-label">Email address already exists.</div>');
    } else {
        $flag[] = 0;
        $output[] = ajax_command_html('.email-message', '');
    }

    $password = trim($form_state['values']['password']);
    $special_character = "~`!@#$%^&*()+=_-{}[]\|:;\"'?/<>,.";
    if (empty($password)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.password-message', '<div class="custom-error red-label">Password field is required.</div>');
    } else if (strlen($password) < 8) {
        $flag[] = 1;
        $output[] = ajax_command_html('.password-message', '<div class="custom-error red-label">Password must be of minimum 8 characters in length.</div>');
    } else if (!preg_match("#[\~\`\!\@\#\$\%\^\,\'\"\&\*\(\)\_\-\+\=\{\}\[\\]\|\:\;\<\>\.\?\/\\\\]+#", $password)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.password-message', '<div class="custom-error red-label">Password must contain atleast 1 special character.</div>');
    } else {
        $flag[] = 0;
        $output[] = ajax_command_html('.password-message', '');
    }

    $conf_password = trim($form_state['values']['confirm_password']);
    if (empty($conf_password)) {
        $flag[] = 1;
        $output[] = ajax_command_html('.conf-password-message', '<div class="custom-error red-label">Confirm Password field is required.</div>');
    } else if (!empty($password) && !empty($conf_password)) {
        if ($password != $conf_password) {
            $flag[] = 1;
            $output[] = ajax_command_html('.conf-password-message', '<div class="custom-error red-label">Confirm Password is not matching.</div>');
        } else {
            $flag[] = 0;
            $output[] = ajax_command_html('.conf-password-message', '');
        }
    } else {
        $flag[] = 0;
        $output[] = ajax_command_html('.conf-password-message', '');
    }

    if (!in_array(1, $flag)) {
        //Code for creating external user starts
        $external_user = array(
            'name' => $email_address,
            'pass' => $password,
            'mail' => $email_address,
            'signature_format' => 'full_html',
            'status' => 0,
            'language' => 'en',
            'init' => 'Email',
            'roles' => array(
                DRUPAL_AUTHENTICATED_RID => 'authenticated user',
                15 => 'external_user_registration', // role id for custom roles varies per website
            ),
            'field_first_name'     => array('und' => array(0 => array('value' => trim($first_name),),),),
            'field_last_name'      => array('und' => array(0 => array('value' => trim($last_name),),),),
            'field_company_name'   => array('und' => array(0 => array('value' => trim($company_name),),),),
            'field_phone_no'       => array('und' => array(0 => array('value' => trim($phone_no),),),),
            'field_business_units' => array('und' => array(0 => array('tid' => $music_tid,),),),
        );
        $account = user_save(NULL, $external_user);
        $uid  = $account->uid;
        $uuid = $account->uuid;
        $created = $account->created;
        $status = $account->status;
        //Code for creating external user ends
        //Code for sending email verification link starts
        $url  = url("Music/all/talent");
        $body = "<p>Click here to activate your Client Bios account: <a href='" . $base_url . $url . "?uid=$uid&created=$created&uuid=$uuid' target='_blank'>link</a></p>";
        $params = array(
            'subject' => t('Email verification link'),
            'body' => $body,
        );
        drupal_mail("music_custom", "music_user_register", $email_address, language_default(), $params);
        //Code for sending email verification link ends
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('REGISTRATION COMPLETE'),
        );
        $success_output = ctools_modal_form_wrapper('registration_complete_form', $form_state);
        print ajax_render($success_output);
        drupal_exit();
    }

    return array(
        '#type' => 'ajax',
        '#commands' => $output,
    );
}

function music_custom_mail($key, &$message, $params)
{
    global $user;
    switch ($key) {
        case 'music_user_register':
            $headers = array(
                'MIME-Version' => '1.0',
                'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
                'Content-Transfer-Encoding' => '8Bit',
                'X-Mailer' => 'Drupal'
            );
            foreach ($headers as $key => $value) {
                $message['headers'][$key] = $value;
            }
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
    }
}

function registration_complete_form($form, $form_state)
{
    $form = array();
    $form['#attributes'] = array('class' => array('registration-complete-form'));
    $form['markup'] = array(
        '#markup' => '<div class="confirm">A confirmation link has been emailed to you to validate your account.<br/>Once validated you will be able to login.</div>',
    );
    $form['cancel'] = array(
        '#prefix'     => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'       => 'submit',
        '#value'      => t('Close'),
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn')),
    );
    //Login button commented since login functionality not required on registration
    $form['submit'] = array(
        '#type'       => 'button',
        '#value'      => t('Log in'),
        // You may need this to disable validation.
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'registration_complete_form_submit',
            'event'    => 'click',
        ),
        '#attributes' => array(
            'class' => array('btn-success success-btn modal-btn sbmt-btn btn', 'registration_complete_form_submit'),
        ),
        '#suffix'     => '</div></div>',
    );
    return $form;
}

function registration_complete_form_submit(&$form, &$form_state)
{
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('music-user-register', 'music_custom');
    ctools_add_js('ajax-responder');

    $form_state = array(
        'ajax' => TRUE,
        'title' => t('LOG IN'),
    );
    //$login_output = ctools_modal_form_wrapper('user_login', $form_state);
    $login_output[] = ctools_ajax_command_redirect('Music/all/talent', 0, array('query' => array('popup' => 'login')));
    print ajax_render($login_output);
    drupal_exit();
}

/**
 * Menu callback; process one time login link and redirects to the user page on success.
 */
function music_user_activate($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        ctools_add_js('music-user-activate', 'music_custom');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('VALIDATION SUCCESSFUL'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_user_activate_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_user_activate_form');
    }
}

function music_user_activate_form($form, $form_state)
{
    $uid          = arg(4);
    $created      = arg(5);
    $current_time = time();
    $uuid         = arg(6);
    $difference   = $current_time - $created;
    $ago          = $difference / 3600;
    if ($ago > 24) {
        $message = 'Validation link has been expired.';
    } else {
        $external_user = user_load($uid);
        if (($external_user->status == 0) && ($external_user->uuid == $uuid)) {
            $external_user->status = 1;
            user_save($external_user);
            $message = 'Your account has been validated. You may now log in';
        } else {
            $message = 'Page not found.';
        }
    }

    $form = array();
    $form['message'] = array(
        '#markup' => '<div class="confirm">' . $message . '</div>'
    );
    $form['cancel'] = array(
        '#prefix'     => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'       => 'submit',
        '#value'      => t('Close'),
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn')),
    );
    //Login button commented since login functionality not required on registration
    $form['submit'] = array(
        '#type'       => 'button',
        '#value'      => t('Log in'),
        // You may need this to disable validation.
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'registration_complete_form_submit',
            'event'    => 'click',
        ),
        '#attributes' => array(
            'class' => array('btn-success success-btn modal-btn sbmt-btn btn', 'registration_complete_form_submit'),
        ),
        '#suffix'     => '</div></div>',
    );
    return $form;
}


function music_custom_form_user_register_form_alter(&$form, &$form_state, $form_id)
{
    global $user, $music_tid, $tv_tid;
    $form['#attached']['js'] = array(
        drupal_get_path('module', 'talento_custom') . '/js/account_settings.js',
    );
    if (is_array($user->roles) && (in_array('super_admin', $user->roles) || in_array('tv_admin', $user->roles) || in_array('music_admin', $user->roles))) {
        unset($form['field_azure_connect_id']);
        unset($form['field_full_credits_link']);
        $options = $form['account']['roles']['#options'];
        $new_options = array();
        $buisness_unit_default = ($_SERVER['HTTP_HOST'] == MUSIC_SITEURL) ? array($music_tid) : array($tv_tid);
        //unset($form['account']['roles']['#options']);
        if (arg(3) == "agent") {
            $internal_roles = unserialize(INTERNAL_USER_ROLES);
            if (in_array('tv_admin', $user->roles)) {
                $internal_roles = unserialize(INTERNAL_TV_USER_ROLES);
            } else if (in_array('music_admin', $user->roles)) {
                $internal_roles = unserialize(INTERNAL_PA_USER_ROLES);
            }
            foreach ($options as $key => $option) {
                if (isset($internal_roles[$option])) {
                    if ($option == 'super_admin' && !in_array('super_admin', $user->roles)) {
                        continue;
                    }
                    $new_options[$key] = $internal_roles[$option];
                }
            }
            //print_r($new_options);die;
            asort($new_options);
            $form['account']['roles']['#options'] = $new_options;
            $form['field_business_units']['und']['#default_value'] = $buisness_unit_default;
            unset($form['field_company_name']);
            unset($form['field_phone_no']);
        } else if (arg(3) == "recipient") {
            foreach ($options as $key => $option) {
                if (($option == "recipient")) {
                    $new_options[$key] = $option;
                }
            }
            asort($new_options);
            $form['account']['roles']['#options'] = $new_options;
            unset($form['field_business_units']);
            unset($form['field_company_name']);
            unset($form['field_phone_no']);
            $form['account']['roles']['#access'] = 0;
        } else if (arg(3) == "authorised") {
            foreach ($options as $key => $option) {
                if (($option == "authorised")) {
                    $new_options[$key] = $option;
                }
            }
            asort($new_options);
            $form['account']['roles']['#options'] = $new_options;
            unset($form['field_business_units']);
            unset($form['field_company_name']);
            unset($form['field_phone_no']);
            $form['account']['roles']['#access'] = 0;
        } else if (arg(3) == "external_user_registration") {
            foreach ($options as $key => $option) {
                if (($option == "external_user_registration")) {
                    $new_options[$key] = $option;
                }
            }
            asort($new_options);

            $form['account']['roles']['#options'] = $new_options;
            $form['field_business_units']['und']['#default_value'] = $buisness_unit_default;

            $form['account']['roles']['#access'] = 0;
            $form['field_business_units']['#access'] = 0;
        }
        $form['account']['status']['#access'] = 0;
        $form['account']['notify']['#access'] = 0;
    }
    $form['#validate'][] = "user_register_form_custom_validate";
    $form['#submit'][] = "user_register_form_custom_submit";
}

function user_register_form_custom_validate($form, $form_state)
{
    $business_units_arr = array();
    foreach ($form_state['values']['field_business_units']['und'] as $unit) {
        $business_units_arr[] = taxonomy_term_load($unit['tid'])->field_key['und'][0]['value'];
    }

    $roles_arr = array();
    foreach ($form_state['values']['roles'] as $role) {
        $roles_arr[] = user_role_load($role)->name;
    }
    if (arg(3) == "agent") {
        if (in_array("music", $business_units_arr)) {
            if (!in_array("music_engagement_type_agent", $roles_arr) && !in_array("music_roster_type_agent", $roles_arr) && !in_array("music_admin", $roles_arr) && !in_array("music_find_an_agent", $roles_arr) && !in_array("agent", $roles_arr) && !in_array("super_admin", $roles_arr)) {
                drupal_set_message("Please select role of type 'Music'", "error");
                form_set_error("");
            }
        }
    }

    if (arg(3) == "external_user_registration") {
        $password = $form_state['values']['pass'];
        if (!empty($password)) {
            if (!preg_match("#[\~\`\!\@\#\$\%\^\,\'\"\&\*\(\)\_\-\+\=\{\}\[\\]\|\:\;\<\>\.\?\/\\\\]+#", $password)) {
                drupal_set_message("Password must contain atleast 1 special character.", "error");
                form_set_error("");
            }
        }

        $company_name = $form_state['values']['field_company_name']['und'][0]['value'];
        if (empty($company_name)) {
            drupal_set_message("Company field is required.", "error");
            form_set_error("");
        }
    }
}

function user_register_form_custom_submit($form, $form_state)
{
    global $base_url;
    $password = $form_state['values']['pass'];
    $email_address = trim($form_state['values']['mail']);
    foreach ($form_state['values']['roles'] as $role) {
        $roles_arr[] = user_role_load($role)->name;
    }

    if (in_array("external_user_registration", $roles_arr)) {
        //Code for sending email for account creation
        $url  = url("Music/all/talent");
        $body = "<p>A site administrator at WME has created an account for you. You may now log in by clicking this link or copying and pasting it to your browser: <a href='" . $base_url . $url . "' target='_blank'>link</a></p>
            <p>email: $email_address</p>
            <p>password: $password</p>";
        $params = array(
            'subject' => t('An administrator created an account for you at WME'),
            'body' => $body,
        );
        drupal_mail("music_custom", "music_user_register", $email_address, language_default(), $params);
        drupal_get_messages('status');
        drupal_set_message("Created a new user account for " . $email_address);
    }
}

function music_load_music_category()
{
    $view = views_get_view('manage_music_category');
    $view->set_display('page');
    $view->pre_execute();
    $view->execute('page');
    $results = $view->result;
    $output = "";
    $count = count($results);
    foreach ($results as $row) {
        $id = $row->tid;
        $value = $row->taxonomy_term_data_name;
        $output .= "<li id='cat-$id' class='each-select-item'>$value</li>";
    }
    print json_encode(array('output' => $output, 'count' => $count));
    exit;
}

function change_music_profile_pic($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('EDIT PROFILE PHOTO'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('change_music_profile_pic_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            if ($form_state['values']['op'] == "Save") {
                drupal_get_messages();
                drupal_set_message("Profile photo has been updated successfully.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            $output[] = ctools_ajax_command_redirect('Music/' . variable_get('mpid_' . arg(5)));
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('change_music_profile_pic_form');
    }
}

function music_region_validate_name()
{
    $name = arg(3);
    $nid = arg(4);
    $cat_id = $_SESSION['field_music_category_tid'];
    if ($nid != "new") {
        $query = "SELECT n.title FROM node n INNER JOIN field_data_field_music_category mc ON mc.entity_id = n.nid WHERE n.type = 'music_regions' AND LOWER(n.title) = LOWER('$name') AND n.nid != '$nid' AND mc.field_music_category_tid = '$cat_id'";
    } else {
        $query = "SELECT n.title FROM node n INNER JOIN  field_data_field_music_category mc ON mc.entity_id = n.nid  WHERE n.type = 'music_regions' AND LOWER(n.title) = LOWER('$name') AND mc.field_music_category_tid = '$cat_id'";
    }
    $used_region_title = db_query($query)->fetchAll();
    if (count($used_region_title) > 0) {
        print json_encode(array('error' => "yes"));
    } else {
        print json_encode(array('error' => "no"));
    }
    exit;
}

function music_region_category_used_states()
{
    $cat_id = $_SESSION['field_music_category_tid'];
    $query  = "SELECT zz.field_music_zoom_zones_tid, zz.entity_id FROM field_data_field_music_zoom_zones zz INNER JOIN field_data_field_music_category mc ON mc.entity_id = zz.entity_id WHERE zz.bundle= 'music_regions' AND mc.field_music_category_tid = $cat_id";
    $used_regions = db_query($query)->fetchAll();
    $used_regions_states = array();
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    $exclude_regions = array();
    foreach ($used_regions as $zz) {
        $exclude_regions[] = $zz->field_music_zoom_zones_tid;
        $zone = taxonomy_term_load($zz->field_music_zoom_zones_tid);
        $region = node_load($zz->entity_id);
        $region_name = $region->title;
        $key = $zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $used_regions_states[$zone->tid]['key'] = $key;
            $used_regions_states[$zone->tid]['region_name'] = $region_name;
            $used_regions_states[$zone->tid]['state_name']  = $zone->name;
        }
    }

    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    $overall_zoom_zones = array();
    foreach ($zoom_zones as $zoom_zone) {
        $state_details = array();
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $overall_zoom_zones[] = $zoom_zone->tid;
        }
    }

    $activate_zoom_zones = array_diff($overall_zoom_zones, $exclude_regions);
    $active_states = array();
    foreach ($activate_zoom_zones as $zz) {
        $zone = taxonomy_term_load($zz);
        $active_states[$zz] = $zone->field_key['und'][0]['value'];
    }

    print json_encode(array('outcome' => $used_regions_states, 'available_states' => $active_states));
    exit;
}

function music_region_used_states()
{
    $nid    = arg(3);
    $node   = node_load($nid);
    $cat_id = $_SESSION['field_music_category_tid'];
    $query  = "SELECT zz.field_music_zoom_zones_tid, zz.entity_id FROM field_data_field_music_zoom_zones zz INNER JOIN field_data_field_music_category mc ON mc.entity_id = zz.entity_id WHERE zz.bundle= 'music_regions' AND zz.entity_id != $nid AND mc.field_music_category_tid = $cat_id";
    $used_regions = db_query($query)->fetchAll();
    $used_regions_states = array();
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    foreach ($used_regions as $zz) {
        $zone = taxonomy_term_load($zz->field_music_zoom_zones_tid);
        $region = node_load($zz->entity_id);
        $region_name = $region->title;
        $key = $zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $used_regions_states[$zone->tid]['key'] = $key;
            $used_regions_states[$zone->tid]['region_name'] = $region_name;
            $used_regions_states[$zone->tid]['state_name']  = $zone->name;
        }
    }
    print json_encode(array('outcome' => $used_regions_states));
    exit;
}

function music_region_current_states()
{
    $nid    = arg(3);
    $node   = node_load($nid);
    $current_regions_states = array();
    foreach ($node->field_music_zoom_zones['und'] as $value) {
        $current_regions_states[] = $value['tid'];
    }
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    foreach ($current_regions_states as $zz) {
        $zone = taxonomy_term_load($zz);
        $key = $zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $active_states[$zone->tid]['tid'] = $zz;
            $active_states[$zone->tid]['key'] = $key;
            $active_states[$zone->tid]['state_name'] = $zone->name;
        }
    }
    print json_encode(array('outcome' => $active_states));
    exit;
}

function music_region_available_states()
{
    $nid    = arg(3);
    $node   = node_load($nid);
    $current_regions = array();
    foreach ($node->field_music_zoom_zones['und'] as $value) {
        $current_regions[] = $value['tid'];
    }
    $cat_id = $_SESSION['field_music_category_tid'];
    $query  = "SELECT zz.field_music_zoom_zones_tid FROM field_data_field_music_zoom_zones zz INNER JOIN field_data_field_music_category mc ON mc.entity_id = zz.entity_id WHERE zz.bundle= 'music_regions' AND zz.entity_id != $nid AND mc.field_music_category_tid = $cat_id";
    $used_regions = db_query($query)->fetchCol();
    $exclude_regions = array_merge($current_regions, $used_regions);

    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    $overall_zoom_zones = array();
    foreach ($zoom_zones as $zoom_zone) {
        $state_details = array();
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $overall_zoom_zones[] = $zoom_zone->tid;
        }
    }

    $activate_zoom_zones = array_diff($overall_zoom_zones, $exclude_regions);
    $active_states = array();
    foreach ($activate_zoom_zones as $zz) {
        $zone = taxonomy_term_load($zz);
        $active_states[] = $zone->field_key['und'][0]['value'];
    }
    print json_encode(array('outcome' => $active_states));
    exit;
}

function music_screen_resolutions()
{
    if (isset($_POST['width']) && isset($_POST['height'])) {
        $_SESSION['screen_width'] = $_POST['width'];
        $_SESSION['screen_height'] = $_POST['height'];
        print json_encode(array('outcome' => 'success'));
    } else {
        print json_encode(array('outcome' => 'error', 'error' => "Couldn't save dimension info"));
    }
}

/**
 * Drupal form to be put in a modal.
 */
function change_music_profile_pic_form($form, $form_state)
{
    $form = array();
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-profile-pic.js");
    $form['#attributes'] = array('enctype' => 'multipart/form-data');
    $active = array(/*1 => t('From TiVo'),*/2 => t('Manual Upload'));
    $nid                = arg(4);
    $music_profile      = node_load($nid);
    $form['profile_pic_from'] = array(
        '#type'          => 'radios',
        '#default_value' => 2,
        '#options'       => $active,
    );

    $form['remove_pic'] = array(
        '#type'           => 'hidden',
        '#default_value'  => '0',
        '#attributes'     => array('class' => array('remove-pic')),
    );

    $form['profile_pic'] = array(
        '#type'     => 'managed_file',
        '#upload_validators' => array(
            'file_validate_extensions' => array('gif png jpg jpeg'),
        ),
        '#attributes' => array('class' => array('profile-pic')),
    );

    $form['cancel'] = array(
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#attributes' => array("class" => array("success-btn btn-success modal-btn sbmt-btn")),
    );
    return $form;
}

/**
 * Drupal form submit handler.
 */
function change_music_profile_pic_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Save") {
        // $profile_pic_from = $form_state['values']['profile_pic_from'];
        $profile_pic      = $form_state['values']['profile_pic'];
        $talent           = user_load(arg(3));
        if ($form_state['values']['remove_pic'] == 1) {
            $edit = array(
                'picture' => array(),
            );
            user_save($talent, $edit);
        }
        // if ($profile_pic_from == 2) {
        if ($form_state['values']['profile_pic'] != 0) {
            $edit = array(
                'picture' => file_load($profile_pic),
            );
            user_save($talent, $edit);
        } else if ($form_state['values']['remove_pic'] == 1) {
            $edit = array(
                'picture' => array(),
            );
            user_save($talent, $edit);
        }
        $nid = arg(4);
        $music_profile = node_load($nid);
        $music_profile->field_profile_pic_from['und'][0]['value'] = 2;
        node_save($music_profile);
        // } else {
        //    $nid = arg(4);
        //    $music_profile = node_load($nid);
        //    $music_profile->field_profile_pic_from['und'][0]['value'] = 1;
        //    node_save($music_profile);
        // }
    }
}

function auto_fill_agents_to_region()
{
    $output = "";
    if (count($_SESSION['agent_lists']) > 0) {
        foreach ($_SESSION['agent_lists'] as $agent_id) {
            $agent = node_load($agent_id);
            $agent_name = $agent->title;
            $agent_email = $agent->field_email_id['und']['0']['value'];
            $agent_phone = $agent->field_phone_no['und']['0']['value'];
            $agent_phone = ($agent_phone == '+1') ? '' : $agent_phone;
            $output .= "<div class='agent-info'>";
            $output .= "<div class='agent-name'>$agent_name</div>";
            $output .= "<div class='agent-phone'>$agent_email</div>";
            $output .= "<div class='agent-email'>$agent_phone</div>";
            $output .= "</div>";
        }
    }
    echo json_encode(array(
        'result' => $output
    ));
    exit();
}

function music_get_group_email()
{

    $output = "";
    if (count($_SESSION['group_email_lists']) > 0) {
        $group_email = $_SESSION['group_email_lists'][0];
        $output .= "<div class='group-info'>";
        $output .= "<div class='group-email'>$group_email</div>";
        $output .= "</div>";
    }

    echo json_encode(array(
        'result' => $output
    ));
    exit();
}

function music_add_region($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add New Region'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_region_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_region_form');
    }
}

function music_add_region_form($form, $form_state)
{
    $form = array();
    $form['region_name'] = array(
        '#prefix'     => "<div class='single-form-field'>",
        '#type'       => 'textfield',
        '#attributes' => array('placeholder' => 'Region Name', 'autocomplete' => "off"),
        '#suffix'     => '</div>',
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Create Region',
        '#attributes' => array('class' => array('disabled-btn btn-success modal-btn sbmt-btn'), 'disabled' => 'disabled'),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function music_add_region_form_submit(&$form, &$form_state)
{
    if ($form_state['values']['op'] == "Create Region") {
        $region_name = $form_state['values']['region_name'];
        $node = new stdClass();
        $node->type = 'music_regions';
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
        $node->status = 1;
        $node->uid    = 1;
        $node->comment = 0;
        $node->title = $region_name;
        $node->field_music_category['und'][0]['tid'] = $_SESSION['field_music_category_tid'];
        if ($node = node_submit($node)) { // Prepare node for saving
            node_save($node);
        }
        drupal_add_js(array('region_id' => $node->nid), 'setting');
    }
}

function music_manage_category($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        ctools_add_js('music-manage-category', 'music_custom');
        ctools_add_js('ajax-responder');

        // Set the title and output of the Manage Categories modal.
        $title = t('Manage Categories');
        $views_output = views_embed_view('manage_music_category', 'page');
        return ctools_modal_render($title, $views_output);
    } else {
        return drupal_goto('/Music/manage-category');
    }
}

function music_add_category($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add New Category'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_category_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_category_form');
    }
}

/**
 * Drupal form to be put in a modal for Add Category.
 */
function music_add_category_form($form, $form_state)
{
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/form-submit.js");
    $form = array();
    $form['#attributes'] = array('class' => array('category-form'));
    $form['validation_message'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="validation_message_wrapper">',
        '#suffix' => '</div>',
    );
    $form['main-cat'] = array(
        '#markup' => l(t("Category Maintenance"), "Music/manage-category/nojs", array("attributes" => array("class" => "add-cat-btn ctools-use-modal main-cat-link"))),
    );
    $form['category_name'] = array(
        '#prefix'     => "<div class='single-form-field'>",
        '#type'       => 'textfield',
        '#required' => TRUE,
        '#attributes' => array('onkeypress' => array('GetKeyCode2(event)'), 'placeholder' => 'Category Name', 'autocomplete' => "off", 'class' => array('category-name')),
        '#suffix'     => '</div>',
    );
    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn close-main-cat')),
    );
    $form['add_category_ajax_submit'] = array(
        '#type' => 'button',
        '#value' => 'Create',
        '#name' => 'add_category_ajax_submit',
        // You may need this to disable validation.
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => '_music_add_category_callback',
            'event' => 'click',
        ),
        '#attributes' => array(
            // Class "element-hidden" will hide the button.
            'class' => array('element-hidden btn-success modal-btn sbmt-btn', 'add_category_ajax_submit'),
            'disabled' => 'disabled'
        ),
        '#suffix' => '</div></div>',
    );
    return $form;
}


/**
 * Callback for  music_add_category_form().
 */
function _music_add_category_callback(&$form, &$form_state)
{
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('music-manage-category', 'music_custom');
    ctools_add_js('ajax-responder');

    $tid      = $form_state['values']['term_id'];
    $cat_name = $form_state['values']['category_name'];
    $music_zoom_zones = taxonomy_vocabulary_machine_name_load('music_category');
    $vid = $music_zoom_zones->vid;
    $tree = taxonomy_get_tree($vid);
    $existing_terms = array();
    $output = array();
    foreach ($tree as $term) {
        $existing_terms[] = strtolower($term->name);
    }
    if (in_array(strtolower($cat_name), $existing_terms)) {
        $output[] = ajax_command_html('.validation_message_wrapper', '<div class="alert alert-block alert-danger messages error">Category already exists.</div>');
    } else {
        $term                               = new stdClass();
        $term->name                         = $cat_name;
        $term->vid                          = $music_zoom_zones->vid;
        $term->field_key['und'][0]['value'] = strtolower(str_replace(" ", "_", $cat_name));
        taxonomy_term_save($term);
        $form_state['values']['category_id'] = $term->tid;
        $cat_id   = $form_state['values']['category_id'];
        $title = t('Manage Categories');
        $views_output = views_embed_view('manage_music_category', 'page');
        $output[] = ctools_modal_command_display($title, $views_output);
    }

    return array(
        '#type' => 'ajax',
        '#commands' => $output,
    );
}

function music_update_category($ajax)
{
    if ($ajax) {
        if (arg(3) && is_numeric(arg(3))) {
            $tid = arg(3);
            $term = taxonomy_term_load($tid);
            $tname = $term->name;
        } else {
            $tid = NULL;
            $tname = t('Please add your term here.');
        }
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Edit Category'),
            'tid' => $tid,
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_update_category_form', $form_state);
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_update_category_form');
    }
}

/**
 * Drupal form to be put in a modal for Rename Category.
 */
function music_update_category_form($form, $form_state)
{
    if (arg(3) && is_numeric(arg(3))) {
        $tid = arg(3);
        $term = taxonomy_term_load($tid);
        $tname = $term->name;
    } else {
        $tid = NULL;
        $tname = t('Please add your term here.');
    }

    $form = array();
    $form['#attributes'] = array('class' => array('category-form'));
    $form['term_id'] = array(
        '#type'  => 'hidden',
        '#value' => $tid,
    );
    $form['validation_message'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="validation_message_wrapper">',
        '#suffix' => '</div>',
    );
    $form['main-cat'] = array(
        '#markup' => l(t("Category Maintenance"), "Music/manage-category/nojs", array("attributes" => array("class" => "add-cat-btn ctools-use-modal main-cat-link"))),
    );

    if (isset($_SESSION['field_music_category_tid'])) {
        $tid  = $_SESSION['field_music_category_tid'];
        $term = taxonomy_term_load($tid);
        if (is_object($term)) {
            $music_category_slt = $term->name;
        }
    }

    if ($music_category_slt == $tname) {
        $is_selected = "yes";
    } else {
        $is_selected = "no";
    }

    $form['category_is_selected'] = array(
        '#type'  => 'hidden',
        '#value' => $is_selected,
        '#attributes' => array('class' => array('is_selected'))
    );

    $form['category_name'] = array(
        '#prefix'     => "<div class='single-form-field'>",
        '#type'       => 'textfield',
        '#default_value' => $tname,
        '#required'      => TRUE,
        '#attributes' => array('onkeypress' => 'GetKeyCodeOnUpdateOfCategory(event)', 'placeholder' => 'Category Name', 'autocomplete' => "off", 'class' => array('category-name')),
        '#suffix'     => '</div>',
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn close-main-cat')),
    );

    $form['update_category_ajax_submit'] = array(
        '#type' => 'button',
        '#value' => 'Update',
        '#name' => 'update_category_ajax_submit',
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => '_music_update_category_callback',
            'event' => 'click',
        ),
        '#attributes' => array(
            'onclick' => 'rename_category()',
            'class' => array('btn-success success-btn modal-btn sbmt-btn', 'update_category_ajax_submit'),
        ),
        '#suffix' => '</div></div>',
    );

    return $form;
}

/**
 *  Callback for music_update_category_form().
 */
function _music_update_category_callback(&$form, &$form_state)
{
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('music-manage-category', 'music_custom');
    ctools_add_js('ajax-responder');
    $tid      = $form_state['tid'];
    $cat_name = $form_state['values']['category_name'];
    $music_zoom_zones = taxonomy_vocabulary_machine_name_load('music_category');
    $vid = $music_zoom_zones->vid;
    $tree = taxonomy_get_tree($vid);
    $existing_terms = array();
    $output = array();
    foreach ($tree as $term) {
        $existing_terms[$term->tid] = strtolower($term->name);
    }

    $searched_tid = array_search(strtolower($cat_name), $existing_terms);

    if ($searched_tid && $searched_tid != $tid) {
        $output[] = ajax_command_html('.validation_message_wrapper', '<div class="alert alert-block alert-danger messages error">Category already exists.</div>');
    } else {
        $term                               = new stdClass();
        $term->tid                          = $tid;
        $term->name                         = $cat_name;
        $term->vid                          = $music_zoom_zones->vid;
        $term->field_key['und'][0]['value'] = strtolower(str_replace(" ", "_", $cat_name));
        taxonomy_term_save($term);
        $form_state['values']['category_id'] = $term->tid;
        $cat_id   = $form_state['values']['category_id'];
        $title = t('Manage Categories');
        $views_output = views_embed_view('manage_music_category', 'page');
        $output[] = ctools_modal_command_display($title, $views_output);
    }
    return array(
        '#type' => 'ajax',
        '#commands' => $output,
    );
}

function music_remove_category($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        ctools_modal_add_js();
        if (arg(3) && is_numeric(arg(3))) {
            $tid = arg(3);
            $term = taxonomy_term_load($tid);
            $tname = $term->name;
        } else {
            $tid = NULL;
            $tname = '';
        }
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Delete Category'),
            'tid' => $tid,
        );
        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_remove_category_form', $form_state);
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_remove_category_form');
    }
}

/**
 * Drupal form to be put in a modal for Delete Category.
 */
function music_remove_category_form($form, $form_state)
{
    if (arg(3) && is_numeric(arg(3))) {
        $tid = arg(3);
        $term = taxonomy_term_load($tid);
        $tname = $term->name;
    } else {
        $tid = NULL;
        $tname = '';
    }
    $form = array();
    $form['#attributes'] = array('class' => array('category-form'));

    $form['report'] = array(
        '#markup' => '<div class="delete-content-wrap"><div class="confirm">' . t('Are you sure you want to delete this category ' . $tname . '? This cannot be undone.') . '</div></div>'
    );

    if (isset($_SESSION['field_music_category_tid'])) {
        $tid  = $_SESSION['field_music_category_tid'];
        $term = taxonomy_term_load($tid);
        if (is_object($term)) {
            $music_category_slt = $term->name;
        }
    }

    if ($music_category_slt == $tname) {
        $is_selected = "yes";
    } else {
        $is_selected = "no";
    }

    $form['category_is_selected'] = array(
        '#type'  => 'hidden',
        '#value' => $is_selected,
        '#attributes' => array('class' => array('is_selected'))
    );

    $form['term_id'] = array(
        '#type'  => 'hidden',
        '#value' => $tid,
        '#attributes' => array('class' => array('category_id')),
    );
    $form['validation_message'] = array(
        '#type' => 'markup',
        '#markup' => '',
        '#prefix' => '<div class="validation_message_wrapper">',
        '#suffix' => '</div>',
    );

    $form['main-cat'] = array(
        '#markup' => l(t("Category Maintenance"), "Music/manage-category/nojs", array("attributes" => array("class" => "add-cat-btn ctools-use-modal main-cat-link"))),
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn close-main-cat')),
    );

    $form['remove_category_ajax_submit'] = array(
        '#type' => 'button',
        '#value' => 'Delete',
        '#name' => 'remove_category_ajax_submit',
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => '_music_remove_category_callback',
            'event' => 'click',
        ),
        '#attributes' => array(
            'onclick' => 'delete_category()',
            'class' => array('btn-success modal-btn sbmt-btn success-btn', 'remove_category_ajax_submit'),
        ),
        '#suffix' => '</div></div>',
    );
    return $form;
}

/**
 *  callback for music_remove_category_form().
 */
function _music_remove_category_callback(&$form, &$form_state)
{
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('music-manage-category', 'music_custom');
    ctools_add_js('ajax-responder');
    $output = array();
    $tid      = $form_state['tid'];
    $all_nids =   taxonomy_select_nodes($tid, FALSE);
    if (!empty($all_nids)) {
        $region_nodes = node_load_multiple($all_nids, array('type' => 'music_regions'), TRUE);
        if (!empty($region_nodes)) {
            $nids = array_keys($region_nodes);
            node_delete_multiple($nids);
        }
    }
    taxonomy_term_delete($tid);
    $form_state['rebuild'] == TRUE;

    $vocabulary = taxonomy_vocabulary_machine_name_load('music_category');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

    if (count($terms) > 0) {
        $title = t('Manage Categories');
        $views_output = views_embed_view('manage_music_category', 'page');
    } else {
        $title = t('ADD NEW CATEGORY');
        $views_output = render(drupal_get_form('music_add_category_form', $form_state));
    }

    $output[] = ctools_modal_command_display($title, $views_output);
    return array(
        '#type' => 'ajax',
        '#commands' => $output,
    );
}

function tivo_artist_edit($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('TIVO KEY LOOKUP'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('tivo_artist_edit_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            if ($form_state['values']['op'] == "Update Tivo Key") {
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                $output[] = ctools_ajax_command_reload();
            } else {
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                $output[] = ctools_ajax_command_redirect('Music/' . variable_get('mpid_' . arg(5)), 0, array('query' => array('popup' => 'agency_info')));
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('tivo_artist_edit_form');
    }
}

function tivo_artist_edit_form($form, $form_state)
{

    $form['mn_id'] = array(
        '#type' => "hidden",
        '#attributes' => array('id' => 'mn-id')
    );

    $form['title'] = array(
        '#prefix'     => '<div class="search-bar left single-form-field"><span class="icon-Magnifying-Glass-Thin"></span>',
        '#type'       => 'textfield',
        '#attributes' => array('placeholder' => 'Search here', 'autocomplete' => "off", 'class' => array('search-tivo')),
        '#value'      => $_SESSION['profile_name'],
        '#suffix'     => '<div class="tivo-name-list"></div></div>'
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='loading hide'>Loading TiVo data, this may take a moment...</div><div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Update Tivo Key',
        '#attributes' => array('class' => array('btn-success modal-btn success-btn')),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function tivo_artist_edit_form_submit($form, $form_state)
{
    require_once dirname(__FILE__) . '/music_tivo/music.tivo.getdetails.inc';
    if ($form_state['values']['op'] == "Update Tivo Key") {
        $node = node_load(arg(4));
        $mn_id = !empty($form_state['values']['mn_id']) ? $form_state['values']['mn_id'] : '';
        $current_mn_id = $node->field_tivo_artist_id['und'][0]['value'];
        //if mnid is changed, then clear the old contents
        if (!empty($mn_id)) {  //removed the condition && $current_mn_id !=$mn_id so as to import the data every time.
            //set minid
            $node->field_tivo_artist_id['und'][0]['value'] = $mn_id;
            $about_from = $node->field_about_from['und'][0]['value'];
            $data = array();
            $data['mnid'] = $mn_id;

            if ($about_from == 1) {
                $node->field_about_tivo['und'][0]['value'] = "";
                //get About data from TiVo
                $getData = music_tivo_get_details('about', $data);
                if (empty($getData['error'])) {
                    $musicBio = $getData['musicBio'];
                    //set About data
                    $node->field_about_tivo['und'][0]['value'] = $musicBio;
                }
            }
            $profile_pic_from = $node->field_profile_pic_from['und'][0]['value'];
            if ($profile_pic_from == 1) {
                $node->field_profile_pic_tivo['und'][0]['fid'] = "";
                //get image data from TiVo
                $getData = music_tivo_get_details('nameimage', $data);
                if (empty($getData['error'])) {
                    $fid = $getData['image'];
                    //set fid to node
                    $node->field_profile_pic_tivo['und'][0]['fid'] = $fid;
                }
            }
            $getData = music_tivo_get_details('web', $data);
            $node->field_twitter_id['und'][0]['value'] = "";
            $node->field_facebook_url['und'][0]['value'] = "";
            if (empty($getData['error'])) {
                $node->field_twitter_id['und'][0]['value'] = $getData['twitter'];
                $node->field_facebook_url['und'][0]['value'] = $getData['facebook'];
            }

            $getData = music_tivo_get_details('featuredreleases', $data);
            if (empty($getData['error'])) {
                $m = 0;
                $fc_id = array();
                if (!empty($node->field_featured_releases['und'][0]['value'])) {
                    foreach ($node->field_featured_releases['und'] as $fc) {
                        $fc_id = $fc['value'];
                        entity_delete_multiple('field_collection_item', array($fc_id));
                        unset($node->field_featured_releases['und'][$m]);
                        $m++;
                    }
                }

                //flags to store only relevant albums based on Admins choice(in site settings)
                $flags_exclude = variable_get('music_featured_release_type_to_exclude');
                $flags_exclude = explode(",", $flags_exclude);
                $name = 'music_featured_release_type_to_exclude';
                $myvoc = taxonomy_vocabulary_machine_name_load($name);
                $tree = taxonomy_get_tree($myvoc->vid);
                $featured_release_type_options = array();
                foreach ($tree as $term) {
                    $flags[] = strtolower($term->name);
                }
                //store albums only with this flags
                $flags_set = array_diff($flags, $flags_exclude);

                $featured_count = 0;
                foreach ($getData['discography'] as $key => $value) {
                    $album_flags = array();
                    if (count($value->flags) > 0) {
                        foreach ($value->flags as $flag) {
                            $flag = strtolower($flag);
                            if (in_array($flag, $flags_set)) {
                                $album_flags[] = $flag;
                            }
                        }
                    }

                    if (count($album_flags) > 0) {
                        $featured_count++;
                        $album_flags1 = implode(",", $album_flags);
                        $release_album_id = $value->ids->albumId;
                        $data['albumid'] = $release_album_id;
                        $albumImageData = music_tivo_get_details('albumimage', $data);
                        if (empty($albumImageData['error'])) {
                            $fid = $albumImageData['image'];
                        }
                        $releaseData = music_tivo_get_details('albumrelease', $data);
                        if (empty($releaseData['error'])) {
                            $release_year = $releaseData['release']->releaseDate;
                            $release_type = $releaseData['release']->format;
                        }

                        $release_title = $value->title;
                        $release_label = $value->label;

                        $release_hasReview = $value->hasReview == 1 ? 1 : 0;
                        $release_isPick = $value->isPick == 1 ? 1 : 0;

                        $my_collection = entity_create('field_collection_item', array('field_name' => 'field_featured_releases'));
                        $my_collection->setHostEntity('node', $node);
                        $my_collection->field_album_id['und'][0]['value'] = $release_album_id;
                        $my_collection->field_album_title['und'][0]['value'] = $release_title;
                        $my_collection->field_album_flags['und'][0]['value'] = $album_flags1;
                        $my_collection->field_label['und'][0]['value'] = $release_label;
                        $my_collection->field_album_year['und'][0]['value'] = $release_year;
                        $my_collection->field_has_review['und'][0]['value'] = $release_hasReview;
                        $my_collection->field_is_pick['und'][0]['value'] = $release_isPick;
                        $my_collection->field_album_type['und'][0]['value'] = $release_type;
                        $my_collection->field_album_image['und'][0]['fid'] = $fid;
                        $my_collection->save();
                        if ($featured_count >= 10) {
                            break;
                        }
                    }
                }
            }
            node_save($node);
            drupal_set_message("Data loaded from TiVo successfully.");
        }
    }
}

function add_agents_to_region($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add Agents To Region'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_agents_to_region_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            //$output[] = ctools_ajax_command_redirect('Music/edit-agent-regions');
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_agents_to_region_form');
    }
}

function music_add_agents_to_region_form($form, $form_state)
{
    $form['region_id'] = array(
        '#type' => "hidden",
        '#value' => arg(3),
        '#attributes' => array('id' => 'region-id')
    );

    $form['agent_id'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('agent-id'))
    );

    $form['title'] = array(
        '#prefix'     => '<div class="search-bar left single-form-field"><span class="icon-Magnifying-Glass-Thin"></span><span class="icon-lightbox_x hide"></span>',
        '#type'       => 'textfield',
        '#attributes' => array('onkeypress' => array('GetKeyCode3(event)'), 'placeholder' => 'Search for Agents', 'autocomplete' => "off", 'class' => array('search-agent')),
        '#suffix'     => '<div class="custom-error red-label agent-name hide">Agent name is required.</div><div class="music-agents-name-list"></div></div>'
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Add Agent',
        '#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn'), 'disabled' => 'disabled'),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function music_add_agents_to_region_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Add Agent") {
        $region_id = $form_state['values']['region_id'];
        $region = node_load($region_id);
        $agent_id  = $form_state['values']['agent_id'];
        if (isset($_SESSION['agent_lists']) && (count($_SESSION['agent_lists']) > 0)) {
            $_SESSION['agent_lists'][] = $agent_id;
        } else {
            $_SESSION['agent_lists'] = array();
            foreach ($region->field_music_agents['und'] as $nid) {
                $_SESSION['agent_lists'][] = $nid['nid'];
            }
            $_SESSION['agent_lists'][] = $agent_id;
        }
    }
}

function add_group_email_to_region($ajax) {
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add Group Email to Region'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_group_email_form', $form_state);
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss();
        }
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_group_email_form');
    }
}

function music_add_group_email_form($form, &$form_state) {

    $region_nid = arg(3);
    $node = node_load($region_nid);

    // Initialize session variable if not set
    if (!isset($_SESSION['group_email_lists'])) {
        $_SESSION['group_email_lists'] = array();
    }

    // Add existing email from node to session if available
    if (empty($_SESSION['group_email_lists']) && !empty($node->field_group_email['und'][0]['value'])) {
        $_SESSION['group_email_lists'][] = $node->field_group_email['und'][0]['value'];
    }

    // Create the form for adding/removing group email
    $form['group_email'] = array(
        '#title'         => t('Group Email Address'),
        '#description'   => t('Enter a valid email address.'),
        '#type'          => 'textfield',
        '#default_value' => !empty($_SESSION['group_email_lists'][0]) ? $_SESSION['group_email_lists'][0] : '',
        '#element_validate' => array('music_validate_group_email'),  // Attach custom validation
        '#attributes'    => array(
            'placeholder' => t('Enter email address here...'), // Placeholder text
        ),
    );

    // Add a remove email button if there is an email saved
    if (!empty($_SESSION['group_email_lists'][0])) {
        $form['remove_email'] = array(
            '#type'   => 'submit',
            '#value'  => t('Remove Email'),
            //'#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn')),
            '#attributes' => array('class' => array('btn', 'btn-link', 'modal-btn', 'success-btn')),
        );
    }

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => t('Cancel'),
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => t('Save Group Email'),
        '#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn')),
        '#suffix' => '</div></div>',
    );

    return $form;
}

/**
 * Custom validation handler for the group_email field.
 */
function music_validate_group_email($element, &$form_state) {

    if (($form_state['values']['op'] === 'Cancel') || ($form_state['values']['op'] === 'Remove Email')) {
        // Skip validation if "Cancel" button is clicked
        return;
    }
    $email = $element['#value'];

    // Check if the email is not empty and is a valid email format.
    if (empty($email)) {
        form_set_error($element['#name'], t('The email address field cannot be empty.'));
    } elseif (!valid_email_address($email)) {
        form_set_error($element['#name'], t('The email address %email is not valid.', array('%email' => $email)));
    }
}

function music_add_group_email_form_submit($form, &$form_state) {
    if ($form_state['values']['op'] == "Save Group Email") {
        $region_id = $form_state['values']['region_id'];
        $group_emails = $form_state['values']['group_email'];

        // Split the group emails by new lines and filter out empty lines.
        $group_email_list = array_filter(array_map('trim', explode("\n", $group_emails)));


        unset($_SESSION['group_email_lists']);
        // Check if the session variable for storing group emails exists.
        if (isset($_SESSION['group_email_lists']) && count($_SESSION['group_email_lists']) > 0) {
            // If it exists, add the new emails to the existing list.
            $_SESSION['group_email_lists'] = array_merge($_SESSION['group_email_lists'], $group_email_list);
        } else {
            // If not, initialize the session variable and store the emails.
            $_SESSION['group_email_lists'] = $group_email_list;
        }

    }

    if ($form_state['values']['op'] == "Remove Email") {
        // Remove email from session when user clicks "Remove Email"
        unset($_SESSION['group_email_lists']);
        drupal_set_message(t('Group email removed successfully.'));
    }

}

function edit_agents_for_region($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Edit Agents for Region'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_edit_agents_for_region_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            //$output[] = ctools_ajax_command_redirect('Music/edit-agent-regions');
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_edit_agents_for_region_form');
    }
}

function music_edit_agents_for_region_form($form, $form_state)
{
    global $base_url;
    $region_nid = arg(3);
    $region     = node_load($region_nid);
    $list       = "<div class='edit-agent-list'>";
    if(!empty($_SESSION['agent_lists'])) {
        foreach ($_SESSION['agent_lists'] as $agent_nid) {
            if(!empty($agent_nid)) {
                $url = url("Music/remove-agent/nojs/$region_nid/$agent_nid");
                $list     .= "<div class='each-agent agent-sort' data-itemid='" . $agent_nid . "'>";
                $agent     = node_load($agent_nid);
                $name      = $agent->title;
                $phone_no  = $agent->field_phone_no['und'][0]['value'];
                $phone_no = ($phone_no == '+1') ? '' : $phone_no;
                $email     = $agent->field_email_id['und'][0]['value'];
                $list     .= "<div class='icon-resize agent-drag-icon'></div>";
                $list     .= "<div class='agent-info'>";
                $list     .= "<div class='agent-name'>$name</div>";
                $list     .= "<div class='agent-phone'>$phone_no</div>";
                $list     .= "<div class='agent-email'>$email</div>";
                $list     .= "</div>";
                $list     .= "<a href='" . $url . "' class='remove-agent ctools-use-modal'>";
                $list     .= "<span class='icon-small_x'></span>";
                $list     .= "<span class='remove-text'>Remove</span>";
                $list     .= "</a>";
                $list     .= "</div>";
            }

        }
    }


    $add_more_link = l("", "Music/add-agents-to-region/nojs/$region_nid", array("attributes" => array("class" => array("add-more-plus icon-small_plus ctools-use-modal"))));
    $list     .= "</div>";
    $list     .= $add_more_link;
    $form['markup'] = array(
        "#markup" => "<div id='agent-list-wrapper'>$list</div>"
    );

    $form['order'] = array(
        '#type' => "hidden",
        '#attributes' => array('id' => 'agent-order'),
        '#default_value' => implode(",", $_SESSION['agent_lists'])
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Save',
        '#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn')),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function music_edit_agents_for_region_form_submit($form, $form_state)
{
    $region_nid = arg(3);
    $region     = node_load($region_nid);
    if ($form_state['values']['op'] == "Save") {
        $_SESSION['agent_lists'] = array();
        if (!empty($form_state['values']['order'])) {
            $order = $form_state['values']['order'];
            $order = explode(",", $order);
            foreach ($order as $nid) {
                $_SESSION['agent_lists'][] = $nid;
            }
        }
    }
}

function music_remove_agent($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Remove Agent'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_delete_agent_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            //$output[] = ctools_ajax_command_redirect('Music/edit-agent-regions');
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_delete_agent_form');
    }
}

function music_delete_agent_form($form, $form_state)
{
    $nid      = arg(3);
    $agent_id = arg(4);
    $node     = node_load($nid);
    $agent    = node_load($agent_id);
    drupal_add_js(array('arg1' => arg(1)), 'setting');
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-edit-agent-regions.js");
    $form['report'] = array(
        '#markup' => '<div class="delete-content-wrap"><h3>' . t('Are you sure you want to delete the Agent ' . $agent->title . ' from Region ' . $node->title . '?') . '</div></h3>'
    );

    $form['node_id'] = array(
        '#type'  => 'hidden',
        '#value' => $nid,
    );

    $form['agent_id'] = array(
        '#type'  => 'hidden',
        '#value' => $agent_id,
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Delete',
        '#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn')),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function music_delete_agent_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Delete") {
        $nid      = $form_state['values']['node_id'];
        $agent_id = $form_state['values']['agent_id'];
        $node     = node_load($nid);
        foreach ($_SESSION['agent_lists'] as $key => $value) {
            if ($value == $agent_id) {
                unset($_SESSION['agent_lists'][$key]);
            }
        }
        drupal_add_js(array('region_id' => $node->nid), 'setting');
    }
}

function music_uncheck_locations($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Uncheck Locations'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_uncheck_locations_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_uncheck_locations_form');
    }
}

function music_uncheck_locations_form($form, $form_state)
{
    drupal_add_js(array('arg1' => arg(1)), 'setting');
    drupal_add_js(array('arg3' => arg(3)), 'setting');
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-edit-agent-regions.js");
    $tid  = arg(3);
    if ($tid == "all") {
        $form['report'] = array(
            '#markup' => '<div class="delete-content-wrap"><h3>' . t('Are you sure you want to remove all ?') . '</div></h3>'
        );
    } else {
        $term = taxonomy_term_load($tid);
        $form['report'] = array(
            '#markup' => '<div class="delete-content-wrap"><h3>' . t('Are you sure you want to remove all locations from ' . $term->name . '?') . '</div></h3>'
        );
    }


    $form['node_id'] = array(
        '#type' => 'hidden',
        '#value' => $nid,
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Remove',
        '#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn')),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function music_delete_region($ajax)
{
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Delete region'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_delete_region_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            if ($form_state['values']['op'] == "Delete") {
                $cat_id = $_SESSION['field_music_category_tid'];
                drupal_set_message("Region has been deleted successfully.");
                $output[] = ctools_ajax_command_redirect('Music/edit-agent-regions', 0, array('query' => array('field_music_category_tid' => $cat_id, "map_capture" => '123')));
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_delete_region_form');
    }
}

function music_delete_region_form($form, $form_state)
{
    $nid  = arg(3);
    $node = node_load($nid);
    drupal_add_js(array('arg1' => arg(1)), 'setting');
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-edit-agent-regions.js");
    $form['report'] = array(
        '#markup' => '<div class="delete-content-wrap"><h3>' . t('Are you sure you want to delete the region ' . $node->title . '?') . '</div></h3>'
    );

    $form['node_id'] = array(
        '#type' => 'hidden',
        '#value' => $nid,
    );

    $form['cancel'] = array(
        '#prefix' => "<div class='modal-footer'><div class='form-group form-actions' id='edit-actions'>",
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#attributes' => array('class' => array('btn-success modal-btn btn')),
    );

    $form['submit'] = array(
        '#type'   => 'submit',
        '#value'  => 'Delete',
        '#attributes' => array('class' => array('btn-cancel success-btn btn-success modal-btn')),
        '#suffix' => '</div></div>',
    );
    return $form;
}

function music_delete_region_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Delete") {
        $nid = $form_state['values']['node_id'];
        node_delete($nid);
    }
}

function music_agent_load_map()
{
    //Query for fetching states color starts here
    $output = "";
    $cat_id = arg(2);
    $_SESSION['field_music_category_tid'] = $cat_id;
    $query           = "SELECT n.nid, fmzz.field_music_zoom_zones_tid, frc.field_region_color_rgb FROM node n INNER JOIN field_data_field_music_category fmc ON n.nid=fmc.entity_id INNER JOIN field_data_field_music_zoom_zones fmzz ON n.nid=fmzz.entity_id INNER JOIN field_data_field_region_color frc ON n.nid=frc.entity_id WHERE n.type='music_regions' AND fmc.field_music_category_tid = '$cat_id'";
    $results         = db_query($query)->fetchAll();
    $colors_arr      = array();
    $region_name     = array();
    $agents          = array();
    $region_id       = array();
    $hover_color_arr = array("#0C5587" => "#1467A0", "#1C739D" => "#2788B7", "#0FBCBC" => "#19D4D4", "#90D591" => "#A1E7A2", "#FFC45C" => "#FED07E", "#F28258" => "#F69773", "#E25656" => "#FB6767", "#EA5E82" => "#FF789B", "#C13377" => "#E13B8B", "#73519B" => "#865FB5", "#829AD8" => "#A3BAF7", "#1A6EBA" => "#1F7CD0", "#198b19" => "#198b19", "#666600" => "#666600", "#FFC0EB" => "#FFC0EB", "#FFFF9A" => "#FFFF9A", "#AED4F5" => "#AED4F5", "#660000" => "#660000", "#9AA899" => "#9AA899", "#1E152A" => "#1E152A", "#D9ACF7" => "#D9ACF7", "#FF007E" => "#FF007E", "#3D8AD0" => "#3D8AD0", "#9D9D5F" => "#9D9D5F", "#667B7C" => "#667B7C");
    foreach ($results as $color) {
        $colors_arr[$color->field_music_zoom_zones_tid] = $color->field_region_color_rgb;
        $nid  = $color->nid;
        $node = node_load($nid);
        $agent_details = "";
        $group_email = "";
        // $group_email_details = "";
        foreach ($node->field_music_agents['und'] as $agent_id) {
            $agent = node_load($agent_id['nid']);
            $phone = $agent->field_phone_no['und'][0]['value'];
            $phone = ($phone == '+1') ? '' : $phone;
            $email = $agent->field_email_id['und'][0]['value'];
            $agent_details .= "<div class='each-agent'>";
            $agent_details .= "<div class='each-name'>$agent->title</div>";
            $agent_details .= "<div class='agent-phone'>$phone</div>";
            $agent_details .= "<div class='agent-email'>$email</div>";
            $agent_details .= "</div>";
        }

        if (!empty($node->field_group_email['und'][0]['value'])) {

            $group_email = $node->field_group_email['und'][0]['value'];

            if(!empty($group_email))
            {
                $group_email_details[$nid] = $group_email;
            }
        }
        $agents[$color->field_music_zoom_zones_tid] = $agent_details;
        $region_name[$color->field_music_zoom_zones_tid] = $node->title;
        $region_id[$color->field_music_zoom_zones_tid] = $node->nid;
    }
    //Query for fetching states color ends here
    $simplemaps_worldmap_mapdata = array();
    $main_settings = array();
    //General settings
    $main_settings['width'] = 'responsive';
    $main_settings['background_color'] = '#FFFFFF';
    $main_settings['background_transparent'] = 'yes';
    $main_settings['border_color'] = '#D4DDDD';
    $main_settings['popups'] = 'on_hover';
    //State defaults
    $main_settings['state_description'] = 'State description';
    $main_settings['state_color'] = '#F8FAFA';
    $main_settings['state_hover_color'] = '#F8FAFA';
    $main_settings['border_size'] = .5;
    $main_settings['all_states_inactive'] = 'yes';
    $main_settings['all_states_zoomable'] = 'no';
    //Labels
    $main_settings['label_color'] = '#666666';
    $main_settings['label_hover_color'] = '#666666';
    $main_settings['label_size'] = 12;
    $main_settings['label_font'] = 'Arial';
    $main_settings['hide_labels'] = 'no';
    //Zoom settings
    $main_settings['initial_zoom'] = -1;
    $main_settings['initial_zoom_solo'] = 'yes';
    $main_settings['zoom'] = 'no';
    $main_settings['manual_zoom'] = 'yes';
    $main_settings['back_image'] = 'no';
    $main_settings['initial_back'] = 'no';
    $main_settings['region_opacity'] = 1;
    $main_settings['region_hover_opacity'] = 1;
    $main_settings['zoom_out_incrementally'] = 'yes';
    $main_settings['zoom_percentage'] = .99;
    $main_settings['zoom_time'] = .5;
    //Popup settings
    $main_settings['popup_color'] = 'white';
    $main_settings['popup_opacity'] = 1;
    $main_settings['popup_shadow'] = 0;
    $main_settings['popup_corners'] = 5;
    $main_settings['popup_font'] = '12px/1.5 Verdana, Arial, Helvetica, sans-serif';
    $main_settings['popup_nocss'] = 'no';
    //Advanced settings
    $main_settings['div'] = 'full-width-map';
    $main_settings['auto_load'] = 'yes';
    $main_settings['url_new_tab'] = 'no';
    $main_settings['images_directory'] = 'default';
    $main_settings['fade_time'] = .1;
    $main_settings['link_text'] = '';
    //State specific settings
    $state_specific = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    foreach ($zoom_zones as $zoom_zone) {
        $state_details = array();
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            if (!empty($colors_arr[$zoom_zone->tid])) {
                $color = $colors_arr[$zoom_zone->tid];
                $state_details['color'] = $color;
                $state_details['hover_color'] = $hover_color_arr[$color];
                $state_details['inactive'] = "no";
                $nid = $region_id[$zoom_zone->tid];
                $state_details['url'] = "javascript:edit_region($nid)";
                $state_details['name'] = $region_name[$zoom_zone->tid];
                $state_details['description'] = "<div class='map-popup-content'><div class='state-name'>$zoom_zone->name</div>" . $agents[$zoom_zone->tid] . "<div class='each-agent'><div class='group-email agent-email'>".$group_email_details[$nid]."</div></div>" . "<div class='click-to-modify'>Click to modify</div></div>";
            } else {
                //$state_details['inactive'] = "no";
                $state_details['color'] = "#CCCCCC";
                $state_details['hover_color'] = "#96A7AA";
                $state_details['url'] = "javascript:add_to_selection($zoom_zone->tid, '$key')";
                $state_details['name'] = $region_name[$zoom_zone->tid];
                $state_details['description'] = "<div class='click-to-modify'>Add to selection</div>";
            }
            $state_specific[$key] = $state_details;
        }
    }
    //Regions specific settings
    $regions = array();
    $i = -1;
    foreach ($zoom_zones as $zoom_zone) {
        $depth = $zoom_zone->depth;
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (in_array($key, $exclude_zoom_zones)) {
            $i++;
            $regions[$i]['name'] = $zoom_zone->name;
            $regions[$i]['description'] = "<div class='click-to-modify'>Click to view agents</div>";
            $states = array();
        } else {
            $states[] = $key;
            $regions[$i]['states'] = $states;
        }
    }
    $simplemaps_worldmap_mapdata['main_settings']  = $main_settings;
    $simplemaps_worldmap_mapdata['state_specific'] = $state_specific;
    $final_data['simplemaps_worldmap_mapdata']     = $simplemaps_worldmap_mapdata;
    $simplemaps_worldmap_mapdata = json_encode($final_data);
    print $simplemaps_worldmap_mapdata;
    exit;
}

function music_reset_map()
{
    //Query for fetching states color ends here
    $simplemaps_worldmap_mapdata = array();
    $main_settings = array();
    //General settings
    $main_settings['width'] = 'responsive';
    $main_settings['background_color'] = '#FFFFFF';
    $main_settings['background_transparent'] = 'yes';
    $main_settings['border_color'] = '#FFFFFF';
    //State defaults
    $main_settings['state_description'] = 'State description';
    $main_settings['state_color'] = '#F8FAFA';
    $main_settings['state_hover_color'] = '#F8FAFA';
    $main_settings['border_color'] = '#D4DDDD';
    $main_settings['border_size'] = .5;
    $main_settings['all_states_inactive'] = 'no';
    $main_settings['all_states_zoomable'] = 'no';
    //Zoom settings
    $main_settings['initial_zoom'] = -1;
    $main_settings['initial_zoom_solo'] = 'no';
    $main_settings['zoom'] = 'no';
    $main_settings['manual_zoom'] = 'no';
    $main_settings['back_image'] = 'no';
    $main_settings['initial_back'] = 'no';
    $main_settings['region_opacity'] = 1;
    $main_settings['region_hover_opacity'] = 1;
    $main_settings['zoom_out_incrementally'] = 'yes';
    $main_settings['zoom_percentage'] = .99;
    $main_settings['zoom_time'] = .5;
    //Popup settings
    $main_settings['popup_color'] = 'white';
    $main_settings['popup_opacity'] = 1;
    $main_settings['popup_shadow'] = 0;
    $main_settings['popup_corners'] = 5;
    $main_settings['popup_font'] = '12px/1.5 Verdana, Arial, Helvetica, sans-serif';
    $main_settings['popup_nocss'] = 'no';
    //Advanced settings
    $main_settings['div'] = 'full-width-map';
    $main_settings['auto_load'] = 'yes';
    $main_settings['url_new_tab'] = 'yes';
    $main_settings['images_directory'] = 'default';
    $main_settings['fade_time'] = .1;
    $main_settings['link_text'] = '';
    //State specific settings
    $state_specific = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    foreach ($zoom_zones as $zoom_zone) {
        $state_details = array();
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $state_details['name'] = $region_name[$zoom_zone->tid];
            $state_details['color'] = "default";
            $state_specific[$key] = $state_details;
        }
    }
    $simplemaps_worldmap_mapdata['main_settings']  = $main_settings;
    $simplemaps_worldmap_mapdata['state_specific'] = $state_specific;
    $final_data['simplemaps_worldmap_mapdata']     = $simplemaps_worldmap_mapdata;
    $simplemaps_worldmap_mapdata = json_encode($final_data);
    print $simplemaps_worldmap_mapdata;
    exit;
}

function music_load_map()
{
    $output = "";
    $cat_id = arg(2);
    if (arg(3) == "") {
        $initial_zoom = 5;
    } else {
        $initial_zoom = arg(3);
    }
    $_SESSION['field_music_category_tid'] = $cat_id;
    $query = "SELECT n.nid, fmzz.field_music_zoom_zones_tid, frc.field_region_color_rgb FROM node n INNER JOIN field_data_field_music_category fmc ON n.nid=fmc.entity_id INNER JOIN field_data_field_music_zoom_zones fmzz ON n.nid=fmzz.entity_id INNER JOIN field_data_field_region_color frc ON n.nid=frc.entity_id WHERE n.type='music_regions' AND fmc.field_music_category_tid = '$cat_id'";
    $results = db_query($query)->fetchAll();
    $colors_arr = array();
    $region_name = array();
    $agents      = array();
    $hover_color_arr = array("#0C5587" => "#1467A0", "#1C739D" => "#2788B7", "#0FBCBC" => "#19D4D4", "#90D591" => "#A1E7A2", "#FFC45C" => "#FED07E", "#F28258" => "#F69773", "#E25656" => "#FB6767", "#EA5E82" => "#FF789B", "#C13377" => "#E13B8B", "#73519B" => "#865FB5", "#829AD8" => "#A3BAF7", "#1A6EBA" => "#1F7CD0", "#198b19" => "#198b19", "#666600" => "#666600", "#FFC0EB" => "#FFC0EB", "#FFFF9A" => "#FFFF9A", "#AED4F5" => "#AED4F5", "#660000" => "#660000", "#9AA899" => "#9AA899", "#1E152A" => "#1E152A", "#D9ACF7" => "#D9ACF7", "#FF007E" => "#FF007E", "#3D8AD0" => "#3D8AD0", "#9D9D5F" => "#9D9D5F", "#667B7C" => "#667B7C");
    foreach ($results as $color) {
        $colors_arr[$color->field_music_zoom_zones_tid] = $color->field_region_color_rgb;
        $nid  = $color->nid;
        $node = node_load($nid);
        $agent_details = "";
        $group_email = "";
        // $group_email_details = "";
        foreach ($node->field_music_agents['und'] as $agent_id) {
            $agent = node_load($agent_id['nid']);
            $phone = $agent->field_phone_no['und'][0]['value'];
            $phone = ($phone == '+1') ? '' : $phone;
            $email = $agent->field_email_id['und'][0]['value'];
            $agent_details .= "<div class='each-agent'>";
            $agent_details .= "<div class='each-name'>$agent->title</div>";
            $agent_details .= "<div class='agent-phone'><a href='tel:$phone'>$phone</a></div>";
            $agent_details .= "<div class='agent-email'><a href='mailto:$email'>$email</a></div>";
            $agent_details .= "</div>";
        }
        if (!empty($node->field_group_email['und'][0]['value'])) {

            $group_email = $node->field_group_email['und'][0]['value'];

            if(!empty($group_email))
            {
                $group_email_details[$nid] = $group_email;
            }
        }
        $agents[$color->field_music_zoom_zones_tid] = $agent_details;
        $region_name[$color->field_music_zoom_zones_tid] = $node->title;
        $region_id[$color->field_music_zoom_zones_tid] = $node->nid;
    }
    //Query for fetching states color ends here
    $simplemaps_worldmap_mapdata = array();
    $main_settings = array();
    //General settings
    $main_settings['width'] = 'responsive';
    $main_settings['background_color'] = '#FFFFFF';
    $main_settings['background_transparent'] = 'yes';
    $main_settings['border_color'] = '#D4DDDD';
    //State defaults
    $main_settings['state_description'] = 'State description';
    $main_settings['state_color'] = '#F8FAFA';
    $main_settings['state_hover_color'] = '#F8FAFA';
    $main_settings['border_size'] = .5;
    $main_settings['all_states_inactive'] = 'yes';
    $main_settings['all_states_zoomable'] = 'no';
    //Labels
    $main_settings['label_color'] = '#666666';
    $main_settings['label_hover_color'] = '#666666';
    $main_settings['label_size'] = 12;
    $main_settings['label_font'] = 'Arial';
    $main_settings['hide_labels'] = 'no';
    //Zoom settings
    if ($_SESSION['screen_width'] <= 767) {
        $main_settings['initial_zoom'] = $initial_zoom;
        $main_settings['initial_zoom_solo'] = 'no';
        $main_settings['manual_zoom'] = 'no';
        $main_settings['popups'] = 'off';
    } else {
        $main_settings['initial_zoom'] = -1;
        $main_settings['initial_zoom_solo'] = 'no';
        $main_settings['manual_zoom'] = 'yes';
        $main_settings['popups'] = 'on_hover';
    }
    $main_settings['zoom_percentage'] = .80;
    $main_settings['zoom'] = 'yes';
    $main_settings['back_image'] = 'no';
    $main_settings['initial_back'] = 'no';
    $main_settings['region_opacity'] = 1;
    $main_settings['region_hover_opacity'] = 1;
    $main_settings['zoom_out_incrementally'] = 'no';
    $main_settings['zoom_time'] = .1;
    //Popup settings
    $main_settings['popup_color'] = 'white';
    $main_settings['popup_opacity'] = 1;
    $main_settings['popup_shadow'] = 0;
    $main_settings['popup_corners'] = 5;
    $main_settings['popup_font'] = '12px/1.5 Verdana, Arial, Helvetica, sans-serif';
    $main_settings['popup_nocss'] = 'no';
    //Advanced settings
    $main_settings['div'] = 'full-width-map';
    $main_settings['auto_load'] = 'yes';
    $main_settings['url_new_tab'] = 'no';
    $main_settings['images_directory'] = 'default';
    $main_settings['fade_time'] = .1;
    $main_settings['link_text'] = '';
    //State specific settings
    $state_specific = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    $states_arr = array();
    foreach ($zoom_zones as $zoom_zone) {
        $state_details = array();
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            if (!empty($colors_arr[$zoom_zone->tid])) {
                $state_details['color'] = $colors_arr[$zoom_zone->tid];
                $state_details['hover_color'] = $hover_color_arr[$colors_arr[$zoom_zone->tid]];
                $nid = $region_id[$zoom_zone->tid];
                $state_details['url'] = "javascript:open_popup($nid, '$zoom_zone->name', '$key')";
                $state_details['inactive'] = "no";
                $states_arr[] = $key;
            } else {
                $state_details['color'] = "#F8FAFA";
                $state_details['hover_color'] = "#F8FAFA";
            }
            $state_details['name'] = $region_name[$zoom_zone->tid];
            $state_details['description'] = "<div class='map-popup-content'><div class='state-name'>$zoom_zone->name</div>" . $agents[$zoom_zone->tid] . "<div class='each-agent'><div class='group-email agent-email'>".$group_email_details[$nid]."</div></div>" . "</div>";
            $state_specific[$key] = $state_details;
        }
    }
    //Regions specific settings
    $exclude_zoom_zones2 = array('africa', 'asia', 'central_and_south_america', 'europe', 'middle_east', 'north_america', 'south_asia_and_oceania');
    $regions = array();
    $i = -1;
    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones_grouping');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    foreach ($zoom_zones as $zoom_zone) {
        $depth = $zoom_zone->depth;
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (in_array($key, $exclude_zoom_zones2)) {
            $i++;
            $regions[$i]['name'] = $zoom_zone->name;
            $regions[$i]['description'] = "<div class='click-to-modify'>Click to view agents</div>";
            $states = array();
        } else {
            $states[] = $key;
            $regions[$i]['states'] = $states;
        }
        $regions[$i]['color'] = "#CCCCCC";
        $regions[$i]['hover_color'] = "#96A7AA";
    }

    $simplemaps_worldmap_mapdata['main_settings'] = $main_settings;
    $simplemaps_worldmap_mapdata['state_specific'] = $state_specific;
    $simplemaps_worldmap_mapdata['regions'] = $regions;
    $final_data['simplemaps_worldmap_mapdata'] = $simplemaps_worldmap_mapdata;
    $final_data['states_arr'] = implode(",", $states_arr);
    $simplemaps_worldmap_mapdata = json_encode($final_data);
    /*
     * First colored Map ends here
     */

    print $simplemaps_worldmap_mapdata;
    exit;
}

function load_music_region()
{
    module_load_include('inc', 'node', 'node.pages');
    if (arg(2) != "new") {
        $node = node_load(arg(2));
    } else {
        $node = new stdClass();
        $node->type = 'music_regions';
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
        $node->field_music_category['und'][0]['tid'] = $_SESSION['field_music_category_tid'];
        $node->uid = 1;
        $node->status = 1;
        $node->comment = 0;
    }

    $form = render(drupal_get_form('music_regions_node_form', $node));
    // Generate the settings:
    $settings = FALSE;
    $javascript = drupal_add_js(NULL, NULL);
    if (isset($javascript['settings'], $javascript['settings']['data'])) {
        $settings = '<script type="text/javascript">jQuery.extend(Drupal.settings, ';
        $settings .= drupal_json_encode(call_user_func_array('array_merge_recursive', $javascript['settings']['data']));
        $settings .=  ');</script>';
    }
    // Return the rendered form and the settings
    die($form . $settings);
}

function music_custom_form_music_regions_node_form_alter(&$form, &$form_state, $form_id)
{
    global $user;

    if (!in_array('administrator', $user->roles)) {
        $form['#theme'] = 'music_custom_music_regions_node_form';
        $form['actions']['submit']['#submit'][] = "music_regions_node_form_custom_submit";
    }
}

function music_custom_form_views_form_manage_music_category_page_alter(&$form, &$form_state)
{
    $count = count($form['#substitutions']['#value']);
    if ($count > 1) {
        $form['actions']['submit']['#prefix'] = '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions"><a id="manage-category-cancel" class="btn-cancel btn-success modal-btn btn btn btn-default">Cancel</a>';
        $form['actions']['submit']['#suffix'] = '</div></div>';
    } else {
        $form['actions']['submit'] = array(
            '#prefix' => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions"><a id="manage-category-cancel" class="btn-cancel btn-success modal-btn btn btn btn-default">Cancel</a><a id="custom-edit-submit" class="btn-success success-btn modal-btn btn btn btn-default">Save</a></div></div>',
        );
    }
}

function delete_zone_from_other_regions($category_id, $nid, $zoom_zones_ids)
{
    //Check if zone has parent and fall in other region
    $query = "select zz.entity_id, zz.field_music_zoom_zones_tid, th.parent FROM field_data_field_music_zoom_zones zz left JOIN field_data_field_music_category mc ON mc.entity_id = zz.entity_id left join taxonomy_term_hierarchy as th on tid=field_music_zoom_zones_tid WHERE zz.bundle= 'music_regions' AND mc.field_music_category_tid = " . $category_id . " AND zz.field_music_zoom_zones_tid IN (" . $zoom_zones_ids . ") AND zz.entity_id != " . $nid;
    $used_zones = db_query($query)->fetchAll();

    $child_zones = $parent_zones = array();
    $regions_used = [];
    foreach ($used_zones as $used_zone) {
        if (!in_array($used_zone->entity_id, $regions)) {
            $regions_used[] = $used_zone->entity_id;
        }
        if ($used_zone->parent) {
            $child_zones[$used_zone->entity_id][] = $used_zone->field_music_zoom_zones_tid;
        } else {
            $parent_zones[] = $used_zone;
        }
    }
    //Delete child zones
    if (!empty($child_zones)) {
        foreach ($child_zones as $region_id => $zones) {
            $node = node_load($region_id);
            foreach ($node->field_music_zoom_zones[LANGUAGE_NONE] as $key => $zoom_zone) {
                if (in_array($zoom_zone['tid'], $zones)) {
                    unset($node->field_music_zoom_zones[LANGUAGE_NONE][$key]);
                }
            }
            node_save($node);
        }
    }
    //Delete parent zones
    if (!empty($parent_zones)) {
        foreach ($parent_zones as $zone) {
            //check count of child in parent zone
            $count_child_query = "select count(zz.entity_id) from field_data_field_music_zoom_zones zz left JOIN field_data_field_music_category mc ON mc.entity_id = zz.entity_id left join taxonomy_term_hierarchy as th on tid=field_music_zoom_zones_tid WHERE zz.bundle= 'music_regions' AND mc.field_music_category_tid = " . $category_id . " AND zz.entity_id = " . $zone->entity_id . " AND th.parent=" . $zone->field_music_zoom_zones_tid;
            $hasChild = db_query($count_child_query)->fetchColumn();
            if (!$hasChild) {
                $node = node_load($zone->entity_id);
                foreach ($node->field_music_zoom_zones[LANGUAGE_NONE] as $key => $zoom_zone) {
                    if ($zoom_zone['tid'] == $zone->field_music_zoom_zones_tid) {
                        unset($node->field_music_zoom_zones[LANGUAGE_NONE][$key]);
                    }
                }
                node_save($node);
            }
        }
    }
    //Remove region if no zone exist in it
    if (!empty($regions_used)) {
        foreach ($regions_used as $region_id) {
            $count_child_query = "select count(zz.entity_id) from field_data_field_music_zoom_zones zz left JOIN field_data_field_music_category mc ON mc.entity_id = zz.entity_id left join taxonomy_term_hierarchy as th on tid=field_music_zoom_zones_tid WHERE zz.bundle= 'music_regions' AND mc.field_music_category_tid = " . $category_id . " AND zz.entity_id = " . $region_id;
            $hasChild = db_query($count_child_query)->fetchColumn();
            if (!$hasChild) {
                node_delete($region_id);
            }
        }
    }
}

function music_regions_node_form_custom_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Save") {
        $category_id = $_SESSION['field_music_category_tid'];
        $zoom_zones_ids = '';
        $first = true;
        foreach ($form_state['node']->field_music_zoom_zones[LANGUAGE_NONE] as $key => $zoom_zones) {
            if ($first) {
                $zoom_zones_ids = $zoom_zones['tid'];
                $first = false;
            } else {
                $zoom_zones_ids .= ',' . $zoom_zones['tid'];
            }
        }
        $nid = $form_state['node']->nid;
        delete_zone_from_other_regions($category_id, $nid, $zoom_zones_ids);
        $nid = $form_state['node']->nid;
        $node = node_load($nid);
        unset($node->field_music_agents);

        if(!empty($_SESSION['agent_lists'])){
            foreach ($_SESSION['agent_lists'] as $agent_id) {
                $node->field_music_agents['und'][] = array('nid' => $agent_id);
            }
        }else {
            $node->field_music_agents['und'][0] = array();

        }


        if(isset($_SESSION['group_email_lists'])) {
            foreach ($_SESSION['group_email_lists'] as $group_email) {
                $node->field_group_email['und'][0]['value'] = $group_email;
                $node->field_group_email['und'][0]['format']['safe_value'] = $group_email;
            }
        }
        else {
            unset($node->field_group_email['und']);

        }



        // Check if field_music_agents is set and contains values.
        if (isset($node->field_music_agents['und'])) {
            // Loop through the agents.
            foreach ($node->field_music_agents['und'] as $key => $agent) {
                // Check if nid is empty.
                if (empty($agent['nid'])) {
                    // Remove this agent entry.
                    unset($node->field_music_agents['und'][$key]);
                }
            }

            // Re-index the array to ensure proper order.
            $node->field_music_agents['und'] = array_values($node->field_music_agents['und']);
        }

        watchdog('music_custom_module', 'Node before save: <pre>@node</pre>', array('@node' => print_r($node, TRUE)), WATCHDOG_DEBUG);
        node_save($node);
        drupal_goto("Music/edit-agent-regions", array("query" => array("field_music_category_tid" => $_SESSION['field_music_category_tid'], "map_capture" => $nid)));
    }
}

function music_bulk_operation()
{
    $query   = "SELECT n.nid FROM node n WHERE n.type='music_profile' AND n.status='1'";
    $results = db_query($query)->fetchAll();
    foreach ($results as $nid) {
        $node = node_load($nid->nid);
        $node->field_music_engagement_types = array();
        node_save($node);
    }
    drupal_set_message("Operation completed successfully.");
    return "";
}

function music_add_to_featured_list()
{
    $nid = arg(2);
    $node = node_load($nid);
    $et_tid = $_SESSION['field_music_engagement_types_tid'];
    $node->field_featured_artist_for['und'][] = array('tid' => $et_tid);
    $node->field_custom_featured_artist_ord['und'][0]['value'] = time();
    node_save($node);
    drupal_goto("Music/all/manage-engagement-type",  array('query' => array('title' => "", "field_music_engagement_types_tid" => $et_tid, "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
}

function music_custom_form_views_form_music_engagement_type_management_featured_list_sort_alter(&$form, &$form_state, $form_id)
{
    global $base_url;
    $et_tid = $_REQUEST['field_music_engagement_types_tid'];


    if (isset($_REQUEST['is_expire'])) {
        $href = $base_url . "/Music/all/manage-engagement-type?title=&field_music_engagement_types_tid=$et_tid&field_search_full_name_value&is_expire=true&popup=add_featured";
    } else if (isset($_REQUEST['expire_soon'])) {
        $href = $base_url . "/Music/all/manage-engagement-type?title=&field_music_engagement_types_tid=$et_tid&field_search_full_name_value&expire_soon=true&popup=add_featured";
    } else {
        $href = $base_url . "/Music/all/manage-engagement-type?title=&field_music_engagement_types_tid=$et_tid&field_search_full_name_value&popup=add_featured";
    }
    $form['actions']['#prefix'] = "<a href='" . $href . "' class='add-more-plus icon-small_plus'></a><div class='modal-footer'><div class='form-actions form-wrapper form-group'>";
    $form['actions']['submit']['#attributes'] = array("class" => array("modal-btn success-btn btn btn-success form-submit"));
    $form['actions']['#suffix'] = "</div></div>";
}


function music_manage_featured()
{
    $et_tid = $_SESSION['field_music_engagement_types_tid'];
    $et = taxonomy_term_load($et_tid);
    $nid = arg(3);
    $node = node_load($nid);
    $outcome = "";
    if (empty($node->field_featured_artist_for)) {
        $node->field_featured_artist_for['und'][] = array('tid' => $et_tid);
        $outcome = '<span class="icon-Star"></span><span class="action-label">Featured</span>';
    } else {
        $artist_for = array();
        foreach ($node->field_featured_artist_for['und'] as $value) {
            $artist_for[] = $value['tid'];
        }
        if (in_array($et_tid,  $artist_for)) {
            foreach ($node->field_featured_artist_for['und'] as $key => $value) {
                if ($et_tid == $value['tid']) {
                    unset($node->field_featured_artist_for['und'][$key]);
                    $outcome = '<span class="icon-StarOutline"></span><span class="action-label">Not Featured</span>';
                }
            }
        } else {
            $node->field_featured_artist_for['und'][] = array('tid' => $et_tid);
            $outcome = '<span class="icon-Star"></span><span class="action-label">Featured</span>';
        }
    }
    node_save($node);
    print json_encode(array('outcome' => $outcome));
    exit;
}

function music_layout_session()
{
    $session_value = arg(2);
    unset($_SESSION['layout']);
    $_SESSION['layout'] = $session_value;
    print json_encode(array('layout' => $_SESSION['layout']));
    exit;
}

function music_add_et()
{
    $et_tid = arg(2);
    $et = taxonomy_term_load($et_tid);
    $connect_id = arg(3);
    $query = "SELECT DISTINCT node.nid AS nid FROM {node} node LEFT JOIN {field_data_field_connect_id} field_data_field_connect_id ON node.nid = field_data_field_connect_id.entity_id AND field_data_field_connect_id.entity_type = 'node'
              WHERE (( (node.type IN  ('music_profile')) AND (field_data_field_connect_id.field_connect_id_value LIKE '$connect_id') ))";
    $nid   = db_query($query)->fetchField();
    $node = node_load($nid);
    $node->field_music_engagement_types['und'][] = array('tid' => $et_tid);
    node_save($node);
    drupal_set_message("'$node->title' has been added to '$et->name' Engagement Type successfully.");
    exit();
}

function music_add_roster()
{
    $roster_tid = arg(2);
    $roster = taxonomy_term_load($roster_tid);
    $connect_id = arg(3);
    $query = "SELECT DISTINCT node.nid AS nid FROM {node} node LEFT JOIN {field_data_field_connect_id} field_data_field_connect_id ON node.nid = field_data_field_connect_id.entity_id AND field_data_field_connect_id.entity_type = 'node'
              WHERE (( (node.type IN  ('music_profile')) AND (field_data_field_connect_id.field_connect_id_value LIKE '$connect_id') ))";
    $nid   = db_query($query)->fetchField();
    $node = node_load($nid);
    $node->field_music_roster_types['und'][] = array('tid' => $roster_tid);
    node_save($node);
    drupal_set_message("'$node->title' has been added to '$roster->name' Roster successfully.");
    exit();
}

function music_remove_et()
{
    $et_tid = arg(2);
    $et = taxonomy_term_load($et_tid);
    $nid = arg(3);
    $node = node_load($nid);
    $node->field_music_engagement_types['und'][] = array('tid' => $et_tid);
    foreach ($node->field_music_engagement_types['und'] as $val => $tid) {
        if ($tid['tid'] == $et_tid) {
            unset($node->field_music_engagement_types['und'][$val]);
        }
    }
    node_save($node);
    drupal_set_message("'$node->title' has been removed from '$et->name' Engagement Type successfully.");
    exit();
}

function music_edit_selling_point($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $et_tid     = $_SESSION['field_music_engagement_types_tid'];
        $et         = taxonomy_term_load($et_tid);
        $title = "EDIT " . strtoupper($et->name) . " SELLING POINT";
        $form_state = array(
            'ajax' => TRUE,
            'title' => $title,
        );

        $nid = arg(4);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_edit_selling_point_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Save") {
                drupal_set_message("Selling point for $et->name has been updated successfully for $node->title profile.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            $output[] = ctools_ajax_command_reload();
            //$output[] = ctools_ajax_command_redirect('Music/'.variable_get( 'mpid_' . arg(5) ).'/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "")));
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_edit_selling_point_form');
    }
}

function music_add_artist_to_engagement_type($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $et_tid     = $_SESSION['field_music_engagement_types_tid'];
        $et         = taxonomy_term_load($et_tid);
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add artist to ' . $et->name),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_artist_to_engagement_type_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Add Artist") {
                $node = node_load($form_state['values']['connect_id']);
                $connect_id = $node->field_connect_id['und'][0]['value'];
                drupal_set_message("$node->title has been added to $et->name Engagement Type successfully.");
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "add_selling_point" => $connect_id)));
            } else {
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_artist_to_engagement_type_form');
    }
}

function music_add_artist_to_engagement_type_form($form, $form_state)
{
    $form['connect_id'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('talent-id'))
    );
    $form['text'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('hide'))
    );
    $form['title'] = array(
        '#prefix'     => '<div class="search-bar"><span class="icon-Magnifying-Glass-Thin"></span>',
        '#type'       => 'textfield',
        '#attributes' => array('placeholder' => 'Search for Artist or Band ', 'autocomplete' => "off", 'class' => array('search-artist')),
        '#suffix'     => '<div class="music-talents-name-list"></div></div>'
    );
    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['confirm'] = array(
        '#type'       => 'submit',
        '#value'      => 'Add Artist',
        '#attributes' => array('class' => array('btn-success modal-btn in-active')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function music_add_artist_to_engagement_type_form_submit($form, &$form_state)
{
    if ($form_state['values']['op'] == "Add Artist") {
        $et_tid     = $_SESSION['field_music_engagement_types_tid'];
        $et         = taxonomy_term_load($et_tid);
        $connect_id = $form_state['values']['connect_id'];
        $query = "SELECT DISTINCT node.nid AS nid FROM {node} node LEFT JOIN {field_data_field_connect_id} field_data_field_connect_id ON node.nid = field_data_field_connect_id.entity_id AND field_data_field_connect_id.entity_type = 'node'
                  WHERE (( (node.type IN  ('music_profile')) AND (field_data_field_connect_id.field_connect_id_value LIKE '$connect_id') ))";
        $nid   = db_query($query)->fetchField();
        $node = node_load($nid);
        $form_state['values']['connect_id'] = $nid;
        $node->field_music_engagement_types['und'][] = array('tid' => $et_tid);
        node_save($node);
    }
}

function music_add_artist_to_roster($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $rt_tid     = $_SESSION['field_music_roster_types_tid'];
        $rt         = taxonomy_term_load($rt_tid);
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Add artist to ' . $rt->name),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_artist_to_roster_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Add Artist") {
                $node = node_load($form_state['values']['connect_id']);
                drupal_set_message("$node->title has been added to $rt->name Roster successfully.");
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                $output[] = ctools_ajax_command_redirect('Music/all/manage-rosters', 0, array('query' => array("title" => "", "field_music_roster_types_tid" => "$rt_tid", "field_search_full_name_value" => "")));
            } else {
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_artist_to_roster_form');
    }
}

function music_add_artist_to_roster_form($form, $form_state)
{
    $form['connect_id'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('talent-id'))
    );
    $form['text'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('hide'))
    );
    $form['title'] = array(
        '#prefix'     => '<div class="search-bar"><span class="icon-Magnifying-Glass-Thin"></span>',
        '#type'       => 'textfield',
        '#attributes' => array('placeholder' => 'Search for Artist or Band ', 'autocomplete' => "off", 'class' => array('search-artist')),
        '#suffix'     => '<div class="music-talents-name-list"></div></div>'
    );
    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['confirm'] = array(
        '#type'       => 'submit',
        '#value'      => 'Add Artist',
        '#attributes' => array('class' => array('btn-success modal-btn in-active')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function music_add_artist_to_roster_form_submit($form, &$form_state)
{
    if ($form_state['values']['op'] == "Add Artist") {
        $roster_tid = $_SESSION['field_music_roster_types_tid'];
        $roster     = taxonomy_term_load($roster_tid);
        $connect_id = $form_state['values']['connect_id'];
        $query = "SELECT DISTINCT node.nid AS nid FROM {node} node LEFT JOIN {field_data_field_connect_id} field_data_field_connect_id ON node.nid = field_data_field_connect_id.entity_id AND field_data_field_connect_id.entity_type = 'node'
                  WHERE (( (node.type IN  ('music_profile')) AND (field_data_field_connect_id.field_connect_id_value LIKE '$connect_id') ))";
        $nid   = db_query($query)->fetchField();
        $form_state['values']['connect_id'] = $nid;
        $node = node_load($nid);
        $node->field_music_roster_types['und'][] = array('tid' => $roster_tid);
        node_save($node);
        drupal_set_message("'$node->title' has been added to '$roster->name' Roster successfully.");
    }
}

function music_add_featured($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $et_tid     = $_SESSION['field_music_engagement_types_tid'];
        $et         = taxonomy_term_load($et_tid);
        $nid        = arg(3);
        $node       = node_load($nid);
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('ADD FEATURED ARTIST'),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_add_featured_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Add Artist") {
                drupal_set_message("Engagement Type successfully.");
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                if (isset($_REQUEST['is_expire'])) {
                    if (empty($form_state['values']['text'])) {
                        $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "is_expire" => "true", "first_add_selling_point" => $form_state['values']['nid'])));
                    } else {
                        $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "is_expire" => "true", "popup" => "edit_featured_artist_list")));
                    }
                } else if (isset($_REQUEST['expire_soon'])) {
                    if (empty($form_state['values']['text'])) {
                        $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "expire_soon" => "true", "first_add_selling_point" => $form_state['values']['nid'])));
                    } else {
                        $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "expire_soon" => "true", "popup" => "edit_featured_artist_list")));
                    }
                } else {
                    if (empty($form_state['values']['text'])) {
                        $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "first_add_selling_point" => $form_state['values']['nid'])));
                    } else {
                        $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
                    }
                }
            } else {
                $output[] = ctools_modal_command_dismiss(); //Close modal automatically
                if (isset($_REQUEST['is_expire'])) {
                    $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "is_expire" => "true", "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
                } else if (isset($_REQUEST['expire_soon'])) {
                    $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "expire_soon" => "true", "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
                } else {
                    $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
                }
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_add_featured_form');
    }
}

function music_add_featured_form($form, $form_state)
{
    $et_tid     = $_SESSION['field_music_engagement_types_tid'];
    $et         = taxonomy_term_load($et_tid);
    $form['nid'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('talent-id'))
    );
    $form['text'] = array(
        '#type' => "hidden",
        '#attributes' => array('class' => array('hide')),
    );
    $form['title'] = array(
        '#prefix'     => '<div class="search-bar left"><span class="icon-Magnifying-Glass-Thin"></span><span class="icon-lightbox_x hide"></span>',
        '#type'       => 'textfield',
        '#attributes' => array('placeholder' => 'Search for Published Artist within ' . $et->name, 'autocomplete' => "off", 'class' => array('search-artist')),
        '#suffix'     => '<div class="music-talents-name-list"></div></div>'
    );
    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['confirm'] = array(
        '#type'       => 'submit',
        '#value'      => 'Add Artist',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn in-active')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function music_add_featured_form_submit(&$form, &$form_state)
{
    if ($form_state['values']['op'] == "Add Artist") {
        $node = node_load($form_state['values']['nid']);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);
        $key = $et->field_key['und'][0]['value'];
        $text = "";
        switch ($key) {
            case 'engagement_college':
                $text = $node->field_college_selling_point['und'][0]['value'];
                break;
            case 'engagement_corp_private_events':
                $text = $node->field_corp_private_events_sellin['und'][0]['value'];
                break;
            case 'engagement_fairs':
                $text = $node->field_fairs_selling_point['und'][0]['value'];
                break;
            case 'engagement_festivals':
                $text = $node->field_festivals_selling_point['und'][0]['value'];
                break;
            case 'engagement_podcasts':
                $text = $node->field_podcasts_selling_point['und'][0]['value'];
                break;
        }

        if (!empty($text)) {
            $form_state['values']['text'] = $text;
            $node->field_featured_artist_for['und'][] = array("tid" => $et_tid);
            $node->field_custom_featured_artist_ord['und'][0]['value'] = time();
            node_save($node);
        }
    }
}

function music_remove_featured($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $et_tid     = $_SESSION['field_music_engagement_types_tid'];
        $et         = taxonomy_term_load($et_tid);
        $nid        = arg(3);
        $node       = node_load($nid);
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Confirm to remove ' . $node->title . ' as featured, from ' . $et->name),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('remove_featured_confirmation_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Confirm") {
                drupal_set_message("'$node->title' has been removed as featured, from '$et->name' Engagement Type successfully.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            if (isset($_REQUEST['is_expire'])) {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "is_expire" => "true", "popup" => "edit_featured_artist_list", "field_search_full_name_value" => "")));
            } else if (isset($_REQUEST['expire_soon'])) {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "expire_soon" => "true", "popup" => "edit_featured_artist_list", "field_search_full_name_value" => "")));
            } else {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "popup" => "edit_featured_artist_list", "field_search_full_name_value" => "")));
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('remove_featured_confirmation_form');
    }
}

/**
 * Drupal form to be put in a modal.
 */
function remove_featured_confirmation_form($form, $form_state)
{
    $et_tid     = $_SESSION['field_music_engagement_types_tid'];
    $et         = taxonomy_term_load($et_tid);
    $nid        = arg(3);
    $node       = node_load($nid);
    $form = array();
    $form['markup'] = array(
        '#type'   => 'item',
        '#markup' => '<div class="confirm">Are you sure you want to remove ' . $node->title . ' as featured, from ' . $et->name . ' Engagement Type?</div>',
    );
    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['confirm'] = array(
        '#type'       => 'submit',
        '#value'      => 'Confirm',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function remove_featured_confirmation_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Confirm") {
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);
        $nid = arg(3);
        $node = node_load($nid);
        $node->field_featured_artist_for['und'][] = array('tid' => $et_tid);
        foreach ($node->field_featured_artist_for['und'] as $val => $tid) {
            if ($tid['tid'] == $et_tid) {
                unset($node->field_featured_artist_for['und'][$val]);
            }
        }
        node_save($node);
    }
}

function music_first_add_selling_point_nf($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => '',
        );

        $nid = arg(3);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_first_add_selling_point_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Ok") {
                drupal_set_message("Selling point for $et->name has been added successfully at $node->title profile.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            if (isset($_REQUEST['is_expire'])) {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "is_expire" => "true", "popup" => "edit_featured_artist_list")));
            } else if (isset($_REQUEST['expire_soon'])) {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "expire_soon" => "true", "popup" => "edit_featured_artist_list")));
            } else {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_first_add_selling_point_form');
    }
}

function music_first_add_selling_point($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => '',
        );

        $nid = arg(3);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_first_add_selling_point_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Ok") {
                drupal_set_message("Selling point for $et->name has been added successfully at $node->title profile.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            if (isset($_REQUEST['is_expire'])) {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "is_expire" => "true", "popup" => "edit_featured_artist_list")));
            } else if (isset($_REQUEST['expire_soon'])) {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "expire_soon" => "true", "popup" => "edit_featured_artist_list")));
            } else {
                $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "", "popup" => "edit_featured_artist_list")));
            }
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_first_add_selling_point_form');
    }
}

function music_first_add_selling_point_form($form, $form_state)
{
    drupal_add_css(drupal_get_path('module', 'music_custom') . "/datepicker/css/datepicker.css");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/datepicker/js/datepicker.js");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/expiry-date-validation.js");
    $nid = arg(3);
    $node = node_load($nid);
    $et_tid = $_SESSION['field_music_engagement_types_tid'];
    $et = taxonomy_term_load($et_tid);
    $key = $et->field_key['und'][0]['value'];
    $default_expiry_date = date('Y-m-d', strtotime("+" . variable_get('sellingpoint_default_expiry_date', 90) . " day"));
    switch ($key) {
        case 'engagement_college':
            $text = $node->field_college_selling_point['und'][0]['value'];
            if (empty($node->field_college_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_college_sp_expires['und'][0]['value']));
            break;
        case 'engagement_corp_private_events':
            $text = $node->field_corp_private_events_sellin['und'][0]['value'];
            if (empty($node->field_corp_pvt_events_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_corp_pvt_events_sp_expires['und'][0]['value']));
            break;
        case 'engagement_fairs':
            $text = $node->field_fairs_selling_point['und'][0]['value'];
            if (empty($node->field_fairs_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_fairs_sp_expires['und'][0]['value']));
            break;
        case 'engagement_festivals':
            $text = $node->field_festivals_selling_point['und'][0]['value'];
            if (empty($node->field_festivals_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_festivals_sp_expires['und'][0]['value']));
            break;
        case 'engagement_podcasts':
            $text = $node->field_podcasts_selling_point['und'][0]['value'];
            if (empty($node->field_podcasts_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_podcasts_sp_expires['und'][0]['value']));
            break;
    }

    $sp_length = strlen($text);

    $form = array();
    $form['markup'] = array(
        '#type'   => 'item',
        '#markup' => '<div class="confirm-selling"><div class="sp-message">Selling Point required for Featured Artists. Add Selling Point for <span class="artist-name">' . $node->title . '</span> for the ' . $et->name . ' Engagement Type?</div></div>',
    );

    $form['sp'] = array(
        '#type'   => 'textarea',
        '#default_value' => $text,
        '#attributes' => array("class" => array("large-textarea")),
        '#suffix' => "<div class='char-limit-wrapper'></div>"
    );

    $current_date = date('d-m-Y');
    if (strtotime($expiry_date) <= strtotime($current_date)) {
        $expired_date_class = "expired-date";
        $icon_class = "icon-important_outline";
        $expire = "Expired";
    } else {
        $expired_date_class = "";
        $icon_class = "";
        $expire = "Expires";
    }

    $form['sp_expiry_date'] = array(
        '#prefix' => '<div id="sellingpoint-expiry-date" class="expires-wrapper ' . $expired_date_class . '"><span class="expired-icon ' . $icon_class . '"></span><span class="expires-label">' . $expire . ': </span>',
        '#type' => 'date_popup',
        '#date_format' => 'm/d/Y',
        '#default_value' => $expiry_date,
        '#date_year_range' => '0:+60',
        '#datepicker_options' => array('minDate' => 0,),
        '#attributes' => array('class' => array('sp_expiry_date')),
        '#suffix' => "<span class='icon-Calendar'></span></div>"
    );

    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#value'      => 'Cancel',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
    );
    $form['save'] = array(
        '#type'       => 'submit',
        '#value'      => 'Ok',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn')),
        '#suffix'     => '</div></div>',
    );
    return $form;
}

function music_first_add_selling_point_form_validate($form, $form_state)
{
    if ($form_state['values']['op'] == "Ok") {
        if (empty(trim($form_state['values']['sp']))) {
            form_set_error("sp", "Please insert Selling Point.");
        }
    }
}

function music_first_add_selling_point_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Ok") {
        $text = $form_state['values']['sp'];
        $expiry_date = $form_state['values']['sp_expiry_date'];
        $nid = arg(3);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);
        $key = $et->field_key['und'][0]['value'];
        switch ($key) {
            case 'engagement_college':
                $node->field_college_selling_point['und'][0]['value'] = $text;
                $node->field_college_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_corp_private_events':
                $node->field_corp_private_events_sellin['und'][0]['value'] = $text;
                $node->field_corp_pvt_events_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_fairs':
                $node->field_fairs_selling_point['und'][0]['value'] = $text;
                $node->field_fairs_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_festivals':
                $node->field_festivals_selling_point['und'][0]['value'] = $text;
                $node->field_festivals_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_podcasts':
                $node->field_podcasts_selling_point['und'][0]['value'] = $text;
                $node->field_podcasts_sp_expires['und'][0]['value'] = $expiry_date;
                break;
        }
        $node->field_featured_artist_for['und'][] = array('tid' => $et_tid);
        $node->field_custom_featured_artist_ord['und'][0]['value'] = time();
        node_save($node);
    }
}

function music_manage_selling_point($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => '',
        );

        $nid = arg(4);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('music_manage_selling_point_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Save") {
                drupal_set_message("Selling point for $et->name has been added successfully at $node->title profile.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            $output[] = ctools_ajax_command_redirect('Music/all/manage-engagement-type', 0, array('query' => array("title" => "", "field_music_engagement_types_tid" => "$et_tid", "field_search_full_name_value" => "")));
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('music_manage_selling_point_form');
    }
}

function music_edit_selling_point_form($form, $form_state)
{
    drupal_add_css(drupal_get_path('module', 'music_custom') . "/datepicker/css/datepicker.css");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/datepicker/js/datepicker.js");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/expiry-date-validation.js");
    $form['#attached']['css'] = array(
        drupal_get_path('module', 'music_custom') . '/css/music-manage-engagement-types.css',
    );

    $nid = arg(4);
    $node = node_load($nid);
    $et_tid = $_SESSION['field_music_engagement_types_tid'];
    $et = taxonomy_term_load($et_tid);
    $key = $et->field_key['und'][0]['value'];
    $default_expiry_date = date('Y-m-d', strtotime("+" . variable_get('sellingpoint_default_expiry_date', 90) . " day"));
    switch ($key) {
        case 'engagement_college':
            $text = $node->field_college_selling_point['und'][0]['value'];
            if (empty($node->field_college_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_college_sp_expires['und'][0]['value']));
            break;
        case 'engagement_corp_private_events':
            $text = $node->field_corp_private_events_sellin['und'][0]['value'];
            if (empty($node->field_corp_pvt_events_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_corp_pvt_events_sp_expires['und'][0]['value']));
            break;
        case 'engagement_fairs':
            $text = $node->field_fairs_selling_point['und'][0]['value'];
            if (empty($node->field_fairs_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_fairs_sp_expires['und'][0]['value']));
            break;
        case 'engagement_festivals':
            $text = $node->field_festivals_selling_point['und'][0]['value'];
            if (empty($node->field_festivals_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_festivals_sp_expires['und'][0]['value']));
            break;
        case 'engagement_podcasts':
            $text = $node->field_podcasts_selling_point['und'][0]['value'];
            if (empty($node->field_podcasts_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_podcasts_sp_expires['und'][0]['value']));
            break;
    }

    $sp_length = strlen($text);

    $form = array();
    $form['sp'] = array(
        '#type'   => 'textarea',
        '#default_value' => $text,
        '#attributes' => array("class" => array("large-textarea")),
        '#suffix' => "<div class='char-limit-wrapper'></div>"
    );

    $current_date = date('d-m-Y');
    if (strtotime($expiry_date) <= strtotime($current_date)) {
        $expired_date_class = "expired-date";
        $icon_class = "icon-important_outline";
        $expire = "Expired";
    } else {
        $expired_date_class = "";
        $icon_class = "";
        $expire = "Expires";
    }

    $form['sp_expiry_date'] = array(
        '#prefix' => '<div id="sellingpoint-expiry-date" class="expires-wrapper ' . $expired_date_class . '"><span class="expired-icon ' . $icon_class . '"></span><span class="expires-label">' . $expire . ': </span>',
        '#type' => 'date_popup',
        '#date_format' => 'm/d/Y',
        '#default_value' => $expiry_date,
        '#date_year_range' => '0:+60',
        '#datepicker_options' => array('minDate' => 0,),
        '#attributes' => array('class' => array('sp_expiry_date')),
        '#suffix' => "<span class='icon-Calendar'></span></div>"
    );

    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['save'] = array(
        '#type'       => 'submit',
        '#value'      => 'Save',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function music_edit_selling_point_form_validate($form, $form_state)
{
    if ($form_state['values']['op'] == "Save") {
        if (empty($form_state['values']['sp'])) {
            $et_tid = $_SESSION['field_music_engagement_types_tid'];
            $et = taxonomy_term_load($et_tid);
            $nid = arg(4);
            $node = node_load($nid);
            if (!empty($node->field_featured_artist_for)) {
                $artist_for = array();
                foreach ($node->field_featured_artist_for['und'] as $value) {
                    $artist_for[] = $value['tid'];
                }
                if (in_array($et_tid,  $artist_for)) {
                    form_set_error("sp", "Please remove it from featured before making it empty.");
                }
            }
        }
    }
}

function music_edit_selling_point_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Save") {
        $text = $form_state['values']['sp'];
        $expiry_date = $form_state['values']['sp_expiry_date'];
        $nid = arg(4);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);
        $key = $et->field_key['und'][0]['value'];
        switch ($key) {
            case 'engagement_college':
                $node->field_college_selling_point['und'][0]['value'] = $text;
                $node->field_college_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_corp_private_events':
                $node->field_corp_private_events_sellin['und'][0]['value'] = $text;
                $node->field_corp_pvt_events_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_fairs':
                $node->field_fairs_selling_point['und'][0]['value'] = $text;
                $node->field_fairs_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_festivals':
                $node->field_festivals_selling_point['und'][0]['value'] = $text;
                $node->field_festivals_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_podcasts':
                $node->field_podcasts_selling_point['und'][0]['value'] = $text;
                $node->field_podcasts_sp_expires['und'][0]['value'] = $expiry_date;
                break;
        }
        node_save($node);
    }
}

function music_manage_selling_point_form($form, $form_state)
{
    drupal_add_css(drupal_get_path('module', 'music_custom') . "/datepicker/css/datepicker.css");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/datepicker/js/datepicker.js");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/expiry-date-validation.js");
    $nid = arg(4);
    $node = node_load($nid);
    $et_tid = $_SESSION['field_music_engagement_types_tid'];
    $et = taxonomy_term_load($et_tid);
    $key = $et->field_key['und'][0]['value'];
    $default_expiry_date = date('Y-m-d', strtotime("+" . variable_get('sellingpoint_default_expiry_date', 90) . " day"));
    switch ($key) {
        case 'engagement_college':
            $text = $node->field_college_selling_point['und'][0]['value'];
            if (empty($node->field_college_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_college_sp_expires['und'][0]['value']));
            break;
        case 'engagement_corp_private_events':
            $text = $node->field_corp_private_events_sellin['und'][0]['value'];
            if (empty($node->field_corp_pvt_events_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_corp_pvt_events_sp_expires['und'][0]['value']));
            break;
        case 'engagement_fairs':
            $text = $node->field_fairs_selling_point['und'][0]['value'];
            if (empty($node->field_fairs_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_fairs_sp_expires['und'][0]['value']));
            break;
        case 'engagement_festivals':
            $text = $node->field_festivals_selling_point['und'][0]['value'];
            if (empty($node->field_festivals_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_festivals_sp_expires['und'][0]['value']));
            break;
        case 'engagement_podcasts':
            $text = $node->field_podcasts_selling_point['und'][0]['value'];
            if (empty($node->field_podcasts_sp_expires['und'][0]['value']))
                $expiry_date = $default_expiry_date;
            else
                $expiry_date = date('Y-m-d', strtotime($node->field_podcasts_sp_expires['und'][0]['value']));
            break;
    }
    $sp_length = strlen($text);
    $form = array();
    $form['markup'] = array(
        '#type'   => 'item',
        '#markup' => '<div class="confirm-selling"><div class="sp-message"><span class="artist-name">' . $node->title . '</span> has been added to the ' . $et->name . ' Engagement Type.</div><div>Add a selling point?</div></div>',
    );

    $form['sp'] = array(
        '#type'   => 'textarea',
        '#default_value' => $text,
        '#attributes' => array("class" => array("large-textarea")),
        '#suffix' => "<div class='char-limit-wrapper'></div>"
    );

    $current_date = date('d-m-Y');
    if (strtotime($expiry_date) <= strtotime($current_date)) {
        $expired_date_class = "expired-date";
        $icon_class = "icon-important_outline";
        $expire = "Expired";
    } else {
        $expired_date_class = "";
        $icon_class = "";
        $expire = "Expires";
    }

    $form['sp_expiry_date'] = array(
        '#prefix' => '<div id="sellingpoint-expiry-date" class="expires-wrapper ' . $expired_date_class . '"><span class="expired-icon ' . $icon_class . '"></span><span class="expires-label">' . $expire . ': </span>',
        '#type' => 'date_popup',
        '#date_format' => 'm/d/Y',
        '#default_value' => $expiry_date,
        '#date_year_range' => '0:+60',
        '#datepicker_options' => array('minDate' => 0,),
        '#attributes' => array('class' => array('sp_expiry_date')),
        '#suffix' => "<span class='icon-Calendar'> </span></div>"
    );

    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Skip'
    );
    $form['save'] = array(
        '#type'       => 'submit',
        '#value'      => 'Save',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function music_manage_selling_point_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Save") {
        $text = $form_state['values']['sp'];
        $expiry_date = $form_state['values']['sp_expiry_date'];
        $nid = arg(4);
        $node = node_load($nid);
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);
        $key = $et->field_key['und'][0]['value'];
        switch ($key) {
            case 'engagement_college':
                $node->field_college_selling_point['und'][0]['value'] = $text;
                $node->field_college_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_corp_private_events':
                $node->field_corp_private_events_sellin['und'][0]['value'] = $text;
                $node->field_corp_pvt_events_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_fairs':
                $node->field_fairs_selling_point['und'][0]['value'] = $text;
                $node->field_fairs_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_festivals':
                $node->field_festivals_selling_point['und'][0]['value'] = $text;
                $node->field_festivals_sp_expires['und'][0]['value'] = $expiry_date;
                break;
            case 'engagement_podcasts':
                $node->field_podcasts_selling_point['und'][0]['value'] = $text;
                $node->field_podcasts_sp_expires['und'][0]['value'] = $expiry_date;
                break;
        }
        node_save($node);
    }
}

function music_remove_talent_et($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $et_tid     = $_SESSION['field_music_engagement_types_tid'];
        $et         = taxonomy_term_load($et_tid);
        $nid        = arg(4);
        $node       = node_load($nid);
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Confirm to remove ' . $node->title . ' from ' . $et->name),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('et_confirmation_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Confirm") {
                drupal_set_message("'$node->title' has been removed from '$et->name' Engagement Type successfully.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            $output[] = ctools_ajax_command_reload(); //reload parent window
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('et_confirmation_form');
    }
}

/**
 * Drupal form to be put in a modal.
 */
function et_confirmation_form($form, $form_state)
{
    $et_tid     = $_SESSION['field_music_engagement_types_tid'];
    $et         = taxonomy_term_load($et_tid);
    $nid        = arg(4);
    $node       = node_load($nid);
    $form = array();
    $form['markup'] = array(
        '#type'   => 'item',
        '#markup' => '<div class="confirm">Are you sure you want to remove ' . $node->title . ' from ' . $et->name . ' Engagement Type?</div>',
    );
    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['confirm'] = array(
        '#type'       => 'submit',
        '#value'      => 'Confirm',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function et_confirmation_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Confirm") {
        $et_tid = $_SESSION['field_music_engagement_types_tid'];
        $et = taxonomy_term_load($et_tid);
        $nid = arg(4);
        $node = node_load($nid);
        $node->field_music_engagement_types['und'][] = array('tid' => $et_tid);
        foreach ($node->field_music_engagement_types['und'] as $val => $tid) {
            if ($tid['tid'] == $et_tid) {
                unset($node->field_music_engagement_types['und'][$val]);
            }
        }
        node_save($node);
    }
}

function music_remove_talent_roster($js)
{
    if ($js) {
        ctools_include('ajax');
        ctools_include('modal');
        $roster_tid = $_SESSION['field_music_roster_types_tid'];
        $roster     = taxonomy_term_load($roster_tid);
        $nid        = arg(4);
        $node       = node_load($nid);
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Confirm to remove ' . $node->title . ' from ' . $roster->name),
        );

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('confirmation_form', $form_state);
        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        if (!empty($form_state['executed'])) {
            $output = array();
            drupal_get_messages();
            if ($form_state['values']['op'] == "Confirm") {
                drupal_set_message("'$node->title' has been removed from '$roster->name' Roster successfully.");
            }
            $output[] = ctools_modal_command_dismiss(); //Close modal automatically
            $output[] = ctools_ajax_command_reload(); //reload parent window
        }
        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('confirmation_form');
    }
}

/**
 * Drupal form to be put in a modal.
 */
function confirmation_form($form, $form_state)
{
    $roster_tid = $_SESSION['field_music_roster_types_tid'];
    $roster     = taxonomy_term_load($roster_tid);
    $nid        = arg(4);
    $node       = node_load($nid);
    $form = array();
    $form['markup'] = array(
        '#type'   => 'item',
        '#markup' => '<div class="confirm">Are you sure you want to remove ' . $node->title . ' from the ' . $roster->name . ' Roster?</div>',
    );
    $form['cancel'] = array(
        '#prefix'     => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions">',
        '#type'       => 'submit',
        '#attributes' => array('class' => array('btn-success btn-cancel modal-btn')),
        '#value'      => 'Cancel'
    );
    $form['confirm'] = array(
        '#type'       => 'submit',
        '#value'      => 'Confirm',
        '#attributes' => array('class' => array('btn-success success-btn modal-btn')),
        '#suffix'     => '</div></div>'
    );
    return $form;
}

function confirmation_form_submit($form, $form_state)
{
    if ($form_state['values']['op'] == "Confirm") {
        $roster_tid = $_SESSION['field_music_roster_types_tid'];
        $roster = taxonomy_term_load($roster_tid);
        $nid = arg(4);
        $node = node_load($nid);
        $node->field_music_roster_types['und'][] = array('tid' => $roster_tid);
        foreach ($node->field_music_roster_types['und'] as $val => $tid) {
            if ($tid['tid'] == $roster_tid) {
                unset($node->field_music_roster_types['und'][$val]);
            }
        }
        node_save($node);
    }
}

function music_add_image($js)
{
    if (!$js) {
        return "Javascript required";
    }
    module_load_include('inc', 'node', 'node.pages');
    ctools_include('node.pages', 'node', '');
    ctools_include('modal');
    ctools_include('ajax');
    ctools_add_js('auto-submit');
    ctools_add_js('ajax-responder');

    $talent = user_load(arg(3));
    // Create a blank node object.
    $node = (object) array(
        'uid'      => $talent->uid,
        'name'     => (isset($talent->name) ? $talent->name : ''),
        'type'     => 'music_image',
        'language' => LANGUAGE_NONE,
    );

    $form_state = array(
        'title' => t('Add Image'),
        'ajax' => TRUE,
        'uid' => arg(3)
    );

    $form_state['build_info']['args'] = array($node);
    $output = ctools_modal_form_wrapper('music_image_node_form', $form_state);

    if (!empty($form_state['executed'])) {
        $output = array();
        drupal_get_messages();
        drupal_set_message("Image has been added successfully.");
        $connect_id = arg(5);
        $output[] = ctools_modal_command_dismiss(); //Close modal automatically
        $output[] = ctools_ajax_command_redirect('Music/' . variable_get('mpid_' . $connect_id), 0, array('query' => array("popup" => "images")));
    }
    print ajax_render($output);
    exit;
}

function music()
{
    if ((arg(0) == "Music") && arg(1) == "") {
        drupal_goto("Music/all/talent");
    }
}

function music_custom_init()
{
    global $base_url, $music_tid, $active_tid, $user, $engagement_college_tid, $engagement_corp_private_events_tid, $regions_central_and_south_america_tid, $engagement_fairs_tid, $engagement_festivals_tid, $engagement_podcasts_tid;

    global $regions_africa_tid, $regions_asia_tid, $regions_australia_tid, $regions_australia_and_new_zealand_tid, $regions_europe_tid, $regions_north_america_tid, $regions_usa_tid, $regions_worldwide_tid, $tv_tid;
    $submission_types                   = music_custom_get_taxonomy_list('submission_type');
    $active_tid                         = $submission_types['active']['id'];
    $business_units                     = music_custom_get_taxonomy_list('business_units');
    $music_tid                          = $business_units['music']['id'];
    $tv_tid                             = $business_units['tvscripted']['id'];

    $music_engagement_types             = music_custom_get_taxonomy_list('music_engagement_types');
    $engagement_college_tid             = $music_engagement_types['engagement_college']['id'];
    $engagement_corp_private_events_tid = $music_engagement_types['engagement_corp_private_events']['id'];
    $engagement_fairs_tid               = $music_engagement_types['engagement_fairs']['id'];
    $engagement_festivals_tid           = $music_engagement_types['engagement_festivals']['id'];
    $engagement_podcasts_tid            = $music_engagement_types['engagement_podcasts']['id'];
    $music_regions                      = music_custom_get_taxonomy_list('music_regions');
    $regions_africa_tid              = $music_regions['regions_africa']['id'];
    $regions_asia_tid                   = $music_regions['regions_asia']['id'];
    $regions_australia_tid              = $music_regions['regions_australia']['id'];
    $regions_australia_and_new_zealand_tid              = $music_regions['regions_australia_and_new_zealand']['id'];
    $regions_central_and_south_america_tid              = $music_regions['regions_central_america_and_south_america']['id'];
    $regions_europe_tid                 = $music_regions['regions_europe']['id'];
    $regions_north_america_tid          = $music_regions['regions_north_america']['id'];
    $regions_usa_tid                    = $music_regions['regions_usa']['id'];
    $regions_worldwide_tid              = $music_regions['regions_worldwide']['id'];

    drupal_add_js(array('base_url' => $base_url), 'setting');

    if (is_array($user->roles) && (in_array('music_engagement_type_agent', $user->roles)) && drupal_is_front_page()) {
        drupal_goto("Music/all/manage-engagement-type");
    } else if (is_array($user->roles) && (in_array('music_roster_type_agent', $user->roles)) && drupal_is_front_page()) {
        drupal_goto("Music/all/manage-rosters");
    } else if (is_array($user->roles) && (in_array('external_user_registration', $user->roles)) && drupal_is_front_page()) {
        drupal_goto("Music/all/talent");
    }

    if (isset($_REQUEST['field_profile_status_value']) && ($_REQUEST['field_profile_status_value'] != 2)) {
        if ((arg(0) == "Music") && user_is_anonymous()) {
            drupal_goto("Music/all/talent");
        }
    }


    if (isset($_REQUEST['field_music_roster_types_tid'])) {
        $field_music_roster_types_tid = implode("-", $_REQUEST['field_music_roster_types_tid']);
        drupal_add_js(array('field_music_roster_types_tid' => $field_music_roster_types_tid), 'setting');
    }

    if (isset($_REQUEST['field_music_regions_tid'])) {
        $field_music_regions_tid = implode("-", $_REQUEST['field_music_regions_tid']);
        drupal_add_js(array('field_music_regions_tid' => $field_music_regions_tid), 'setting');
    }

    if (arg(1) != "") {
        drupal_add_js(array('arg1' => arg(1)), 'setting');
    }
}

function music_talents_infinite_scroll_rosters()
{
    global $base_url, $music_tid;
    $arg3 = arg(3);
    $per_page = 12;
    $sub_string_where = "";
    $search_roster_types_where = "";
    $inner_join_rt = "";

    if ($arg3 == 1)
        $offset = 40;
    else
        $offset = (($arg3 - 1) * $per_page) + 40;

    if (isset($_REQUEST['arg1']) && ($_REQUEST['arg1'] != "all")) {
        $sub_string = $_REQUEST['arg1'];
        $sub_string_where = "( (SUBSTRING(field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value, 1, 1) = '$sub_string') ) AND";
    }

    if (isset($_SESSION['field_music_roster_types_tid']) && !empty($_SESSION['field_music_roster_types_tid'])) {
        $inner_join_rt = "INNER JOIN field_data_field_music_roster_types field_talent_user_reference_users__field_data_field_music_roster_types ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_roster_types.entity_id AND field_talent_user_reference_users__field_data_field_music_roster_types.entity_type = 'node'";
        $tid = $_SESSION['field_music_roster_types_tid'];
        $search_roster_types_where = "AND (field_talent_user_reference_users__field_data_field_music_roster_types.field_music_roster_types_tid = '$tid')";
    }


    $query0 = "SELECT DISTINCT users.uid AS uid, field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value AS field_talent_user_reference_users__field_data_field_search_f, 'node' AS field_data_field_search_full_name_node_entity_type FROM users users INNER JOIN field_data_field_talent_user_reference field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
                INNER JOIN node field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
                LEFT JOIN field_data_field_business_units field_data_field_business_units_value_0 ON users.uid = field_data_field_business_units_value_0.entity_id AND field_data_field_business_units_value_0.field_business_units_tid = '$music_tid'
                INNER JOIN field_data_field_profile_status field_talent_user_reference_users__field_data_field_profile_status ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_profile_status.entity_id AND field_talent_user_reference_users__field_data_field_profile_status.entity_type = 'node'
                LEFT JOIN field_data_field_search_full_name field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
                $inner_join_rt
                WHERE ($sub_string_where (( (users_roles.rid = '8') AND( (field_data_field_business_units_value_0.field_business_units_tid = '$music_tid') )AND (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value IN ('1', '2')) $search_roster_types_where )))
                ORDER BY field_talent_user_reference_users__field_data_field_search_f ASC";

    $results0 = db_query($query0)->fetchAll();
    $total    = count($results0);

    $query = "SELECT DISTINCT users.uid AS uid, field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value AS field_talent_user_reference_users__field_data_field_search_f, 'node' AS field_data_field_search_full_name_node_entity_type FROM users users INNER JOIN field_data_field_talent_user_reference field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
                INNER JOIN node field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
                LEFT JOIN field_data_field_business_units field_data_field_business_units_value_0 ON users.uid = field_data_field_business_units_value_0.entity_id AND field_data_field_business_units_value_0.field_business_units_tid = '$music_tid'
                INNER JOIN field_data_field_profile_status field_talent_user_reference_users__field_data_field_profile_status ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_profile_status.entity_id AND field_talent_user_reference_users__field_data_field_profile_status.entity_type = 'node'
                LEFT JOIN field_data_field_search_full_name field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
                $inner_join_rt
                WHERE ($sub_string_where (( (users_roles.rid = '8') AND( (field_data_field_business_units_value_0.field_business_units_tid = '$music_tid') )AND (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value IN ('1', '2')) $search_roster_types_where )))
                ORDER BY field_talent_user_reference_users__field_data_field_search_f ASC LIMIT $per_page OFFSET $offset";

    $results = db_query($query)->fetchAll();
    $count   = count($results);
    $output  = array();
    foreach ($results as $result) {
        $music_user     = user_load($result->uid);
        $title          = $result->field_talent_user_reference_users_title;
        $title2         = $title;
        if (substr(trim($title), 0, 4) == "The " || substr(trim($title), 0, 4) == "the ") {
            $title2 = substr($title, 4, strlen(trim($title)));
        }
        $connect_id     = $music_user->field_azure_connect_id['und'][0]['value'];
        $href           = url("Music/" . variable_get('mpid_' . $connect_id));
        $remove_link = l("", "Music/nojs/remove-talent/roster/$result->field_talent_user_reference_users_nid", array("attributes" => array("class" => "remove-each-item icon-small_x ctools-use-modal hidden-xs")));
        $remove_url = url("Music/nojs/remove-talent/roster/$result->field_talent_user_reference_users_nid");
        $remove_link_xs = "<a href='$remove_url' class='remove-each-item ctools-use-modal icon-small_x visible-xs'><span class='remove-label'> Remove</span></a>";
        $output[ucfirst($title[0])][] = "<div class='each-items col-md-3 col-sm-4 col-xs-12'>$remove_link<a href='$href' class='each-name'>$title</a>$remove_link_xs</div>";
    }
    echo json_encode(array(
        'result' => $output,
        'count'  => $count,
        'total'  => ceil($total / $per_page)
    ));
    exit();
}

function music_talents_infinite_scroll_grid()
{
    global $base_url, $music_tid, $engagement_college_tid, $engagement_corp_private_events_tid, $engagement_fairs_tid, $engagement_festivals_tid, $engagement_podcasts_tid;
    $arg3 = arg(3);
    $page_no = $arg3 + 1;
    $per_page = 16;
    $profile_status = 2;
    $sub_string_where = "";
    $search_full_name_where = "";
    $search_engagement_types_where = "";
    $inner_join_et = "";
    $search_music_regions_where = "";
    $inner_join_mr = "";
    $search_roster_types_where = "";
    $inner_join_rt = "";
    $offset = $arg3 * $per_page;
    if (isset($_REQUEST['arg1']) && ($_REQUEST['arg1'] != "all")) {
        $sub_string = $_REQUEST['arg1'];
        $sub_string_where = "( (SUBSTRING(field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value, 1, 1) = '$sub_string') ) AND";
    }

    if (isset($_REQUEST['field_search_full_name_value']) && !empty($_REQUEST['field_search_full_name_value'])) {
        $search_full_name = $_REQUEST['field_search_full_name_value'];
        $search_full_name_where = "AND (field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value LIKE '%$search_full_name%')";
    }

    if (isset($_REQUEST['field_music_engagement_types_tid']) && ($_REQUEST['field_music_engagement_types_tid'] != "All")) {
        $inner_join_et = "INNER JOIN field_data_field_music_engagement_types field_talent_user_reference_users__field_data_field_music_engagement_types ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_engagement_types.entity_id AND field_talent_user_reference_users__field_data_field_music_engagement_types.entity_type = 'node'";
        $search_engagement_types = $_REQUEST['field_music_engagement_types_tid'];
        $search_engagement_types_where = "AND (field_talent_user_reference_users__field_data_field_music_engagement_types.field_music_engagement_types_tid = '$search_engagement_types')";
    }

    if (isset($_REQUEST['field_music_regions_tid'])) {
        $inner_join_mr = "INNER JOIN field_data_field_music_regions field_talent_user_reference_users__field_data_field_music_regions ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_regions.entity_id AND field_talent_user_reference_users__field_data_field_music_regions.entity_type = 'node'";
        $search_music_regions = array();
        $regions = explode("-", $_REQUEST['field_music_regions_tid']);
        foreach ($regions as $region_tid) {
            $search_music_regions[] = "'$region_tid'";
        }
        $search_music_regions = implode(", ", $search_music_regions);
        $search_music_regions_where = "AND (field_talent_user_reference_users__field_data_field_music_regions.field_music_regions_tid IN  ($search_music_regions))";
    }

    if (isset($_REQUEST['field_music_roster_types_tid']) && !empty($_REQUEST['field_music_roster_types_tid'])) {
        $inner_join_rt = "INNER JOIN field_data_field_music_roster_types field_talent_user_reference_users__field_data_field_music_roster_types ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_roster_types.entity_id AND field_talent_user_reference_users__field_data_field_music_roster_types.entity_type = 'node'";
        $search_roster_types = array();
        $rosters = explode("-", $_REQUEST['field_music_roster_types_tid']);
        foreach ($rosters as $roster_tid) {
            $search_roster_types[] = "'$roster_tid'";
        }
        $search_roster_types = implode(", ", $search_roster_types);
        $search_roster_types_where = "AND (field_talent_user_reference_users__field_data_field_music_roster_types.field_music_roster_types_tid IN  ($search_roster_types))";
    }

    if (isset($_REQUEST['field_profile_status_value'])) {
        $profile_status = $_REQUEST['field_profile_status_value'];
    }

    $query0 = "SELECT DISTINCT users.uid AS uid, field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value AS field_talent_user_reference_users__field_data_field_search_f, 'node' AS field_data_field_search_full_name_node_entity_type FROM users users
                INNER JOIN field_data_field_talent_user_reference field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
                INNER JOIN node field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid
                INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
                LEFT JOIN field_data_field_business_units field_data_field_business_units_value_0 ON users.uid = field_data_field_business_units_value_0.entity_id AND field_data_field_business_units_value_0.field_business_units_tid = '$music_tid'
                INNER JOIN field_data_field_profile_status field_talent_user_reference_users__field_data_field_profile_status ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_profile_status.entity_id AND field_talent_user_reference_users__field_data_field_profile_status.entity_type = 'node'
                LEFT JOIN field_data_field_search_full_name field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
                $inner_join_et
                $inner_join_rt
                $inner_join_mr
                WHERE ($sub_string_where (( (users_roles.rid = '8') AND( (field_data_field_business_units_value_0.field_business_units_tid = '$music_tid') )AND (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value = '" . $profile_status . "') $search_full_name_where $search_engagement_types_where $search_music_regions_where $search_roster_types_where )))
                ORDER BY field_talent_user_reference_users__field_data_field_search_f ASC";

    $results0 = db_query($query0)->fetchAll();
    $total    = count($results0);

    $query = "SELECT DISTINCT users.uid AS uid, field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value AS field_talent_user_reference_users__field_data_field_search_f, 'node' AS field_data_field_search_full_name_node_entity_type FROM users users INNER JOIN field_data_field_talent_user_reference field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
                INNER JOIN node field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
                LEFT JOIN field_data_field_business_units field_data_field_business_units_value_0 ON users.uid = field_data_field_business_units_value_0.entity_id AND field_data_field_business_units_value_0.field_business_units_tid = '$music_tid'
                INNER JOIN field_data_field_profile_status field_talent_user_reference_users__field_data_field_profile_status ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_profile_status.entity_id AND field_talent_user_reference_users__field_data_field_profile_status.entity_type = 'node'
                LEFT JOIN field_data_field_search_full_name field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
                $inner_join_et
                $inner_join_rt
                $inner_join_mr
                WHERE ($sub_string_where (( (users_roles.rid = '8') AND( (field_data_field_business_units_value_0.field_business_units_tid = '$music_tid') )AND (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value = '" . $profile_status . "') $search_full_name_where $search_engagement_types_where $search_music_regions_where $search_roster_types_where )))
                ORDER BY field_talent_user_reference_users__field_data_field_search_f ASC LIMIT $per_page OFFSET $offset";

    $results = db_query($query)->fetchAll();
    $count   = count($results);
    $output  = array();
    $i = 0;
    $j = 0;
    foreach ($results as $result) {
        if ($_SESSION['screen_width'] >= 1200) {
            if ($i % 6 == 0) {
                $j++;
            }
        } else {
            if ($i % 4 == 0) {
                $j++;
            }
        }
        $i++;
    }
    $j = $j * ($arg3);
    $i = 0;
    $pic_arr = array();
    foreach ($results as $result) {
        if ($_SESSION['screen_width'] >= 1200) {
            if ($i % 6 == 0) {
                $j++;
            }
        } else {
            if ($i % 4 == 0) {
                $j++;
            }
        }

        $i++;
        $music_user     = user_load($result->uid);
        $nid            = $result->field_talent_user_reference_users_nid;
        $node           = node_load($nid);
        // if (!empty($node->field_profile_pic_from)) {
        // $profile_pic_from = $node->field_profile_pic_from['und'][0]['value'];
        if (!empty($music_user->picture)) {
            $pic_url = image_style_url("image_profile_custom", $music_user->picture->uri);
        } else {
            $pic_url = $base_url . "/sites/all/themes/talento_theme/images/user_pic-225x225.png";
        }
        // } else {
        // $pic_url = $base_url . "/sites/all/themes/talento_theme/images/user_pic-225x225.png";
        // }
        $pic_arr[$nid] = $pic_url;

        $title          = $result->field_talent_user_reference_users_title;
        $connect_id     = $music_user->field_azure_connect_id['und'][0]['value'];
        $href           = url("Music/" . variable_get('mpid_' . $connect_id), array("query" => array("page_count" => $arg3, "layout" => "grid","client_profile"=>"true")));
        $title2         = $title;
        if (substr(trim($title), 0, 4) == "The " || substr(trim($title), 0, 4) == "the ") {
            $title2 = substr($title, 4, strlen(trim($title)));
        }

        $output[ucfirst($title2[0])][] = "<div id='profile-grid-$connect_id' class='each-items each-preload-$j col-lg-2 col-md-3 col-sm-3 col-xs-4'><div class='each-grid visible-md visible-lg'><a href='$href' rel='lightframe'><div class='grid-img img-container-$nid'><img class='img-responsive' src='$pic_url' alt='$title'> </div> <div class='grid-title' title=" . htmlspecialchars($title) . ">$title</div>
            </a>
        </div>

        <a href='$href' rel='lightframe'>
            <div class='list-img  visible-xs visible-sm'><img class='img-responsive' src='$pic_url' alt='$title'/></div>

            <div class='list-content visible-xs visible-sm'>

                <div class='list-title'>$title</div>
                <div class='list-desc'></div>
            </div>
        </a>
    </div>
    ";
    }

    echo json_encode(array(
        'result'  => $output,
        'pic_arr' => $pic_arr,
        'count'   => $count,
        'page_no' => $page_no,
        'total'   => ceil($total / $per_page)
    ));
    exit();
}


function music_talents_infinite_scroll_list()
{
    global $base_url, $music_tid, $engagement_college_tid, $engagement_corp_private_events_tid, $engagement_fairs_tid, $engagement_festivals_tid, $engagement_podcasts_tid;
    $arg3 = arg(3);
    $page_no = $arg3 + 1;
    $per_page = 80;
    $profile_status = 2;
    $sub_string_where = "";
    $search_full_name_where = "";
    $search_engagement_types_where = "";
    $inner_join_et = "";
    $search_music_regions_where = "";
    $inner_join_mr = "";
    $search_roster_types_where = "";
    $inner_join_rt = "";

    if ($arg3 == 1)
        $offset = 16;
    else
        $offset = (($arg3 - 1) * $per_page) + 16;

    if (isset($_REQUEST['arg1']) && ($_REQUEST['arg1'] != "all")) {
        $sub_string = $_REQUEST['arg1'];
        $sub_string_where = "( (SUBSTRING(field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value, 1, 1) = '$sub_string') ) AND";
    }

    if (isset($_REQUEST['field_search_full_name_value']) && !empty($_REQUEST['field_search_full_name_value'])) {
        $search_full_name = $_REQUEST['field_search_full_name_value'];
        $search_full_name_where = "AND (field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value LIKE '%$search_full_name%')";
    }

    if (isset($_REQUEST['field_music_engagement_types_tid']) && ($_REQUEST['field_music_engagement_types_tid'] != "All")) {
        $inner_join_et = "INNER JOIN field_data_field_music_engagement_types field_talent_user_reference_users__field_data_field_music_engagement_types ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_engagement_types.entity_id AND field_talent_user_reference_users__field_data_field_music_engagement_types.entity_type = 'node'";
        $search_engagement_types = $_REQUEST['field_music_engagement_types_tid'];
        $search_engagement_types_where = "AND (field_talent_user_reference_users__field_data_field_music_engagement_types.field_music_engagement_types_tid = '$search_engagement_types')";
    }

    if (isset($_REQUEST['field_music_regions_tid'])) {
        $inner_join_mr = "INNER JOIN field_data_field_music_regions field_talent_user_reference_users__field_data_field_music_regions ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_regions.entity_id AND field_talent_user_reference_users__field_data_field_music_regions.entity_type = 'node'";
        $search_music_regions = array();
        $regions = explode("-", $_REQUEST['field_music_regions_tid']);
        foreach ($regions as $region_tid) {
            $search_music_regions[] = "'$region_tid'";
        }
        $search_music_regions = implode(", ", $search_music_regions);
        $search_music_regions_where = "AND (field_talent_user_reference_users__field_data_field_music_regions.field_music_regions_tid IN  ($search_music_regions))";
    }

    if (isset($_REQUEST['field_music_roster_types_tid']) && !empty($_REQUEST['field_music_roster_types_tid'])) {
        $inner_join_rt = "INNER JOIN field_data_field_music_roster_types field_talent_user_reference_users__field_data_field_music_roster_types ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_roster_types.entity_id AND field_talent_user_reference_users__field_data_field_music_roster_types.entity_type = 'node'";
        $search_roster_types = array();
        $rosters = explode("-", $_REQUEST['field_music_roster_types_tid']);
        foreach ($rosters as $roster_tid) {
            $search_roster_types[] = "'$roster_tid'";
        }
        $search_roster_types = implode(", ", $search_roster_types);
        $search_roster_types_where = "AND (field_talent_user_reference_users__field_data_field_music_roster_types.field_music_roster_types_tid IN  ($search_roster_types))";
    }

    if (isset($_REQUEST['field_profile_status_value'])) {
        $profile_status = $_REQUEST['field_profile_status_value'];
    }

    $query0 = "SELECT DISTINCT users.uid AS uid, field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value AS field_talent_user_reference_users__field_data_field_search_f, field_talent_user_reference_users__field_data_field_display_name.field_display_name_value AS field_talent_user_reference_users__field_data_field_display, 'node' AS field_data_field_search_full_name_node_entity_type FROM users users
                INNER JOIN field_data_field_talent_user_reference field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
                INNER JOIN node field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid
                INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
                LEFT JOIN field_data_field_business_units field_data_field_business_units_value_0 ON users.uid = field_data_field_business_units_value_0.entity_id AND field_data_field_business_units_value_0.field_business_units_tid = '$music_tid'
                INNER JOIN field_data_field_profile_status field_talent_user_reference_users__field_data_field_profile_status ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_profile_status.entity_id AND field_talent_user_reference_users__field_data_field_profile_status.entity_type = 'node'
                LEFT JOIN field_data_field_search_full_name field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
                LEFT JOIN field_data_field_display_name field_talent_user_reference_users__field_data_field_display_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_display_name.entity_id AND field_talent_user_reference_users__field_data_field_display_name.entity_type = 'node'
                $inner_join_et
                $inner_join_rt
                $inner_join_mr
                WHERE ($sub_string_where (( (users_roles.rid = '8') AND( (field_data_field_business_units_value_0.field_business_units_tid = '$music_tid') )AND (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value = '" . $profile_status . "') $search_full_name_where $search_engagement_types_where $search_music_regions_where $search_roster_types_where )))
                ORDER BY field_talent_user_reference_users__field_data_field_search_f ASC";

    $results0 = db_query($query0)->fetchAll();
    $total    = count($results0);
    $query_limit = "LIMIT  $per_page OFFSET $offset";

    $query = "SELECT DISTINCT users.uid AS uid, field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value AS field_talent_user_reference_users__field_data_field_search_f, field_talent_user_reference_users__field_data_field_display_name.field_display_name_value AS field_talent_user_reference_users__field_data_field_display, 'node' AS field_data_field_search_full_name_node_entity_type FROM users users INNER JOIN field_data_field_talent_user_reference field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
                INNER JOIN node field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
                LEFT JOIN field_data_field_business_units field_data_field_business_units_value_0 ON users.uid = field_data_field_business_units_value_0.entity_id AND field_data_field_business_units_value_0.field_business_units_tid = '$music_tid'
                INNER JOIN field_data_field_profile_status field_talent_user_reference_users__field_data_field_profile_status ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_profile_status.entity_id AND field_talent_user_reference_users__field_data_field_profile_status.entity_type = 'node'
                LEFT JOIN field_data_field_search_full_name field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
                LEFT JOIN field_data_field_display_name field_talent_user_reference_users__field_data_field_display_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_display_name.entity_id AND field_talent_user_reference_users__field_data_field_display_name.entity_type = 'node'
                $inner_join_et
                $inner_join_rt
                $inner_join_mr
                WHERE ($sub_string_where (( (users_roles.rid = '8') AND( (field_data_field_business_units_value_0.field_business_units_tid = '$music_tid') )AND (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value = '" . $profile_status . "') $search_full_name_where $search_engagement_types_where $search_music_regions_where $search_roster_types_where )))
                ORDER BY field_talent_user_reference_users__field_data_field_search_f ASC " . $query_limit;

    $results = db_query($query)->fetchAll();
    $count   = count($results);
    $output  = array();
    $i = 0;
    $j = 0;
    foreach ($results as $result) {
        if ($i % 4 == 0) {
            $j++;
        }
        $i++;
    }
    $j = $j * ($arg3);
    $i = 0;

    $output2  = array();
    foreach ($results as $result) {
        $music_user     = user_load($result->uid);
        $title          = ($result->field_talent_user_reference_users__field_data_field_display) ? $result->field_talent_user_reference_users__field_data_field_display : $result->field_talent_user_reference_users_title;
        $connect_id     = $music_user->field_azure_connect_id['und'][0]['value'];
        $href           = url("Music/" . variable_get('mpid_' . $connect_id), array("query" => array("page_count" => $arg3, "layout" => "list","width"=>"1230","height"=>"100%")));
        $title2         = $title;
        if (substr(trim($title), 0, 4) == "The " || substr(trim($title), 0, 4) == "the ") {
            $title2 = substr($title, 4, strlen(trim($title)));
        }
        $output2[ucfirst($title2[0])][] = "<div id='profile-list-$connect_id' class='each-items col-lg-2 col-md-3 col-sm-6 col-xs-12'><a href='$href' class='each-name' title=\"" . $title . "\">$title</a></div>";
    }
    echo json_encode(array(
        'result2' => $output2,
        'count'   => $count,
        'page_no' => $page_no,
        'total'   => ceil(($total - 16) / $per_page)
    ));
    exit();
}



function music_talents_auto_suggest_music_agents()
{
    $search_full_name = "";
    if (isset($_REQUEST['title']) && !empty($_REQUEST['title'])) {
        $search_full_name = $_REQUEST['title'];
    }
    $region_id = arg(4);
    $cat_id    = $_SESSION['field_music_category_tid'];
    $i = 0;
    $output = "";
    $query  = "SELECT ma.field_music_agents_nid  FROM field_data_field_music_agents ma INNER JOIN node n ON n.nid = ma.entity_id INNER JOIN field_data_field_music_category mc ON n.nid = mc.entity_id WHERE ma.bundle='music_regions' AND n.nid != '$region_id' AND mc.field_music_category_tid = '$cat_id'";
    $results = db_query($query)->fetchAll();
    $agent_nids = array();
    foreach ($results as $result) {
        $agent_nids[] = $result->field_music_agents_nid;
    }

    $query = "SELECT nid FROM node WHERE type = 'music_region_agents' AND title LIKE '%$search_full_name%' ORDER BY locate('$search_full_name', title) ASC, title ASC  LIMIT 7";
    $all_agents_nids = db_query($query)->fetchCol();
    //$all_agents_nids = array_diff($all_agents_nids, $agent_nids);
    $all_agents_nids = array_diff($all_agents_nids, $_SESSION['agent_lists']);
    foreach ($all_agents_nids as $agents_nid) {
        $i++;
        $agent       = node_load($agents_nid);
        $agent_email = $agent->field_email_id['und']['0']['value'];
        $agent_phone = $agent->field_phone_no['und']['0']['value'];
        $agent_phone = ($agent_phone == '+1') ? '' : $agent_phone;
        $output .= "<div id='selectagent-$agents_nid' class='agent-info'>";
        $output .= "<div class='agent-name'>$agent->title</div>";
        $output .= "<div class='agent-email'>$agent_email</div>";
        $output .= "<div class='agent-phone'>$agent_phone</div>";
        $output .= "</div>";
    }


    echo json_encode(array(
        'result' => $output,
        'count'  => $i,
    ));
    exit();
}

function music_talents_auto_suggest_featured()
{
    global $base_url, $engagement_college_tid, $engagement_corp_private_events_tid, $engagement_fairs_tid, $engagement_festivals_tid, $engagement_podcasts_tid;
    $search_full_name = "";
    if (isset($_REQUEST['title']) && !empty($_REQUEST['title'])) {
        $search_full_name = $_REQUEST['title'];
    }

    if (isset($_SESSION['field_music_engagement_types_tid']) && !empty($_SESSION['field_music_engagement_types_tid'])) {
        $tid = $_SESSION['field_music_engagement_types_tid'];
    }

    $output = "<ul>";
    $query = "SELECT DISTINCT field_talent_user_reference_users.title AS field_talent_user_reference_users_title, field_talent_user_reference_users.nid AS field_talent_user_reference_users_nid FROM {users} users
              LEFT JOIN {field_data_field_talent_user_reference} field_data_field_talent_user_reference ON users.uid = field_data_field_talent_user_reference.field_talent_user_reference_uid
              LEFT JOIN {node} field_talent_user_reference_users ON field_data_field_talent_user_reference.entity_id = field_talent_user_reference_users.nid
              LEFT JOIN {field_data_field_search_full_name} field_talent_user_reference_users__field_data_field_search_full_name ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_search_full_name.entity_id AND field_talent_user_reference_users__field_data_field_search_full_name.entity_type = 'node'
              INNER JOIN {field_data_field_music_engagement_types} field_talent_user_reference_users__field_data_field_music_engagement_types ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_music_engagement_types.entity_id AND field_talent_user_reference_users__field_data_field_music_engagement_types.entity_type = 'node'
              LEFT JOIN {field_data_field_featured_artist_for} field_talent_user_reference_users__field_data_field_featured_artist_for ON field_talent_user_reference_users.nid = field_talent_user_reference_users__field_data_field_featured_artist_for.entity_id AND field_talent_user_reference_users__field_data_field_featured_artist_for.field_featured_artist_for_tid = '$tid'
              WHERE (( (field_talent_user_reference_users.type IN  ('music_profile')) AND (field_talent_user_reference_users__field_data_field_music_engagement_types.field_music_engagement_types_tid = '$tid') AND (field_talent_user_reference_users__field_data_field_featured_artist_for.field_featured_artist_for_tid IS NULL ) )AND(( (field_talent_user_reference_users.title LIKE '%$search_full_name%') )OR( (field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value LIKE '%$search_full_name%') )))
              ORDER BY locate('$search_full_name', field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value) ASC, field_talent_user_reference_users__field_data_field_search_full_name.field_search_full_name_value ASC LIMIT 7";

    $results = db_query($query)->fetchAll();
    $i = 0;
    foreach ($results as $result) {
        $nid = $result->field_talent_user_reference_users_nid;
        $node = node_load($nid);
        $connect_id = $node->field_connect_id['und'][0]['value'];

        switch ($tid) {
            case $engagement_college_tid:
                $grid_desc = $node->field_college_selling_point['und'][0]['value'];
                break;
            case $engagement_corp_private_events_tid:
                $grid_desc = $node->field_corp_private_events_sellin['und'][0]['value'];
                break;
            case $engagement_fairs_tid:
                $grid_desc = $node->field_fairs_selling_point['und'][0]['value'];
                break;
            case $engagement_festivals_tid:
                $grid_desc = $node->field_festivals_selling_point['und'][0]['value'];
                break;
            case $engagement_podcasts_tid:
                $grid_desc = $node->field_podcasts_selling_point['und'][0]['value'];
                break;
        }
        if ($node->field_profile_status['und'][0]['value'] == "2") {
            $i++;
            if (!empty(trim($grid_desc))) {
                $title = l($node->title, "Music/add-to-featured-list/" . $nid);
                $output .= "<li class='add-artist talent-name' id='aa-$nid'>" . $title . "</li>";
            } else {
                $output .= "<li class='add-selling-point talent-name' id='as-$nid'>" . $node->field_display_name[LANGUAGE_NONE][0]['value'] . "</li>";
            }
        }
    }
    $output .= "</ul>";

    echo json_encode(array(
        'result' => $output,
        'count'  => $i,
    ));
    exit();
}

function music_talents_auto_suggest_ets()
{
    $sub_string_where = "";
    //    if(isset($_REQUEST['arg1']) && ($_REQUEST['arg1'] != "all")) {
    //       $sub_string = $_REQUEST['arg1'];
    //       $sub_string_where = "( (SUBSTRING(field_data_field_search_full_name.field_search_full_name_value, 1, 1) = '$sub_string') ) AND";
    //    }

    if (isset($_REQUEST['title']) && !empty($_REQUEST['title'])) {
        $search_full_name = $_REQUEST['title'];
    }

    if (isset($_SESSION['field_music_engagement_types_tid']) && !empty($_SESSION['field_music_engagement_types_tid'])) {
        $tid = $_SESSION['field_music_engagement_types_tid'];
    }

    $output = "<ul>";
    $query = "SELECT DISTINCT node.title AS node_title, node.nid AS nid, field_data_field_display_name.field_display_name_value AS field_data_field_display_name_field_display_name_val FROM {node} node
              INNER JOIN {field_data_field_profile_status} field_data_field_profile_status ON node.nid = field_data_field_profile_status.entity_id AND field_data_field_profile_status.entity_type = 'node'
              LEFT JOIN {field_data_field_display_name} field_data_field_display_name ON node.nid = field_data_field_display_name.entity_id AND field_data_field_display_name.entity_type = 'node'
              LEFT JOIN {field_data_field_music_engagement_types} field_data_field_music_engagement_types ON node.nid = field_data_field_music_engagement_types.entity_id AND field_data_field_music_engagement_types.field_music_engagement_types_tid = '$tid'
              WHERE (($sub_string_where (node.type IN  ('music_profile')) AND (field_data_field_profile_status.field_profile_status_value IN  ('2', '1')) )AND(field_data_field_display_name.field_display_name_value LIKE '%$search_full_name%' ))
              ORDER BY locate('$search_full_name', field_data_field_display_name_field_display_name_val) ASC, field_data_field_display_name_field_display_name_val ASC LIMIT 7";

    $results = db_query($query)->fetchAll();
    $i = 0;
    foreach ($results as $result) {
        $i++;
        $node = node_load($result->nid);
        $connect_id = $node->field_connect_id['und'][0]['value'];
        $output .= "<li class='music-talents' id='mp-$connect_id'>" . $node->field_display_name[LANGUAGE_NONE][0]['value'] . "</li>";
    }
    $output .= "</ul>";

    echo json_encode(array(
        'result' => $output,
        'count'  => $i,
    ));
    exit();
}

function music_talents_auto_suggest_rosters()
{
    $sub_string_where = "";

    if (isset($_REQUEST['title']) && !empty($_REQUEST['title'])) {
        $search_full_name = $_REQUEST['title'];
    }

    if (isset($_SESSION['field_music_roster_types_tid']) && !empty($_SESSION['field_music_roster_types_tid'])) {
        $tid = $_SESSION['field_music_roster_types_tid'];
    }

    $output = "<ul>";
    $query = "SELECT DISTINCT node.title AS node_title, node.nid AS nid, field_data_field_search_full_name.field_search_full_name_value AS field_data_field_search_full_name_field_search_full_name_val FROM {node} node
              INNER JOIN {field_data_field_profile_status} field_data_field_profile_status ON node.nid = field_data_field_profile_status.entity_id AND field_data_field_profile_status.entity_type = 'node'
              LEFT JOIN {field_data_field_search_full_name} field_data_field_search_full_name ON node.nid = field_data_field_search_full_name.entity_id AND field_data_field_search_full_name.entity_type = 'node'
              LEFT JOIN {field_data_field_music_roster_types} field_data_field_music_roster_types ON node.nid = field_data_field_music_roster_types.entity_id AND field_data_field_music_roster_types.field_music_roster_types_tid = '$tid'
              WHERE (($sub_string_where (node.type IN  ('music_profile')) AND (field_data_field_profile_status.field_profile_status_value IN  ('2', '1')) )AND(field_data_field_search_full_name.field_search_full_name_value LIKE '%$search_full_name%') AND ( (field_data_field_music_roster_types.field_music_roster_types_tid IS NULL ) OR (field_data_field_music_roster_types.field_music_roster_types_tid IS NULL ) ))
              ORDER BY locate('$search_full_name', field_data_field_search_full_name_field_search_full_name_val) ASC, field_data_field_search_full_name_field_search_full_name_val ASC LIMIT 7";

    $results = db_query($query)->fetchAll();
    $i = 0;
    foreach ($results as $result) {
        $i++;
        $node = node_load($result->nid);
        $connect_id = $node->field_connect_id['und'][0]['value'];
        $output .= "<li class='music-talents' id='mp-$connect_id'>" . $node->field_display_name[LANGUAGE_NONE][0]['value'] . "</li>";
    }
    $output .= "</ul>";

    echo json_encode(array(
        'result' => $output,
        'count'  => $i,
    ));
    exit();
}

function music_talents_auto_suggest()
{
    global $user;
    $profile_status = 2;
    if (isset($_REQUEST['title']) && !empty($_REQUEST['title'])) {
        $search_full_name = $_REQUEST['title'];
    }

    if (isset($_REQUEST['field_profile_status_value'])) {
        $profile_status = $_REQUEST['field_profile_status_value'];
    }

    $output = "<ul>";
    $count  = 0;
    $internal_users = false;
    if (in_array('agent', $user->roles) || in_array('super_admin', $user->roles) || in_array('music_admin', $user->roles) || in_array('music_roster_type_agent', $user->roles) || in_array('music_engagement_type_agent', $user->roles) || in_array('music_find_an_agent', $user->roles)) {
        $internal_users = true;
    }
    if (!$internal_users) {
        $query = "SELECT DISTINCT node.nid AS nid, field_data_field_display_name.field_display_name_value AS field_data_field_display_name_field_display_name_val FROM {node} node
              INNER JOIN {field_data_field_profile_status} field_data_field_profile_status ON node.nid = field_data_field_profile_status.entity_id AND field_data_field_profile_status.entity_type = 'node'
              LEFT JOIN {field_data_field_display_name} field_data_field_display_name ON node.nid = field_data_field_display_name.entity_id AND field_data_field_display_name.entity_type = 'node'
              WHERE (((node.type IN  ('music_profile')) AND (field_data_field_profile_status.field_profile_status_value = '$profile_status') )AND(( (node.title LIKE '%$search_full_name%') )OR((field_data_field_display_name.field_display_name_value LIKE '%$search_full_name%'))))
              ORDER BY locate('$search_full_name', field_data_field_display_name_field_display_name_val) ASC, field_data_field_display_name_field_display_name_val ASC LIMIT 7";
    } else {
        $query = "SELECT DISTINCT node.nid AS nid, field_data_field_display_name.field_display_name_value AS field_data_field_display_name_field_display_name_val FROM {node} node
              INNER JOIN {field_data_field_profile_status} field_data_field_profile_status ON node.nid = field_data_field_profile_status.entity_id AND field_data_field_profile_status.entity_type = 'node'
              LEFT JOIN {field_data_field_display_name} field_data_field_display_name ON node.nid = field_data_field_display_name.entity_id AND field_data_field_display_name.entity_type = 'node'
              WHERE (((node.type IN  ('music_profile')))AND(( (node.title LIKE '%$search_full_name%') )OR((field_data_field_display_name.field_display_name_value LIKE '%$search_full_name%'))))
              ORDER BY locate('$search_full_name', field_data_field_display_name_field_display_name_val) ASC, field_data_field_display_name_field_display_name_val ASC LIMIT 7";
    }

    //=====================testing==============
    $results = db_query($query)->fetchAll();
    $count = count($results);
    foreach ($results as $result) {
        $node = node_load($result->nid);
        $connect_id = $node->field_connect_id['und'][0]['value'];
        $alias = variable_get('mpid_' . $connect_id);
        $name = ($node->field_display_name[LANGUAGE_NONE][0]['value']) ? $node->field_display_name[LANGUAGE_NONE][0]['value'] : $node->title;
        if($_REQUEST['type']=="search"){

             $output .= "<li class='music-talents' id='mp-$connect_id' data-alias='mp-$alias'><a href='/Music/$alias?layout=grid&width=1230&height=100%&client_profile=true' rel='lightframe' class='popout-link'>" . $name ."</a></li>";

        }else{

             $output .= "<li class='music-talents' id='mp-$connect_id' data-alias='mp-$alias'>" . $name . "</li>";

        }


    }
    $output .= "</ul>";

    echo json_encode(array(
        'result' => $output,
        'count'  => $count,
    ));
    exit();
}

function music_custom_permission()
{
    return array(
        'administer music' => array(
            'title' => t('Administer Music'),
            'description' => t('Administer Music'),
        ),
        'manage music-profile content' => array(
            'title' => t('Manage music profile'),
            'description' => t('Manage music profile'),
        ),
        'manage music-profile engagement types' => array(
            'title' => t('Manage music profile engagement types'),
            'description' => t('Manage music profile engagement types'),
        ),
        'manage music-profile roster types' => array(
            'title' => t('Manage music profile roster types'),
            'description' => t('Manage music profile roster types'),
        ),
    );
}

/*
 * Implements hook_block_info().
 */
function music_custom_block_info()
{
    $blocks = array();
    $blocks['music_booking_inquiry_block'] = array(
        'info' => t('MUSIC BOOKING INQUIRY FOR FRONT PAGE'),
    );
    $blocks['music_dashboard_link'] = array(
        'info' => t('MUSIC DASHBOARD LINK'),
    );
    $blocks['music_board_back_link'] = array(
        'info' => t('MUSIC BOARD BACK LINK'),
    );
    $blocks['agent_regions_pdf'] = array(
        'info' => t('Agent regions PDF'),
    );
    return $blocks;
}



/**
 * Implements hook_block_configure().
 */
function music_custom_block_configure($delta = '')
{
    $form = array();
    switch ($delta) {
        case 'music_booking_inquiry_block':
            break;
        case 'music_dashboard_link':
            break;
        case 'music_board_back_link':
            break;
        case 'agent_regions_pdf':
            break;
    }
    return $form;
}

/**
 * Implements hook_block_save().
 */
function music_custom_block_save($delta = '', $edit = array())
{
    switch ($delta) {
        case 'music_booking_inquiry_block':
            break;
        case 'music_dashboard_link':
            break;
        case 'music_board_back_link':
            break;
        case 'agent_regions_pdf':
            break;
    }
}

/**
 * Implements hook_block_view().
 */
function music_custom_block_view($delta = '')
{
    $block = array();
    switch ($delta) {
        case 'music_booking_inquiry_block':
            $block['content'] = music_booking_inquiry_block_view();
            break;
        case 'music_dashboard_link':
            $block['content'] = music_dashboard_link_view();
            break;
        case 'music_board_back_link':
            $block['content'] = music_board_back_link_view();
            break;
        case 'agent_regions_pdf':
            $block['content'] = agent_regions_pdf_view();
            break;
    }

    return $block;
}

function music_booking_inquiry_block_view()
{
    //Adding jQuery for date picker starts
    drupal_add_css(drupal_get_path('module', 'music_custom') . "/datepicker/css/datepicker.css");
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/datepicker/js/datepicker.js");
    //Adding jQuery for date picker ends
    module_load_include('inc', 'node', 'node.pages');
    $node = new StdClass();
    $node->type = 'music_booking_inquiry';
    return drupal_render(drupal_get_form('music_booking_inquiry_node_form', $node));
}

function agent_regions_pdf_view()
{
    return drupal_get_form('agent_regions_pdf_form');
}

function agent_regions_pdf_form($form, $form_state)
{
    $form['#prefix'] = '<div id="my-form-wrapper-id">';
    $form['#suffix'] = '</div>';

    $form['map_image_content'] = array(
        '#type' => 'text_format',
        '#attributes' => array('class' => array('map-image-content')),
    );
    $form['create_pdf'] = array(
        '#type'       => 'submit',
        '#value'      => 'Create PDF',
        '#attributes' => array('class' => array('create-pdf')),
        '#ajax' => array(
            'callback' => 'agent_regions_pdf_form_submit',
            'effect'   => 'fade',
            'wrapper'  => 'my-form-wrapper-id',
            'event'    => 'click',
        ),
    );
    return $form;
}

function agent_regions_pdf_form_submit($form, &$form_state)
{
    $binary_data = $form_state['values']['map_image_content']['value'];
    $file = file_save_data(base64_decode($binary_data), 'public://' . time() . '.png');
    $file->status = 1;
    $fid = $file->fid;
    if ($fid != 0) {
        $cat_id = $_SESSION['field_music_category_tid'];
        $old_fid = variable_get("map_image_id_$cat_id", "");
        if (!empty($old_fid)) {
            $old_file = file_load($old_fid);
            file_delete($old_file);
        }
        variable_set("map_image_id_$cat_id", $fid);
    }
}


function music_dashboard_link_view()
{
    global $user, $active_tid, $base_url;
    $output = "";
    $business_unit = arg(0);
    if (user_is_logged_in()) {
        $output = "<div class='user-icon'><span class='icon-profile'></span></div>";

        $output .= "<ul class='dashboard-links'>";
        $links = "<li>" . l("Account Settings", "account-settings") . "</li>";

        if (is_array($user->roles) && (in_array('super_admin', $user->roles))) {
            $proto = (strpos($base_url, 'https') == FALSE) ? 'http' : 'https';
            $links  .= "<li>" . l("Dashboard (PA)", $proto . "://" . MUSIC_SITEURL . "/Music/all/talent") . "</li>";
            $links  .= "<li>" . l("Dashboard (TV)", $proto . "://" . TV_SITEURL . "/tv-scripted/agent-dashboard", array("query" => array("title" => "", "field_submission_type_tid" => $active_tid, "order" => "changed", "sort" => "desc"))) . "</li>";
        }
        if (is_array($user->roles) && (in_array('external_user_registration', $user->roles) || in_array('music_find_an_agent', $user->roles) || in_array('music_admin', $user->roles) || in_array('music_engagement_type_agent', $user->roles) || in_array('music_roster_type_agent', $user->roles)  || (in_array('agent', $user->roles) && $_SERVER['HTTP_HOST'] == MUSIC_SITEURL))) {
            $links  .= "<li>" . l("Dashboard", "Music/all/talent") . "</li>";
        }
        if (is_array($user->roles) && (in_array('tv_admin', $user->roles)  || (in_array('agent', $user->roles) && $_SERVER['HTTP_HOST'] == TV_SITEURL))) {
            $links  .= "<li>" . l("Dashboard", "tv-scripted/agent-dashboard", array("query" => array("title" => "", "field_submission_type_tid" => $active_tid, "order" => "changed", "sort" => "desc"))) . "</li>";
        }
        if (is_array($user->roles) && (in_array('authorised', $user->roles))) {
            $links  .= "<li>" . l("Dashboard", "tv-scripted/authorised-dashboard", array("query" => array("title" => "", "order" => "changed", "sort" => "desc"))) . "</li>";
        }
        if (is_array($user->roles) && (in_array('recipient', $user->roles))) {
            $links  .= "<li>" . l("Dashboard", "tv-scripted/recipient-dashboard", array("query" => array("title" => "", "order" => "changed", "sort" => "desc"))) . "</li>";
        }
        if (is_array($user->roles) && ((in_array('super_admin', $user->roles) || in_array('music_find_an_agent', $user->roles) || in_array('music_admin', $user->roles)) && ($business_unit == "Music" || $_SERVER['HTTP_HOST'] == MUSIC_SITEURL))) {
            $links .= "<li class='hidden-xs'>" . l("Manage Agent Regions", "Music/edit-agent-regions") . "</li>";
        }

        /*
    if( is_array($user->roles) && ((in_array('super_admin', $user->roles) || in_array('music_engagement_type_agent', $user->roles) || in_array('music_admin', $user->roles)) && ($business_unit == "Music" || $_SERVER['HTTP_HOST'] == MUSIC_SITEURL))){
        if(isset($_SESSION['field_music_engagement_types_tid'])) {
            $links .= "<li>".l("Manage Category Types", "Music/all/manage-engagement-type", array('query' => array('title' => "", 'field_music_engagement_types_tid' => $_SESSION['field_music_engagement_types_tid'], 'field_search_full_name_value' => "" )))."</li>";
        } else {
            $links .= "<li>".l("Manage Category Types", "Music/all/manage-engagement-type",array('query' => array( )))."</li>";
        }
    }
    if( is_array($user->roles) && ((in_array('super_admin', $user->roles) || in_array('music_roster_type_agent', $user->roles) || in_array('music_admin', $user->roles)) && ($business_unit == "Music" || $_SERVER['HTTP_HOST'] == MUSIC_SITEURL))){
        if(isset($_SESSION['field_music_roster_types_tid'])) {
          $links .= "<li>".l("Manage Rosters", "Music/all/manage-rosters", array('query' => array('title' => "", 'field_music_roster_types_tid' => $_SESSION['field_music_roster_types_tid'], 'field_search_full_name_value' => "" )))."</li>";
        } else {
          $links .= "<li>".l("Manage Rosters", "Music/all/manage-rosters")."</li>";
        }
    }
 */


        if (is_array($user->roles) && (in_array('super_admin', $user->roles))) {
            $links .= "<li>" . l("Manage Talent Accounts", "manage-talent-list") . "</li>";
        }
        if (is_array($user->roles) && (in_array('super_admin', $user->roles) || in_array('tv_admin', $user->roles) || (in_array('music_admin', $user->roles) && ($business_unit == "Music" || $_SERVER['HTTP_HOST'] == MUSIC_SITEURL)))) {
            $links .= "<li>" . l("Manage User Accounts", "manage-user-list") . "</li>";
        }
        if (is_array($user->roles) && ((in_array('super_admin', $user->roles) || in_array('music_admin', $user->roles)) && ($business_unit == "Music" || $_SERVER['HTTP_HOST'] == MUSIC_SITEURL))) {
            $links .= "<li>" . l("Music Bulk Import", "Music/xls/import") . "</li>";
        }
        if (is_array($user->roles) && (in_array('super_admin', $user->roles))) {
            $links .= "<li>" . l("Report Management", "music-report") . "</li>";
        }
        if (is_array($user->roles) && ((in_array('super_admin', $user->roles)) && ($business_unit == "Music" || $_SERVER['HTTP_HOST'] == MUSIC_SITEURL))) {
            $links .= "<li>" . l("Site Settings", "Music/site-settings") . "</li>";
        }

        $links .= "<li>" . l("Log Out", "user/logout") . "</li>";
        $output .= $links;
        $output .= "</ul>";
    } else {
        // $output  = "<div class='login-link register-link'>".l("Register", "Music/user/register/nojs", array('attributes' => array('class' => 'ctools-use-modal')))."</div>";
        $output .= "<div class='login-link'>" . l("Log in", "custom-user-login/nojs", array('query' => array('business_unit' => 'music'), 'attributes' => array('class' => 'ctools-use-modal music-login-link'))) . "</div>";
    }
    return $output;
}


function music_board_back_link_view()
{
    global $user;
    $connect_id = variable_get('cid_' . arg(1));
    $request_uri = $_SESSION['request_uri'];
    $url_path = parse_url($request_uri, PHP_URL_PATH);
    parse_str(parse_url($request_uri, PHP_URL_QUERY), $query_arr);
    unset($query_arr["page_count"]);
    unset($query_arr["profile_id"]);
    unset($query_arr["layout"]);

    $query_arr["page_count"] = $_GET['page_count'];
    $query_arr["layout"] = $_GET['layout'];
    $query_arr["profile_id"] = $connect_id;
    $query_arr["client_profile"] = $_GET['client_profile'];

    if (isset($query_arr))
        $href = $url_path . "?" . http_build_query($query_arr);

    if ($_SESSION['request_uri'] == "manage-talent-list") {
        $href = url("manage-talent-list");
    }

    if (isset($_GET['client_profile']) && !empty($_GET['client_profile'])) {
    $output .=  "<div class='back-button'><a class='profile-back-button' href='" . $href . "'><span class='icon-back'></span></a>";
    $output .=  "<a class='profile-back-button' href='" . $href . "'>Back</a>";
    }

    // $output .=  "<div class='back-button'><a class='profile-back-button'  target='_parent' href='#back_button'><span class='icon-back'></span></a>";
   // $output .=  "<a class='profile-back-button' href='#back_button'>Back</a>";
   // $output .=  "</div>";
    return $output;
}

function music_custom_theme()
{
    return array(
        'views_exposed_form__find_an_agent__edit_agent_regions' => array(
            'render element' => 'form',
            'template'       => 'music_edit_agent_regions',
            'path'           => drupal_get_path('module', 'music_custom') . "/templates",
        ),
        'views_exposed_form__find_an_agent__find_an_agent' => array(
            'render element' => 'form',
            'template'       => 'music_find_an_agent_page',
            'path'           => drupal_get_path('module', 'music_custom') . "/templates",
        ),
        'views_exposed_form__music_talent_board__music_talent_board_page' => array(
            'render element' => 'form',
            'template'       => 'music_talent_board_music_talent_board_page',
            'path'           => drupal_get_path('module', 'music_custom') . "/templates",
        ),
        'views_exposed_form__music_roster_management__music_manage_rosters' => array(
            'render element' => 'form',
            'template'       => 'music_manage_rosters',
            'path'           => drupal_get_path('module', 'music_custom') . "/templates",
        ),
        'views_exposed_form__music_engagement_type_management__music_manage_engagement_types' => array(
            'render element' => 'form',
            'template'       => 'music_manage_engagement_types',
            'path'           => drupal_get_path('module', 'music_custom') . "/templates",
        ),
        'music_profile' => array(
            'variables'      => array('talent' => NULL), //variable passed to theme after get in tpl.php
            'template'       => 'music-profile', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates',
        ),
        'music_profile_node_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'music-profile-node-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'music_custom_music_regions_node_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'music-custom-music-regions-node-form',
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'music_image_node_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'music-image-node-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'music_site_settings_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'music-site-settings-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'change_music_profile_pic_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'change-music-profile-pic-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'add_music_profile_rider_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'add-music-profile-rider-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'edit_music_profile_rider_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'edit-music-profile-rider-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'add_music_profile_gallery_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'add-music-profile-gallery-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'add_music_profile_admats_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'add-music-profile-admats-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'edit_music_profile_gallery_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'edit-music-profile-gallery-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'edit_music_profile_admats_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'edit-music-profile-admats-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        ),
        'music_booking_inquiry_node_form' => array(
            'render element' => 'form', //variable passed to theme after get in tpl.php
            'template'       => 'music-booking-inquiry-node-form', //template name defined in hook_theme
            'path'           => drupal_get_path('module', 'music_custom') . '/templates/form',
        )

    );
}

function music_custom_form_music_booking_inquiry_node_form_alter(&$form, &$form_state, $form_id)
{
    $form['field_budget_value'][LANGUAGE_NONE][0]['value']['#attributes']['class'][] = 'bi-budget';
    $form['field_budget_value'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = 'Amount';

    $form['actions']['submit']['#submit'][] = 'music_booking_inquiry_node_form_submit2';
    //$form['#validate'][]  = 'music_booking_inquiry_node_form_validate2';
}

function music_custom_date_combo_process_alter(&$element, &$form_state, $context)
{
    if ($element['#field_name'] == 'field_date_of_interest') {
        $element['#pre_render'][] = 'date_of_interest_alter';
    }
}

function date_of_interest_alter($element)
{
    unset($element['value']['date']['#description']);
    $element['value']['date']['#attributes']['placeholder'] = 'mm/dd/yyyy';
    return $element;
}

function music_booking_inquiry_node_form_validate2($form, $form_state)
{
    $flag = 0;
    if ($form_state['values']['op'] == "Save") {
        $phone_number_type = $form_state['values']['field_phone_number']['und'][0]['value'];
        $phone_number_value = $form_state['values']['field_phone_number_value']['und'][0]['value'];
        if ($phone_number_type == "united_states") {
            $strlen = strlen((int)$phone_number_value);
            if (empty($phone_number_value)) {
                $flag = 1;
                drupal_set_message("Phone number should not be empty.", "error");
                form_set_error('');
            } elseif (!preg_match('/^(?=.*[0-9])[-+()0-9]+$/', $phone_number_value)) {
                $flag = 1;
                drupal_set_message("Phone number should be Numeric.", "error");
            } elseif ($strlen != 10) {
                $flag = 1;
                drupal_set_message("Phone number should be of 10 digit.", "error");
            }
        } else {
            if (empty($phone_number_value)) {
                $flag = 1;
                drupal_set_message("Phone number should not be empty.", "error");
            }
        }
        if ($flag == 1) {
            form_set_error('');
        }
    }
}

function music_booking_inquiry_node_form_submit2($form, $form_state)
{
    global $base_url;

    if ($form_state['values']['op'] == "Save") {
        $post_data = "";
        $name = $form_state['values']['title'];
        $company = $form_state['values']['field_company']['und'][0]['value'];
        //$company = $form_state['values']['field_company']['und'][0]['value'];
        $phone_number_value = $form_state['values']['field_phone_number_intl']['und'][0]['value'];
        $email_id = $form_state['values']['field_email_id']['und'][0]['value'];
        $connect_id_retrive = variable_get('cid_' . arg(1));

        if (is_numeric(arg(1))) {

            $artist_name = $_SESSION['profile_name'];
            $artist_connect_id = arg(1);
        } elseif (isset($connect_id_retrive) && !empty($connect_id_retrive)) {
           // echo "<pre>"; echo 'Test elseef ';die;
            //$profile_name = '38 special';
            $artist_name = ($form_state['values']['field_search_agent']['und'][0]['value']) ? $form_state['values']['field_search_agent']['und'][0]['value'] : $_SESSION['profile_name'];
            //$artist_name = ($form_state['values']['field_test_artist']['und'][0]['value']) ? $form_state['values']['field_test_artist']['und'][0]['value'] : $profile_name;
           // $artist_name:$profile_name;
            $artist_connect_id = $connect_id_retrive;
              //echo "<pre>"; echo $artist_name; echo $artist_connect_id;die;
        } else {

            $artist_name = ($form_state['values']['field_search_agent']['und'][0]['value']) ? $form_state['values']['field_search_agent']['und'][0]['value'] : $_SESSION['profile_name'];
            $artist_connect_id = $form_state['values']['field_agent_id']['und'][0]['value'];
        }


        //  echo "<pre>";print_r($_SESSION['profile_name']);die;

        $categories = array();
        foreach ($form_state['values']['field_engagement_type']['und'] as $key => $value) {
            $val = $value['value'];
            switch ($val) {
                case 'college':
                    $categories[] = "College";
                    break;
                case 'corp_private':
                    $categories[] = "Corporate / Private Events";
                    break;
                case 'fairs':
                    $categories[] = "Fairs";
                    break;
                case 'festivals':
                    $categories[] = "Festivals";
                    break;
                case 'podcasts':
                    $categories[] = "Podcasts";
                    break;
                case 'other':
                    $categories[] = "Other ( " . $form_state['values']['field_other_category']['und'][0]['value'] . " )";
                    break;
            }
        }
        $categories = (!empty($categories)) ? implode(', ', $categories) : '--';
        $event_location = $form_state['values']['field_event_location']['und'][0]['value'];
        $event_type = array();
        foreach ($form_state['values']['field_event_type']['und'] as $key => $value) {
            $val = $value['value'];
            switch ($val) {
                case 'arena':
                    $event_type[] = "Arena";
                    break;
                case 'club':
                    $event_type[] = "Club";
                    break;
                case 'college':
                    $event_type[] = "College";
                    break;
                case 'theater':
                    $event_type[] = "Theater";
                    break;
            }
        }
        $event_type = (!empty($event_type)) ? implode(', ', $event_type) : '--';
        $budget_currency = $form_state['values']['field_budget']['und'][0]['value'];
        $budget_value = $form_state['values']['field_budget_value']['und'][0]['value'];
        $date_of_interest = $form_state['values']['field_date_of_interest']['und'][0]['value'];
        $notes = nl2br($form_state['values']['field_notes']['und'][0]['value']);
        /*     echo $artist_connect_id."kmkkcdskck".$connect_id_retrive;*/
        //echo "<pre>";print_r( $form_state['values']);die;

        //Email
        $servername = AZURE_HOST;
        $username = AZURE_USER;
        $password = AZURE_PASSWORD;
        $dbName = AZURE_DBNAME;
        $table      = "tablePHP";
        //$pd = new PDO('odbc:DRIVER=FreeTDS;SERVERNAME=mssql;DATABASE=' . $dbName, $username, $password);
        $pd = new PDO("odbc:mssql", $username, $password);

        if (!empty($artist_connect_id)) {
            $sql = 'SELECT distinct Email, Assoc.ClientId  FROM [dbo].[ClientAgentAssoc] as Assoc Inner join [dbo].[Agent] as Agent on Assoc.AgentId = Agent.ContactId where Agent.Active = 1 and Assoc.ClientId in (' . $artist_connect_id . ' )  and Agent.AgentDepartmentLUId in (13, 14, 16, 19)';
            $selling_point_agent_emails = array();
            foreach ($pd->query($sql) as $key => $row) {
                $selling_point_agent_emails[] = $row['Email'];
                //$selling_point_agent_emails[] = $key.'test@mailinator.com';
            }
            if (!empty($selling_point_agent_emails)) {
                $pointAgentEmails = implode(",", $selling_point_agent_emails);
            }
        }
        //$selling_point_agent_emails[] = 'test@mailinator.com';
        // echo "<pre>";print_r($pointAgentEmails);die;
        watchdog('Booking Enquiry', 'Form submitted' . $pointAgentEmails);

        //$email_address = 'AIMDevelopers@wmeentertainment.com';
        //$email_address = 'AIMDevelopers@mailinator.com';
        $style = 'justify';
        if (trim($notes) != '') {
            if (strlen($notes) < 50) {
                $style = 'right';
            }
        }

        if (!empty($pointAgentEmails)) {

             $body = '<!DOCTYPE HTML><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>WME</title></head><body style="margin:0; padding:0;"><table width="100%" border="0"><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="50" align="center" colspan="2">A new enquiry is raised by user. Please see below details. </td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>NAME : <strong></td><td align="right" >' . $name . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>COMPANY : <strong></td><td align="right" >' . $company . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>PHONE NUMBER : <strong></td><td align="right" >' . $phone_number_value . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>EMAIL ADDRESS : <strong></td><td align="right" >' . $email_id . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>ARTIST NAME : <strong></td><td align="right" >' . $artist_name . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>SENT TO : <strong></td><td align="right" >' . $pointAgentEmails . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>EVENT LOCATION : <strong></td><td align="right" >' . $event_location . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>CURRENCY  : <strong></td><td align="right" >' . str_replace('_', ' ', $budget_currency) . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>BUDGET : <strong></td><td align="right" >' . $budget_value . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>DATE(S) OF INTEREST : <strong></td><td align="right" >' . $date_of_interest . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>NOTES : <strong></td><td width="60%" align="' . $style . '" >' . $notes . '</td></tr></table></td></tr></table></body></html>';


        } else {

             $body = '<!DOCTYPE HTML><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>WME</title></head><body style="margin:0; padding:0;"><table width="100%" border="0"><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="50" align="center" colspan="2">A new enquiry is raised by user. Please see below details. </td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>NAME : <strong></td><td align="right" >' . $name . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>COMPANY : <strong></td><td align="right" >' . $company . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>PHONE NUMBER : <strong></td><td align="right" >' . $phone_number_value . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>EMAIL ADDRESS : <strong></td><td align="right" >' . $email_id . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>ARTIST NAME : <strong></td><td align="right" >' . $artist_name . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>EVENT LOCATION : <strong></td><td align="right" >' . $event_location . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>CURRENCY  : <strong></td><td align="right" >' . str_replace('_', ' ', $budget_currency) . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>BUDGET : <strong></td><td align="right" >' . $budget_value . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>DATE(S) OF INTEREST : <strong></td><td align="right" >' . $date_of_interest . '</td></tr></table></td></tr><tr><td height="100%" valign="middle"><table width="600" border="0" align="center" cellpadding="0" cellspacing="0"><tr><td height="20"><strong>NOTES : <strong></td><td width="60%" align="' . $style . '" >' . $notes . '</td></tr></table></td></tr></table></body></html>';

        }


        // $cc = 'pamusicupdates@wmeagency.com';
        $adminMail = 'pamusicupdates@wmeagency.com';
        $params = array(
            'subject' => t('Booking Enquiry Submission'),
            'body' => $body,
            'headers' => array(
                'Cc' => $adminMail,
            ),
        );

        $singleMailparams = array(
            'subject' => t('Booking Enquiry Submission'),
            'body' => $body,

        );

        //Email from Agent by NP:


        if ($base_url == "https://music.wmeagency.com") {
            //  drupal_mail("music_custom", "music_user_register", $email_address, language_default(), $params);
            if (!empty($pointAgentEmails)) {
                drupal_mail("music_custom", "music_user_register", $pointAgentEmails, language_default(), $params);
            } else {
                drupal_mail("music_custom", "music_user_register", $adminMail, language_default(), $singleMailparams);
            }
        } else {
             //echo "<pre>";print_r($singleMailparams);die;
             drupal_mail("music_custom", "music_user_register", $adminMail, language_default(), $singleMailparams);

        }


        //drupal_mail("music_custom", "music_user_register", $selling_point_agent_emails, language_default(), $params);
        //Email
        drupal_get_messages();
        if (trim($artist_name) == '') {
            drupal_set_message("Music booking inquiry has been created.");
        } else {
            drupal_set_message("Music booking inquiry for " . ucfirst($artist_name) . " has been created.");
        }
        $alias = arg(1);
        if ((arg(0) == "Music") && (arg(1) == "all") && (arg(2) == "talent")) {
            drupal_goto('Music/all/talent');
        } else if (isset($_REQUEST['layout'])) {
            drupal_goto('Music/' . $alias, array('query' => array("layout" => $_REQUEST['layout'])));
        } else if (!empty($alias) && ($alias != 'all')) {
            drupal_goto('Music/' . $alias);
        } else {
            drupal_goto('');
        }
    }
}

function music_custom_form_music_image_node_form_alter(&$form, &$form_state, $form_id)
{
    drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/custom.js");
    global $user, $base_url;
    $uid = arg(3);
    $talent = user_load($uid);
    $form['field_talent_user_reference']['und']['#default_value'] = $uid;
    $form['uid']['#value'] = $talent->uid;
    $form['author']['name']['#default_value'] = $talent->name;
    $form['title']['#default_value'] = "Image-" . $talent->uid;
    $form['title']['#type'] = "hidden";
    $form['actions']['delete']['#value'] = "Cancel";
    $form['actions']['submit']['#weight'] = 16;
    $form['actions']['submit']['#submit'][] = 'music_image_node_form_submit2';
    $form['#after_build'][] = 'music_image_node_form_after_build';
}

function music_image_node_form_submit2($form, $form_state)
{
    $uid = $form_state['values']['uid'];
    $pnid = $form_state['values']['nid'];
    $query  = "SELECT n.nid FROM node n INNER JOIN field_data_field_talent_user_reference ur ON n.nid = ur.entity_id WHERE n.type IN ('music_profile') AND n.status='1' AND ur.field_talent_user_reference_uid = $uid";
    $nid    = db_query($query)->fetchField();
    if (!empty($nid)) {
        $node   = node_load($nid);
        $image_order = $node->field_image_order[$node->language][0]['value'];
        $image_order = $image_order . "," . $pnid;
        $node->field_image_order[$node->language][0]['value'] = $image_order;
        node_save($node);
    }
}

function music_image_node_form_after_build($form, &$form_state)
{
    $form['field_music_image']['und'][0]['remove_button']['#value'] = "Change";
    return $form;
}

/**
 * Add Cancel button and CSS for Rider Modal
 */
function music_custom_form_views_form_riders_block_1_alter(&$form, &$form_state, $form_id)
{
    $count = count($form['#substitutions']['#value']);
    $form['actions']['submit']['#attributes']['class'] = array('btn-success modal-btn btn close-rider-modal');
    if ($count > 1) {
        $form['actions']['submit']['#prefix'] = '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions"><a id="manage-category-cancel" class="btn-cancel btn-success modal-btn btn btn btn-default close-rider-modal">Cancel</a>';
        $form['actions']['submit']['#suffix'] = '</div></div>';
    } else {
        $form['actions']['submit'] = array(
            '#prefix' => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions"><a id="manage-category-cancel" class="btn-cancel btn-success modal-btn btn btn btn-default close-rider-modal">Cancel</a><a id="custom-edit-submit" class="btn-success success-btn modal-btn btn btn btn-default close-rider-modal">Save</a></div></div>',
        );
    }
    return $form;
}

/**
 * Add Cancel button and CSS for Gallery Modal
 */
function music_custom_form_views_form_gallery_block_1_alter(&$form, &$form_state, $form_id)
{
    $count = count($form['#substitutions']['#value']);
    $form['actions']['submit']['#attributes']['class'] = array('btn-success modal-btn btn close-gallery-modal');
    if ($count > 1) {
        $form['actions']['submit']['#prefix'] = '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions"><a id="manage-category-cancel" class="btn-cancel btn-success modal-btn btn btn btn-default close-gallery-modal">Cancel</a>';
        $form['actions']['submit']['#suffix'] = '</div></div>';
    } else {
        $form['actions']['submit'] = array(
            '#prefix' => '<div class="modal-footer"><div class="form-group form-actions" id="edit-actions"><a id="manage-category-cancel" class="btn-cancel btn-success modal-btn btn btn btn-default close-gallery-modal">Cancel</a><a id="custom-edit-submit" class="btn-success success-btn modal-btn btn btn btn-default close-gallery-modal">Save</a></div></div>',
        );
    }
    return $form;
}

/**
 * Add Cancel button and CSS for Gallery Modal
 */
function music_custom_form_views_form_admats_block_1_alter(&$form, &$form_state, $form_id)
{
    $form['actions']['#prefix'] = "<div class='modal-footer'>";
    $form['actions']['cancel'] = array(
        '#type'   => 'submit',
        '#value'  => 'Cancel',
        '#ajax' => array(),
        '#weight'  => 49,
        '#submit' => array(),
        '#attributes' => array('class' => array('btn-cancel btn-success modal-btn btn close-gallery-modal')),
    );
    $form['actions']['submit']['#weight'] = 50;
    $form['actions']['submit']['#attributes']['class'] = array('btn-success modal-btn btn close-gallery-modal');
    $form['actions']['#suffix'] = '</div>';
    return $form;
}

function music_custom_form_alter(&$form, &$form_state, $form_id)
{
    global $user, $base_url, $engagement_college_tid, $engagement_corp_private_events_tid, $engagement_fairs_tid, $engagement_festivals_tid, $engagement_podcasts_tid;
    if ($form_id == "views_exposed_form") {
        if ($form['#id'] == "views-exposed-form-users-list-page-1") {
            $rids = array();
            foreach ($form['rid']['#options'] as $key => $value) {
                if ($value == "recipient") {
                    $value = "TV Scripted recipient";
                }
                if ($value == "agent") {
                    $value = "Bio Editor";
                }
                if ($value == "authorised") {
                    $value = "TV Scripted buyer";
                }
                if ($value == "external_user_registration") {
                    $value = "PA Buyer";
                }
                if ($value == "music_engagement_type_agent") {
                    $value = "PA Category Type Editor";
                }
                if ($value == "music_roster_type_agent") {
                    $value = "PA Roster Editor";
                }
                if ($value == "music_admin") {
                    $value = "PA Admin";
                }
                if ($value == "tv_admin") {
                    $value = "TV Scripted Admin";
                }
                if ($value == "music_find_an_agent") {
                    $value = "PA Find an Agent Editor";
                }
                if ($value == "super_admin") {
                    $value = "Super Admin";
                }
                $rids[$key] = str_replace("_", " ", $value);
            }
            asort($rids);
            $form['rid']['#options'] = $rids;
        } else if ($form['#id'] == "views-exposed-form-users-list-page-2") {
            $rids = array();
            foreach ($form['rid']['#options'] as $key => $value) {
                if ($value == "external_user_registration") {
                    $value = "external user";
                } else if ($value == "super_admin") {
                    $value = "site admin";
                }
                $rids[$key] = str_replace("_", " ", $value);
            }
            $form['rid']['#options'] = $rids;
        } else if ($form['#id'] == "views-exposed-form-music-talent-board-music-talent-board-page") {
            unset($_SESSION['profile_name']);
            if (isset($_SESSION['unwanted'])) {
                unset($_SESSION['unwanted']);
            } else {
                $_SESSION['request_uri'] = $_SERVER['REQUEST_URI'];
            }
            $music_engagement_types             = music_custom_get_taxonomy_list('music_engagement_types');
            $engagement_college_tid             = $music_engagement_types['engagement_college']['id'];
            $engagement_corp_private_events_tid = $music_engagement_types['engagement_corp_private_events']['id'];
            $engagement_fairs_tid               = $music_engagement_types['engagement_fairs']['id'];
            $engagement_festivals_tid           = $music_engagement_types['engagement_festivals']['id'];
            $engagement_podcasts_tid            = $music_engagement_types['engagement_podcasts']['id'];
            $back_to_top_button_text            = variable_get('back_to_top_button_text', 'Back to top');
            if (isset($_SESSION['layout'])) {
                drupal_add_js(array('layout' => $_SESSION['layout']), 'setting');
            }

            drupal_add_js(array('back_to_top_button_text' => $back_to_top_button_text), 'setting');
            drupal_add_js(array('base_url' => $base_url), 'setting');
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-talent-board.js");
            drupal_add_css(drupal_get_path('module', 'music_custom') . "/css/music-talent-board.css");
            if (!(is_array($user->roles) && (in_array('music_engagement_type_agent', $user->roles) || in_array('agent', $user->roles) || in_array('super_admin', $user->roles) || in_array('music_admin', $user->roles) || in_array('music_roster_type_agent', $user->roles) || in_array('music_find_an_agent', $user->roles)))) {
                unset($form['field_profile_status_value']['#options'][0]);
                unset($form['field_profile_status_value']['#options'][1]);
            }
            $form['title']['#attributes'] = array("class" => array("music-talent-search", "ctools-auto-submit-exclude"), "autocomplete" => "off", "placeholder" => "Search for artist or band");
        } else if ($form['#id'] == "views-exposed-form-music-roster-management-music-manage-rosters") {
            $_SESSION['request_uri'] = $_SERVER['REQUEST_URI'];
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-manage-rosters.js");
            drupal_add_css(drupal_get_path('module', 'music_custom') . "/css/music-manage-rosters.css");
            $form['title']['#attributes'] = array("class" => array("music-talent-search"), "autocomplete" => "off", "placeholder" => "Search for artist or band");
        } else if ($form['#id'] == "views-exposed-form-music-engagement-type-management-music-manage-engagement-types") {
            $_SESSION['request_uri'] = $_SERVER['REQUEST_URI'];
            $music_engagement_types             = music_custom_get_taxonomy_list('music_engagement_types');
            $engagement_college_tid             = $music_engagement_types['engagement_college']['id'];
            $engagement_corp_private_events_tid = $music_engagement_types['engagement_corp_private_events']['id'];
            $engagement_fairs_tid               = $music_engagement_types['engagement_fairs']['id'];
            $engagement_festivals_tid           = $music_engagement_types['engagement_festivals']['id'];
            $engagement_podcasts_tid            = $music_engagement_types['engagement_podcasts']['id'];
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-manage-engagement-types.js");
            drupal_add_css(drupal_get_path('module', 'music_custom') . "/css/music-manage-engagement-types.css");
            $form['title']['#attributes'] = array("class" => array("music-talent-search"), "autocomplete" => "off", "placeholder" => "Search for artist or band");
        } else if ($form['#id'] == "views-exposed-form-find-an-agent-find-an-agent") {
            drupal_add_js(array('login' => "anonymous"), 'setting');
            if ($_SESSION['screen_width'] <= 767) {
                drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/simplemaps/mapdata-mobile.js");
            } else {
                drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/simplemaps/mapdata.js");
            }
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/simplemaps/worldmap.js");
            if (is_array($user->roles) && (in_array('super_admin', $user->roles) || in_array('agent', $user->roles) || in_array('music_admin', $user->roles))) {
                drupal_add_js(array('login' => "super_admin"), 'setting');
            } else {
                drupal_add_js(array('login' => "anonymous"), 'setting');
            }
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-find-an-agent.js");
        } else if ($form['#id'] == "views-exposed-form-find-an-agent-edit-agent-regions") {
            if (isset($_REQUEST['field_music_category_tid'])) {
                //Query for fetching states color starts here
                $cat_id = $_REQUEST['field_music_category_tid'];
                $query = "SELECT n.nid, fmzz.field_music_zoom_zones_tid, frc.field_region_color_rgb FROM node n INNER JOIN field_data_field_music_category fmc ON n.nid=fmc.entity_id INNER JOIN field_data_field_music_zoom_zones fmzz ON n.nid=fmzz.entity_id INNER JOIN field_data_field_region_color frc ON n.nid=frc.entity_id WHERE n.type='music_regions' AND fmc.field_music_category_tid = '$cat_id'";
                $results = db_query($query)->fetchAll();
                $colors_arr = array();
                $region_name = array();
                $agents      = array();
                $region_id   = array();
                $hover_color_arr = array("#0C5587" => "#1467A0", "#1C739D" => "#2788B7", "#0FBCBC" => "#19D4D4", "#90D591" => "#A1E7A2", "#FFC45C" => "#FED07E", "#F28258" => "#F69773", "#E25656" => "#FB6767", "#EA5E82" => "#FF789B", "#C13377" => "#E13B8B", "#73519B" => "#865FB5", "#829AD8" => "#A3BAF7", "#1A6EBA" => "#1F7CD0", "#FFFF9A" => "#FFFF9A", "#198b19" => "#198b19", "#666600" => "#666600", "#FFC0EB" => "#FFC0EB", "#FFFF9A" => "#FFFF9A", "#AED4F5" => "#AED4F5", "#660000" => "#660000", "#9AA899" => "#9AA899", "#1E152A" => "#1E152A", "#D9ACF7" => "#D9ACF7", "#FF007E" => "#FF007E", "#3D8AD0" => "#3D8AD0", "#9D9D5F" => "#9D9D5F", "#667B7C" => "#667B7C");
                foreach ($results as $color) {
                    $colors_arr[$color->field_music_zoom_zones_tid] = $color->field_region_color_rgb;
                    $nid  = $color->nid;
                    $node = node_load($nid);
                    $agent_details = "";
                    $group_email = "";
                    // $group_email_details = "";
                    foreach ($node->field_music_agents['und'] as $agent_id) {
                        $agent = node_load($agent_id['nid']);
                        $phone = $agent->field_phone_no['und'][0]['value'];
                        $phone = ($phone == '+1') ? '' : $phone;
                        $email = $agent->field_email_id['und'][0]['value'];
                        $agent_details .= "<div class='each-agent'>";
                        $agent_details .= "<div class='each-name'>$agent->title</div>";
                        $agent_details .= "<div class='agent-phone'>$phone</div>";
                        $agent_details .= "<div class='agent-email'>$email</div>";
                        $agent_details .= "</div>";
                    }

                    if (!empty($node->field_group_email['und'][0]['value'])) {

                        $group_email = $node->field_group_email['und'][0]['value'];

                        if(!empty($group_email))
                        {
                            $group_email_details[$nid] = $group_email;
                        }
                    }

                    $agents[$color->field_music_zoom_zones_tid] = $agent_details;
                    $region_name[$color->field_music_zoom_zones_tid] = $node->title;
                    $region_id[$color->field_music_zoom_zones_tid] = $node->nid;
                }
                //Query for fetching states color ends here
                $simplemaps_worldmap_mapdata = array();
                $main_settings = array();
                //General settings
                $main_settings['width'] = 'responsive';
                $main_settings['background_color'] = '#FFFFFF';
                $main_settings['background_transparent'] = 'yes';
                $main_settings['border_color'] = '#D4DDDD';
                $main_settings['popups'] = 'on_hover';
                //State defaults
                $main_settings['state_description'] = 'State description';
                $main_settings['state_color'] = '#F8FAFA';
                $main_settings['state_hover_color'] = '#F8FAFA';
                $main_settings['border_size'] = .5;
                $main_settings['all_states_inactive'] = 'yes';
                $main_settings['all_states_zoomable'] = 'no';
                //Labels
                $main_settings['label_color'] = '#666666';
                $main_settings['label_hover_color'] = '#666666';
                $main_settings['label_size'] = 12;
                $main_settings['label_font'] = 'Arial';
                $main_settings['hide_labels'] = 'no';
                //Zoom settings
                $main_settings['initial_zoom'] = -1;
                $main_settings['initial_zoom_solo'] = 'yes';
                $main_settings['zoom'] = 'no';
                $main_settings['manual_zoom'] = 'yes';
                $main_settings['back_image'] = 'no';
                $main_settings['initial_back'] = 'no';
                $main_settings['region_opacity'] = 1;
                $main_settings['region_hover_opacity'] = 1;
                $main_settings['zoom_out_incrementally'] = 'yes';
                $main_settings['zoom_percentage'] = .99;
                $main_settings['zoom_time'] = .5;
                //Popup settings
                $main_settings['popup_color'] = 'white';
                $main_settings['popup_opacity'] = 1;
                $main_settings['popup_shadow'] = 0;
                $main_settings['popup_corners'] = 5;
                $main_settings['popup_font'] = '12px/1.5 Verdana, Arial, Helvetica, sans-serif';
                $main_settings['popup_nocss'] = 'no';
                //Advanced settings
                $main_settings['div'] = 'full-width-map';
                $main_settings['auto_load'] = 'yes';
                $main_settings['url_new_tab'] = 'no';
                $main_settings['images_directory'] = 'default';
                $main_settings['fade_time'] = .1;
                $main_settings['link_text'] = '';
                //State specific settings
                $state_specific = array();
                $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
                $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
                $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
                foreach ($zoom_zones as $zoom_zone) {
                    $state_details = array();
                    $key = $zoom_zone->field_key['und'][0]['value'];
                    if (!in_array($key, $exclude_zoom_zones)) {
                        if (!empty($colors_arr[$zoom_zone->tid])) {
                            $color = $colors_arr[$zoom_zone->tid];
                            $state_details['color'] = $color;
                            $state_details['hover_color'] = $hover_color_arr[$color];
                            $state_details['inactive'] = "no";
                            $nid = $region_id[$zoom_zone->tid];
                            $state_details['url'] = "javascript:edit_region($nid)";
                            $state_details['name'] = $region_name[$zoom_zone->tid];
                            $state_details['description'] = "<div class='map-popup-content'><div class='state-name'>$zoom_zone->name</div>" . $agents[$zoom_zone->tid] ."<div class='each-agent'><div class='group-email agent-email'>".$group_email_details[$nid]."</div></div>" . "<div class='click-to-modify'>Click to modify</div></div>";

                        } else {
                            $state_details['color'] = "#CCCCCC";
                            $state_details['hover_color'] = "#96A7AA";
                            $state_details['url'] = "javascript:add_to_selection($zoom_zone->tid, '$key')";
                            $state_details['name'] = $region_name[$zoom_zone->tid];
                            $state_details['description'] = "<div class='click-to-modify'>Add to selection</div>";
                        }
                        $state_specific[$key] = $state_details;
                    }
                }
                //Regions specific settings
                $regions = array();
                $i = -1;
                foreach ($zoom_zones as $zoom_zone) {
                    $depth = $zoom_zone->depth;
                    $key = $zoom_zone->field_key['und'][0]['value'];
                    if (in_array($key, $exclude_zoom_zones)) {
                        $i++;
                        $regions[$i]['name'] = $zoom_zone->name;
                        $regions[$i]['description'] = "<div class='click-to-modify'>Click to view agents</div>";
                        $states = array();
                    } else {
                        $states[] = $key;
                        $regions[$i]['states'] = $states;
                    }
                }

                $simplemaps_worldmap_mapdata['main_settings'] = $main_settings;
                $simplemaps_worldmap_mapdata['state_specific'] = $state_specific;
                //$simplemaps_worldmap_mapdata['regions'] = $regions;
                $simplemaps_worldmap_mapdata = json_encode($simplemaps_worldmap_mapdata);
                drupal_add_js('var simplemaps_worldmap_mapdata = ' . $simplemaps_worldmap_mapdata, 'inline');
                drupal_add_js('jQuery(document).ready(function () { jQuery("#toggle-' . $cat_id . '").removeClass("hide"); });', 'inline');
            } else {
                drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/simplemaps/initial-mapdata.js");
            }
            if (is_array($user->roles) && (in_array('super_admin', $user->roles) || in_array('agent', $user->roles) || in_array('music_admin', $user->roles))) {
                drupal_add_js(array('login' => "super_admin"), 'setting');
            } else {
                drupal_add_js(array('login' => "anonymous"), 'setting');
            }
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/simplemaps/worldmap.js");
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/dragsort.js");
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/pablo.js");
            drupal_add_js(drupal_get_path('module', 'music_custom') . "/js/music-edit-agent-regions.js");
        }
        /* Reporting module */
        if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'music_report') {
            $params = getPageQueryParameters();
            if (!empty($params['field_profile_status_value'])) {
                if (in_array('1', $params['field_profile_status_value'])) {
                    drupal_add_js("jQuery(document).ready(function(){ jQuery('#edit-field-profile-status-value-wrapper .sel-filters').html('All')})", 'inline');
                } else {
                    drupal_add_js("jQuery(document).ready(function(){var values='';jQuery('#edit-field-profile-status-value input.form-checkbox:checked').each(function() {
  values = values + jQuery(this).parent().text()+', ';
});if(values!=''){ values = values.replace(/,\s*$/, '');} jQuery('#edit-field-profile-status-value-wrapper .sel-filters').html(values);})", 'inline');
                }
            }
            $form['field_profile_status_value']['#prefix'] = '<div class="multiselect checkbox"><div class="selectBox profilebox" onclick="showStatusCheckboxes()"><span class="sel-filters">-Select-</span>
			  <div class="overSelect"></div>
			</div>';
            $form['field_profile_status_value']['#suffix'] = '</div>';
            /* $form['rosters'] = array(
			  '#type' =>'checkbox',
			  '#title' => t('Show Rosters'),
			  '#disabled'=>TRUE
			);
			$form['category'] = array(
			  '#type' =>'checkbox',
			  '#title' => t('Show Category'),
			  '#disabled'=>TRUE
			); */
            if (isset($params['field_profile_status_value'])) {
                $form['rosters']['#disabled'] = FALSE;
                $form['category']['#disabled'] = FALSE;
            }
            $form = getGroupByStatusField($form);
        }
    }
}
/*
 * Implementation of hook_views_pre_execute().
 */
function music_custom_views_pre_execute(&$view)
{
    if ($view->name == 'music_report') {
        $param = getPageQueryParameters();
        if (isset($param['rosters']) && $param['rosters'] == 1) {
            $view->field["field_music_roster_types"]->options['exclude'] = 0;
        }
        if (isset($param['category']) && $param['category'] == 1) {
            $view->field["field_music_engagement_types"]->options['exclude'] = 0;
        }
    }
    if ($view->name == 'category_report') {
        $param = getPageQueryParameters();
        if (isset($param['includepoints']) && $param['includepoints'] == 1) {
            $view->field["field_college_selling_point"]->options['exclude'] = 0;
            $view->field["field_corp_private_events_sellin"]->options['exclude'] = 0;
            $view->field["field_fairs_selling_point"]->options['exclude'] = 0;
            $view->field["field_festivals_selling_point"]->options['exclude'] = 0;
            $view->field["field_podcasts_selling_point"]->options['exclude'] = 0;
            $view->field["field_college_sp_expires"]->options['exclude'] = 0;
            $view->field["field_corp_pvt_events_sp_expires"]->options['exclude'] = 0;
            $view->field["field_fairs_sp_expires"]->options['exclude'] = 0;
            $view->field["field_festivals_sp_expires"]->options['exclude'] = 0;
            $view->field["field_podcasts_sp_expires"]->options['exclude'] = 0;
        }
    }
}

/*
 * Implementation of hook_views_pre_build().
 */
function music_custom_views_pre_build(&$view)
{
    // Make sure this is only for the specific view you want to modified
    $viewNames = array('rosters_report', 'music_report', 'category_report');
    if (in_array($view->name, $viewNames)) {
        $param = getPageQueryParameters();
        if ($view->name == "music_report") {
            if ((isset($param['rosters']) && $param['rosters'] == 1) || (isset($param['category']) && $param['category'] == 1)) {
                $view->items_per_page = 10;
            }
        }
        if ($view->name == "category_report") {
            if (isset($param['includepoints']) && $param['includepoints'] == 1) {
                $view->items_per_page = 7;
            }
        }
        if (isset($param['status']) && $param['status'] == 1) {
            $custom_field = 'field_profile_status';
            $view->display[$view->current_display]->handler->options["style_options"]["grouping"] = $custom_field;
            // $view->display[$view->current_display]->handler->options["style_options"]["grouping"]=array('field'=>'','rendered'=>1,'rendered_strip'=>0);
        }
    }
}

function getPageQueryParameters()
{
    $parameters = drupal_get_query_parameters();
    return $parameters;
}

function getGroupByStatusField($form)
{
    $form['status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Group by status'),
        '#disabled' => true
    );
    $params = getPageQueryParameters();
    if (!empty($params['field_profile_status_value']) && ((in_array(1, $params['field_profile_status_value'])) || (in_array('all', $params['field_profile_status_value'])) || (count($params['field_profile_status_value']) > 1))) {
        $form['status']['#disabled'] = false;
    }
    return $form;
}
/* End Reporting module */
function music_custom_form_music_profile_node_form_alter(&$form, &$form_state, $form_id)
{
    global $user, $base_url;

    if (in_array('administrator', $user->roles)) {
        unset($form['#theme'][0]);
    }
    $arg2 = arg(2);
    $uid = arg(3);
    $nid = arg(4);
    drupal_add_js(array('music_custom' => array('section' => $arg2),), 'setting');
    $i = 0;
    unset($form['field_upcoming_releases']['und']['#title']);
    foreach ($form['field_upcoming_releases']['und'] as $val => $upcoming_releases) {
        if (isset($form['field_upcoming_releases']['und'][$val]['field_release_title']['und']['#title'])) {
            $form['field_upcoming_releases']['und'][$val]['field_release_title']['und'][0]['value']['#attributes'] = array("class" => array("upcoming-release-title"));
            $form['field_upcoming_releases']['und'][$val]['und'][0]['#prefix'] = "<div class='field-group-outer-wrapper'>";
            $form['field_upcoming_releases']['und'][$val]['remove_button']['#value'] = "DELETE";
            $form['field_upcoming_releases']['und'][$val]['remove_button']['#attributes'] = array('class' => array("remove-btn"));
        }
    }

    $i = 0;
    unset($form['field_riders']['und']['#title']);
    foreach ($form['field_riders']['und'] as $val => $script) {
        if (isset($form['field_riders']['und'][$val]['field_rider_title']['und']['#title'])) {
            $form['field_riders']['und'][$val]['und'][0]['#prefix'] = "<div class='field-group-outer-wrapper'>";
            $form['field_riders']['und'][$val]['field_rider_title']['und'][0]['value']['#attributes'] = array("class" => array("rider-title"));
            $form['field_riders']['und'][$val]['remove_button']['#value'] = "DELETE";
            $form['field_riders']['und'][$val]['field_riders_file']['und'][0]['#title'] = "";
            if ($form['field_riders']['und'][$val]['field_riders_file']['und'][0]['#default_value']['fid'] == 0) {
                $form['field_riders']['und'][$val]['field_riders_file']['und'][0]['value']['#prefix'] = "<div class='browse-script-btn'>Choose file</div>";
            }
            $form['field_riders']['und'][$val]['remove_button']['#attributes'] = array('class' => array("remove-btn"));
        }
    }

    $expiry_date = date('Y-m-d', strtotime("+" . variable_get('sellingpoint_default_expiry_date', 90) . " day"));

    if (empty($form['field_college_sp_expires']['und'][0]['#default_value']['value'])) {
        $form['field_college_sp_expires']['und'][0]['#default_value']['value'] =  $expiry_date;
    }

    if (empty($form['field_corp_pvt_events_sp_expires']['und'][0]['#default_value']['value'])) {
        $form['field_corp_pvt_events_sp_expires']['und'][0]['#default_value']['value'] =  $expiry_date;
    }

    if (empty($form['field_fairs_sp_expires']['und'][0]['#default_value']['value'])) {
        $form['field_fairs_sp_expires']['und'][0]['#default_value']['value'] =  $expiry_date;
    }

    if (empty($form['field_festivals_sp_expires']['und'][0]['#default_value']['value'])) {
        $form['field_festivals_sp_expires']['und'][0]['#default_value']['value'] =  $expiry_date;
    }

    if (empty($form['field_podcasts_sp_expires']['und'][0]['#default_value']['value'])) {
        $form['field_podcasts_sp_expires']['und'][0]['#default_value']['value'] =  $expiry_date;
    }
    if (isset($form['field_website']['und'][0])) {
        $form['field_website']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="wme-WME-www"></p>';
        $form['field_website']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_website']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_manual_facebook_id']['und'][0])) {
        $form['field_manual_facebook_id']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-Facebook"><span>facebook.com/</span></p>';
        $form['field_manual_facebook_id']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_manual_facebook_id']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_spotify_id']['und'][0])) {
        $form['field_spotify_id']['und'][0]['value']['#field_prefix'] =  "<a href='#' data-toggle='tooltip' title='Google search \"artist name on spotify\". Look for search result link such as https://open.spotify.com/artist/.... Copy and paste entire text string after https://open.spotify.com/'><img class='custom-tooltip' src='{$base_url}/sites/all/themes/talento_theme/images/tooltip-icon.png'/></a><div class='field-outer each-link'><p class='icon-Spotify'><span>open.spotify.com/artist/</span></p>";
        $form['field_spotify_id']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_spotify_id']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_instagram_url']['und'][0])) {
        $form['field_instagram_url']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-Instagram"><span>instagram.com/</span></p>';
        $form['field_instagram_url']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_instagram_url']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_manual_twitter_id']['und'][0])) {
        $form['field_manual_twitter_id']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-Twitter"><span>twitter.com/</span></p>';
        $form['field_manual_twitter_id']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_manual_twitter_id']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_youtube_url']['und'][0])) {
        $form['field_youtube_url']['und'][0]['value']['#field_prefix'] =  "<a href='#' data-toggle='tooltip' title='Google search \"artist name on youtube\". Look for search result link such as https://www.youtube.com/channel/.... Copy and paste entire text string after channel/. If search results display only https://www.youtube.com/user/.... Open user profile and select desired channel. Copy and paste entire text string after channel/'><img class='custom-tooltip' src='{$base_url}/sites/all/themes/talento_theme/images/tooltip-icon.png'/></a><div class='field-outer each-link'><p class='icon-Youtube'><span>youtube.com/</span></p>";
        $form['field_youtube_url']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_youtube_url']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_wikipedia_url']['und'][0])) {
        $form['field_wikipedia_url']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-Wikipedia"><span>wikipedia.org/wiki/</span></p>';
        $form['field_wikipedia_url']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_wikipedia_url']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_soundcloud_url']['und'][0])) {
        $form['field_soundcloud_url']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-Soundcloud"><span>soundcloud.com/</span></p>';
        $form['field_soundcloud_url']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_soundcloud_url']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_apple_music_id']['und'][0])) {
        $form['field_apple_music_id']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-Apple"><span>music.apple.com/</span></p>';
        $form['field_apple_music_id']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_apple_music_id']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_allmusic_com_id']['und'][0])) {
        $form['field_allmusic_com_id']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-All-Music"><span>allmusic.com/artist/</span></p>';
        $form['field_allmusic_com_id']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_allmusic_com_id']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    if (isset($form['field_tiktok']['und'][0])) {
        $form['field_tiktok']['und'][0]['value']['#field_prefix'] =  '<div class="field-outer each-link"><p class="icon-tiktok"><span>tiktok.com/</span></p>';
        $form['field_tiktok']['und'][0]['value']['#field_suffix'] =  '</div>';
        $form['field_tiktok']['und'][0]['value']['#attributes'] = array("class" => array(""));
    }
    $form['actions']['cancel'] = array(
        '#markup'  => '<div class="btn-cancel btn-success modal-btn btn btn btn-default form-submit">Cancel</div>',
        '#access' => TRUE,
        '#weight' => 4,
    );

    $form['actions']['submit']['#submit'][] = 'music_profile_node_form_submit2';
}

function music_profile_node_form_submit2($form, &$form_state)
{
    if ($form_state['values']['op'] == "Save") {
        $connect_id = $form_state['values']['field_connect_id']['und'][0]['value'];
        $node = node_load($form_state['values']['nid']);
        if ($node->field_profile_status['und'][0]['value'] == 1) {
            $node->field_featured_artist_for['und'] = array();
        }
        $unwanted_char = array('Å ' => 'S', 'Å¡' => 's', 'Å½' => 'Z', 'Å¾' => 'z', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'C', 'Ã' => 'E', 'Ã' => 'E', 'Ã' => 'E', 'Ã' => 'E', 'Ã' => 'I', 'Ã' => 'I', 'Ã' => 'I', 'Ã' => 'I', 'Ã' => 'N', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'U', 'Ã' => 'U', 'Ã' => 'U', 'Ã' => 'U', 'Ã' => 'Y', 'Ã' => 'B', 'Ã' => 'Ss', 'Ã ' => 'a', 'Ã¡' => 'a', 'Ã¢' => 'a', 'Ã£' => 'a', 'Ã¤' => 'a', 'Ã¥' => 'a', 'Ã¦' => 'a', 'Ã§' => 'c', 'Ã¨' => 'e', 'Ã©' => 'e', 'Ãª' => 'e', 'Ã«' => 'e', 'Ã¬' => 'i', 'Ã­' => 'i', 'Ã®' => 'i', 'Ã¯' => 'i', 'Ã°' => 'o', 'Ã±' => 'n', 'Ã²' => 'o', 'Ã³' => 'o', 'Ã´' => 'o', 'Ãµ' => 'o', 'Ã¶' => 'o', 'Ã¸' => 'o', 'Ã¹' => 'u', 'Ãº' => 'u', 'Ã»' => 'u', 'Ã½' => 'y', 'Ã¾' => 'b', 'Ã¿' => 'y', '.' => '', '?' => 'Q', '$' => 's');
        if (!empty($node->field_display_nick_name) && $node->field_display_nick_name[LANGUAGE_NONE][0]['value'] == '1' && !empty($node->field_nick_name) && $node->field_nick_name[LANGUAGE_NONE][0]['value'] != '') {
            $node->field_display_name[LANGUAGE_NONE][0]['value'] = $node->field_nick_name[LANGUAGE_NONE][0]['value'];
            $nick_name = ucwords($node->field_nick_name[LANGUAGE_NONE][0]['value']);
            if (substr(trim($nick_name), 0, 4) == "The " || substr(trim($nick_name), 0, 4) == "the ") {
                $nick_name = substr($nick_name, 4, strlen(trim($nick_name)));
            }
            $nick_name = strtr($nick_name, $unwanted_char);
            if (is_numeric($nick_name[0]) || preg_match('/[\'^!Â£$%&*()}{@#~?><>,|=_+Â¬-]/', $nick_name[0])) {
                $nick_name[0] = '#';
            } else {
                $nick_name = ucfirst($nick_name);
            }
            $node->field_search_full_name[LANGUAGE_NONE][0]['value'] = $nick_name;
        } else {
            $name = $node->title;
            $node->field_display_name[LANGUAGE_NONE][0]['value'] = $name;
            if (substr(trim($name), 0, 4) == "The " || substr(trim($name), 0, 4) == "the ") {
                $name = substr($name, 4, strlen(trim($name)));
            }
            $name = strtr($name, $unwanted_char);
            if (is_numeric($name[0]) || preg_match('/[\'^!Â£$%&*()}{@#~?><>,|=_+Â¬-]/', $name[0])) {
                $name[0] = '#';
            } else {
                $name = ucfirst($name);
            }
            $node->field_search_full_name[LANGUAGE_NONE][0]['value'] = $name;
        }
        // echo "<pre>";print_r($node);die;
        node_save($node);
        if (isset($_REQUEST['layout'])) {
            drupal_goto('Music/' . variable_get('mpid_' . $connect_id), array('query' => array("layout" => $_REQUEST['layout'])));
        } else {
            drupal_goto('Music/' . variable_get('mpid_' . $connect_id));
        }
    }
}

function music_fliters_edit($js)
{
    if (!$js) {
        return "Javascript required";
    }
    ctools_include('modal');
    ctools_include('ajax');

    $uid = arg(3);
    $nid = arg(4);
    $connect_id = arg(5);

    $form_state = array(
        'title' => t('Filters'),
        'ajax'  => TRUE,
        'uid'   => $nid
    );

    $node = node_load($nid);
    $form_state['build_info']['args'] = array($node);
    $output = ctools_modal_form_wrapper('music_profile_node_form', $form_state);

    if (!empty($form_state['executed'])) {
        $output = array();
        drupal_get_messages();
        drupal_set_message("Filter section has been updated successfully.");
        $output[] = ctools_modal_command_dismiss(); //Close modal automatically
        $output[] = ctools_ajax_command_redirect('Music/' . variable_get('mpid_' . $connect_id));
    }
    print ajax_render($output);
    exit;
}


function music_custom_get_taxonomy_list($vacabulary)
{
    $vocabulary = taxonomy_vocabulary_machine_name_load($vacabulary);
    $result = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    foreach ($result as $term) {
        $key = $term->field_key['und'][0]['value'];
        $terms[$key]['id'] = $term->tid;
    }
    return $terms;
}


// Alteration of views exposed form for Talent board list ends

function music_custom_views_query_alter(&$view, &$query)
{
    // (Example assuming a view with an exposed filter on node title.)
    // If the input for the title filter is a positive integer, filter against
    // node ID instead of node title.
    if ($view->name == 'users_list' && $view->current_display == "page_1") {
        $roles = array('agent' => 9, 'recipient' => 10, 'tv_buyer' => 11, 'super_admin' => 12, 'engagement_type' => 13, 'roster' => 14,/*'pa_buyer'=>15,*/ 'pa_admin' => 17, 'tv_admin' => 18, 'pa_find_an_agent' => 19);

        foreach ($query->where as $val1 => &$condition_group) {
            $rid = isset($_REQUEST['rid']) ? $_REQUEST['rid'] : false;
            $main_role = isset($_REQUEST['main-role']) ? $_REQUEST['main-role'] : false;
            if ($main_role == 'internal_users' && $rid == 'All') {
                foreach ($condition_group['conditions'] as $key => $cd) {
                    if ($cd['field'] == 'users_roles.rid') {
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['agent'], 'numeric' => 1);
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['super_admin'], 'numeric' => 1);
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['engagement_type'], 'numeric' => 1);
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['roster'], 'numeric' => 1);
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['pa_admin'], 'numeric' => 1);
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['tv_admin'], 'numeric' => 1);
                        $query->table_queue['users_roles']['join']->extra[] = array('field' => rid, 'value' => $roles['pa_find_an_agent'], 'numeric' => 1);
                        unset($query->where[$val1]['conditions'][$key]);
                        $c = db_or()->condition('users_roles.rid', $roles['agent'], '=')->condition('users_roles.rid', $roles['super_admin'], '=')->condition('users_roles.rid', $roles['engagement_type'], '=')->condition('users_roles.rid', $roles['roster'], '=')->condition('users_roles.rid', $roles['pa_admin'], '=')->condition('users_roles.rid', $roles['tv_admin'], '=');
                        $query->add_where($key, $c);
                    }
                }
            }
        }
    }
    if ($view->name == 'music_engagement_type_management' && $view->current_display == "music_manage_engagement_types") {
        if (isset($_REQUEST['is_expire']) && ($_REQUEST['is_expire'] != "")) {
            foreach ($query->where as $val1 => &$condition_group) {
                $tid = $_REQUEST['field_music_engagement_types_tid'];
                $term = taxonomy_term_load($tid);
                $key = $term->field_key[LANGUAGE_NONE][0]['value'];
                $cat_to_consider = array('engagement_college', 'engagement_corp_private_events', 'engagement_fairs', 'engagement_festivals', 'engagement_podcasts');
                foreach ($query->where as $val => &$condition_group) {
                    if ($val == "3") {
                        foreach ($condition_group['conditions'] as $i => $cd) {
                            if ($cat_to_consider[$i] != $key) {
                                unset($condition_group['conditions'][$i]);
                            }
                        }
                    }
                }
            }
        } else if (isset($_REQUEST['expire_soon']) && ($_REQUEST['expire_soon'] != "")) {
            foreach ($query->where as $val1 => &$condition_group) {
                $tid = $_REQUEST['field_music_engagement_types_tid'];
                $term = taxonomy_term_load($tid);
                $key = $term->field_key[LANGUAGE_NONE][0]['value'];
                $cat_to_consider = array('engagement_college', 'engagement_corp_private_events', 'engagement_fairs', 'engagement_festivals', 'engagement_podcasts');
                // echo "<pre>";
                // print_r($query->where);
                foreach ($query->where as $val => &$condition_group) {
                    if ($val == "3") {
                        foreach ($condition_group['conditions'] as $i => $cd) {
                            if ($cat_to_consider[$i] != $key) {
                                unset($condition_group['conditions'][$i]);
                            } else {
                                $condition_key = key($cd['value']);
                                $sub_cond = explode('<=', $cd['field']);
                                if (strpos($sub_cond[0], 'DATE_FORMAT') || strpos($sub_cond[0], 'DATE_FORMAT') === 0) {
                                    $expire_soon_cond = get_string_between($sub_cond[0], '(', ',');
                                    $today_date = date('Y-m-d');
                                    $tommorow = date('Y-m-d', strtotime($today_date . ' + 1 day'));
                                    $after_15_days_date = date('Y-m-d', strtotime($tommorow . ' + 15 day'));
                                    $expire_soon_cond .= " BETWEEN " . $condition_key . " AND '" . $after_15_days_date . "'";
                                    $query->where[3]['conditions'][$i]['field'] = $expire_soon_cond;
                                    $query->where[3]['conditions'][$i]['value'][$condition_key] = $tommorow;
                                }
                            }
                        }
                    }
                }
            }
        } else {
            unset($query->where[3]);
        }
    }

    if ($view->name == 'find_an_agent') {
        unset($query->where[2]);
    }

    if ($view->name == 'music_engagement_type_management' && $view->current_display == "featured_list_sort") {
        $status_arr = array();
        if (arg(2) == "manage-engagement-type") {
            $status_arr[] = 1;
            $status_arr[] = 2;
        } else if (!isset($_REQUEST['field_profile_status_value'])) {
            $status_arr[] = 2;
        } else {
            $status_arr[] = $_REQUEST['field_profile_status_value'];
        }

        // Traverse through the 'where' part of the query.
        foreach ($query->where as &$condition_group) {
            foreach ($condition_group['conditions'] as &$condition) {
                // If this is the part of the query filtering on title, change the
                // condition to filter on node ID.
                if (is_array($condition) && isset($condition['field']) && is_string($condition['field']) && ($condition['field'] == 'field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value')) {
                    $condition = array(
                        'field'    => 'field_talent_user_reference_users__field_data_field_profile_status.field_profile_status_value',
                        'value'    => $status_arr,
                        'operator' => 'IN',
                    );
                }
            }
        }
    }
    /* Reporting module */
    if ($view->name == 'music_report' || $view->name == 'rosters_report' || $view->name == 'category_report') {
        $params = getPageQueryParameters();
        //if(!isset($params['status']) || $params['status']!=1)
        //{
        array_shift($query->orderby);
        //}
        // if((isset($params['field_profile_status_value']) && in_array(2,$params['field_profile_status_value']) && !in_array(3,$params['field_profile_status_value']) && count($params['field_profile_status_value'])>1)){
        // $nids=getOnlyPublishedNodes();
        // $countRows=count($query->where[1]['conditions']);
        // $query->where[1]['conditions'][$countRows]['field']='node.nid';
        // $query->where[1]['conditions'][$countRows]['value']=$nids;
        // $query->where[1]['conditions'][$countRows]['operator']='NOT IN';
        // }
    }
}

function getOnlyPublishedNodes()
{
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'music_profile')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_profile_status', 'value', '2', '=')
        ->addTag('featuredArt');
    $result = $query->execute();
    if (!empty($result['node'])) {
        return array_keys($result['node']);
    }
}

/**
 * Implements hook_query_TAG_alter()
 */
function music_custom_query_featuredArt_alter(QueryAlterableInterface $query)
{
    $query->leftJoin('field_data_field_featured_artist_for', 'o', 'node.nid = o.entity_id');
    $query->isNull('o.field_featured_artist_for_tid');
}

function getNodesWithFields()
{
    $params = getPageQueryParameters();
    if (!empty($params['field_selling_points'])) {
        $query = db_select('node', 'n');
        $query->leftjoin('field_data_field_college_sp_expires', 'fcse', 'n.nid = fcse.entity_id');
        $query->leftjoin('field_data_field_corp_pvt_events_sp_expires', 'fcpese', 'n.nid = fcpese.entity_id');
        $query->leftjoin('field_data_field_fairs_sp_expires', 'ffse', 'n.nid = ffse.entity_id');
        $query->leftjoin('field_data_field_festivals_sp_expires', 'ffse1', 'n.nid = ffse1.entity_id');
        $query->leftjoin('field_data_field_podcasts_sp_expires', 'fpse', 'n.nid = fpse.entity_id');
        $query->leftjoin('field_data_field_college_selling_point', 'fcsp', 'n.nid = fcsp.entity_id');
        $query->leftjoin('field_data_field_corp_private_events_sellin', 'fcpes', 'n.nid = fcpes.entity_id');
        $query->leftjoin('field_data_field_fairs_selling_point', 'ffsp', 'n.nid = ffsp.entity_id');
        $query->leftjoin('field_data_field_festivals_selling_point', 'ffsp1', 'n.nid = ffsp1.entity_id');
        $query->leftjoin('field_data_field_podcasts_selling_point', 'fpsp', 'n.nid = fpsp.entity_id');
        $query->leftjoin('field_data_field_music_engagement_types', 'fmet', 'n.nid = fmet.entity_id');
        $query->fields('n', array('nid'));
        $query->condition('n.type', 'music_profile', '=');
        $today = date("Y-m-d");
        $todayplus15days = date('Y-m-d', strtotime($today . ' + 15 days'));
        $or = db_or();
        $i = 0;
        if (in_array('active', $params['field_selling_points'])) {
            $db_or = db_or();
            $db_and = db_and();
            $db_and->where("DATE_FORMAT(fcse.field_college_sp_expires_value, '%Y-%m-%d') > :date", array(':date' => $today));
            $db_and->condition('fcsp.field_college_selling_point_value', '', '<>');

            $db_and1 = db_and();
            $db_and1->where("DATE_FORMAT(fcpese.field_corp_pvt_events_sp_expires_value, '%Y-%m-%d') > :date", array(':date' => $today));
            $db_and1->condition('fcpes.field_corp_private_events_sellin_value', '', '<>');

            $db_and2 = db_and();
            $db_and2->where("DATE_FORMAT(ffse.field_fairs_sp_expires_value, '%Y-%m-%d') > :date", array(':date' => $today));
            $db_and2->condition('ffsp.field_fairs_selling_point_value', '', '<>');

            $db_and3 = db_and();
            $db_and3->where("DATE_FORMAT(ffse1.field_festivals_sp_expires_value, '%Y-%m-%d') > :date", array(':date' => $today));
            $db_and3->condition('ffsp1.field_festivals_selling_point_value', '', '<>');

            $db_and4 = db_and();
            $db_and4->where("DATE_FORMAT(fpse.field_podcasts_sp_expires_value, '%Y-%m-%d') > :date", array(':date' => $today));
            $db_and4->condition('fpsp.field_podcasts_selling_point_value', '', '<>');
            $db_or->condition($db_and);
            $db_or->condition($db_and1);
            $db_or->condition($db_and2);
            $db_or->condition($db_and3);
            $db_or->condition($db_and4);

            $db_and5 = db_and();
            $db_and5->condition($db_or);
            $db_and5->condition('fmet.field_music_engagement_types_tid', '', '<>');

            $or->condition($db_and5);
            $i++;
        }
        if (in_array('expiring', $params['field_selling_points'])) {
            $db_or = db_or();
            $db_and = db_and();
            $db_and->where("DATE_FORMAT(fcse.field_college_sp_expires_value, '%Y-%m-%d') > :date AND DATE_FORMAT(fcse.field_college_sp_expires_value, '%Y-%m-%d') <= :date2", array(':date' => $today, ':date2' => $todayplus15days));
            $db_and->condition('fcsp.field_college_selling_point_value', '', '<>');

            $db_and1 = db_and();
            $db_and1->where("DATE_FORMAT(fcpese.field_corp_pvt_events_sp_expires_value, '%Y-%m-%d') > :date AND DATE_FORMAT(fcpese.field_corp_pvt_events_sp_expires_value, '%Y-%m-%d') <= :date2", array(':date' => $today, ':date2' => $todayplus15days));
            $db_and1->condition('fcpes.field_corp_private_events_sellin_value', '', '<>');

            $db_and2 = db_and();
            $db_and2->where("DATE_FORMAT(ffse.field_fairs_sp_expires_value, '%Y-%m-%d') > :date  AND DATE_FORMAT(ffse.field_fairs_sp_expires_value, '%Y-%m-%d') <= :date2", array(':date' => $today, ':date2' => $todayplus15days));
            $db_and2->condition('ffsp.field_fairs_selling_point_value', '', '<>');

            $db_and3 = db_and();
            $db_and3->where("DATE_FORMAT(ffse1.field_festivals_sp_expires_value, '%Y-%m-%d') > :date AND DATE_FORMAT(ffse1.field_festivals_sp_expires_value, '%Y-%m-%d') <= :date2", array(':date' => $today, ':date2' => $todayplus15days));
            $db_and3->condition('ffsp1.field_festivals_selling_point_value', '', '<>');

            $db_and4 = db_and();
            $db_and4->where("DATE_FORMAT(fpse.field_podcasts_sp_expires_value, '%Y-%m-%d') > :date AND DATE_FORMAT(fpse.field_podcasts_sp_expires_value, '%Y-%m-%d') <= :date2", array(':date' => $today, ':date2' => $todayplus15days));
            $db_and4->condition('fpsp.field_podcasts_selling_point_value', '', '<>');
            $db_or->condition($db_and);
            $db_or->condition($db_and1);
            $db_or->condition($db_and2);
            $db_or->condition($db_and3);
            $db_or->condition($db_and4);

            $db_and5 = db_and();
            $db_and5->condition($db_or);
            $db_and5->condition('fmet.field_music_engagement_types_tid', '', '<>');
            $or->condition($db_and5);
            $i++;
        }
        if (in_array('expired', $params['field_selling_points'])) {
            $db_or = db_or();
            $db_and = db_and();
            $db_and->where("DATE_FORMAT(fcse.field_college_sp_expires_value, '%Y-%m-%d') <= :date", array(':date' => $today));
            $db_and->condition('fcsp.field_college_selling_point_value', '', '<>');

            $db_and1 = db_and();
            $db_and1->where("DATE_FORMAT(fcpese.field_corp_pvt_events_sp_expires_value, '%Y-%m-%d') <= :date", array(':date' => $today));
            $db_and1->condition('fcpes.field_corp_private_events_sellin_value', '', '<>');

            $db_and2 = db_and();
            $db_and2->where("DATE_FORMAT(ffse.field_fairs_sp_expires_value, '%Y-%m-%d') <= :date", array(':date' => $today));
            $db_and2->condition('ffsp.field_fairs_selling_point_value', '', '<>');

            $db_and3 = db_and();
            $db_and3->where("DATE_FORMAT(ffse1.field_festivals_sp_expires_value, '%Y-%m-%d') <= :date", array(':date' => $today));
            $db_and3->condition('ffsp1.field_festivals_selling_point_value', '', '<>');

            $db_and4 = db_and();
            $db_and4->where("DATE_FORMAT(fpse.field_podcasts_sp_expires_value, '%Y-%m-%d') <= :date", array(':date' => $today));
            $db_and4->condition('fpsp.field_podcasts_selling_point_value', '', '<>');
            $db_or->condition($db_and);
            $db_or->condition($db_and1);
            $db_or->condition($db_and2);
            $db_or->condition($db_and3);
            $db_or->condition($db_and4);
            $db_and5 = db_and();
            $db_and5->condition($db_or);
            $db_and5->condition('fmet.field_music_engagement_types_tid', '', '<>');
            $or->condition($db_and5);
            $i++;
        }
        if (in_array('nopoint', $params['field_selling_points'])) {
            $db_or = db_or();
            $db_and = db_and();
            $db_and->isNull('fcsp.field_college_selling_point_value');
            $db_and->isNull('fcpes.field_corp_private_events_sellin_value');
            $db_and->isNull('ffsp.field_fairs_selling_point_value');
            $db_and->isNull('ffsp1.field_festivals_selling_point_value');
            $db_and->isNull('fpsp.field_podcasts_selling_point_value');
            $db_or->condition($db_and);
            $db_or->isNull('fmet.field_music_engagement_types_tid');
            $or->condition($db_or);
            $i++;
        }
        if ($i > 0) {
            $query->condition($or);
        }
        $query->orderBy('nid', 'ASC');
        $rows = $query->execute()->fetchAllKeyed(0, 0);
        return $rows;
    }
}
/* End Reporting module */


function get_string_between($string, $start, $end)
{
    $string = ' ' . $string;
    $ini = strpos($string, $start);
    if ($ini == 0) return '';
    $ini += strlen($start);
    $len = strpos($string, $end, $ini) - $ini;
    return substr($string, $ini, $len);
}

function tivo_data_sync()
{
    require_once dirname(__FILE__) . '/music_tivo/music.tivo.getdetails.inc';
    $count = 0;
    $log = 'Tivo Sync started';
    file_put_contents(dirname(__FILE__) . "/tivo_sync.log", "[" . date('l jS\of F Y h:i:s A') . "] -#{$log} \n", FILE_APPEND | LOCK_EX);
    $query = "SELECT n.nid FROM node n WHERE n.type='music_profile' AND n.status='1'";
    $result = db_query($query)->fetchAll();
    $total_records = sizeof($result);

    foreach ($result as $record) {
        $nid = $record->nid;
        $node = node_load($nid);
        $mn_id = $node->field_tivo_artist_id['und'][0]['value'];
        if (!empty($mn_id)) {
            //set minid
            $count++;
            $about_from = $node->field_about_from['und'][0]['value'];
            $data = array();
            $data['mnid'] = $mn_id;

            if ($about_from == 1) {
                //get About data from TiVo
                $getData = music_tivo_get_details('about', $data);
                if (empty($getData['error'])) {
                    $musicBio = $getData['musicBio'];
                    //set About data
                    $node->field_about_tivo['und'][0]['value'] = $musicBio;
                }
            }
            $profile_pic_from = $node->field_profile_pic_from['und'][0]['value'];
            if ($profile_pic_from == 1) {
                //get image data from TiVo
                $getData = music_tivo_get_details('nameimage', $data);
                if (empty($getData['error'])) {
                    $fid = $getData['image'];
                    //set fid to node
                    $node->field_profile_pic_tivo['und'][0]['fid'] = $fid;
                }
            }

            $getData = music_tivo_get_details('web', $data);
            $node->field_twitter_id['und'][0]['value'] = "";
            $node->field_facebook_url['und'][0]['value'] = "";
            if (empty($getData['error'])) {
                $node->field_twitter_id['und'][0]['value'] = $getData['twitter'];
                $node->field_facebook_url['und'][0]['value'] = $getData['facebook'];
            }

            $getData = music_tivo_get_details('featuredreleases', $data);
            if (empty($getData['error'])) {
                $m = 0;
                $fc_id = array();
                if (!empty($node->field_featured_releases['und'][0]['value'])) {
                    foreach ($node->field_featured_releases['und'] as $fc) {
                        $fc_id = $fc['value'];
                        entity_delete_multiple('field_collection_item', array($fc_id));
                        unset($node->field_featured_releases['und'][$m]);
                        $m++;
                    }
                }

                //flags to store only relevant albums based on Admins choice(in site settings)
                $flags_exclude = variable_get('music_featured_release_type_to_exclude');
                $flags_exclude = explode(",", $flags_exclude);
                $name = 'music_featured_release_type_to_exclude';
                $myvoc = taxonomy_vocabulary_machine_name_load($name);
                $tree = taxonomy_get_tree($myvoc->vid);
                $featured_release_type_options = array();
                foreach ($tree as $term) {
                    $flags[] = strtolower($term->name);
                }
                //store albums only with this flags
                $flags_set = array_diff($flags, $flags_exclude);

                $featured_count = 0;
                foreach ($getData['discography'] as $key => $value) {
                    $album_flags = array();
                    if (count($value->flags) > 0) {
                        foreach ($value->flags as $flag) {
                            $flag = strtolower($flag);
                            if (in_array($flag, $flags_set)) {
                                $album_flags[] = $flag;
                            }
                        }
                    }

                    if (count($album_flags) > 0) {
                        $featured_count++;
                        $album_flags1 = implode(",", $album_flags);
                        $release_album_id = $value->ids->albumId;
                        $data['albumid'] = $release_album_id;
                        $albumImageData = music_tivo_get_details('albumimage', $data);
                        if (empty($albumImageData['error'])) {
                            $fid = $albumImageData['image'];
                        }
                        $releaseData = music_tivo_get_details('albumrelease', $data);
                        if (empty($releaseData['error'])) {
                            $release_year = $releaseData['release']->releaseDate;
                            $release_type = $releaseData['release']->format;
                        }

                        $release_title = $value->title;
                        $release_label = $value->label;

                        $release_hasReview = $value->hasReview == 1 ? 1 : 0;
                        $release_isPick = $value->isPick == 1 ? 1 : 0;

                        $my_collection = entity_create('field_collection_item', array('field_name' => 'field_featured_releases'));
                        $my_collection->setHostEntity('node', $node);
                        $my_collection->field_album_id['und'][0]['value'] = $release_album_id;
                        $my_collection->field_album_title['und'][0]['value'] = $release_title;
                        $my_collection->field_album_flags['und'][0]['value'] = $album_flags1;
                        $my_collection->field_label['und'][0]['value'] = $release_label;
                        $my_collection->field_album_year['und'][0]['value'] = $release_year;
                        $my_collection->field_has_review['und'][0]['value'] = $release_hasReview;
                        $my_collection->field_is_pick['und'][0]['value'] = $release_isPick;
                        $my_collection->field_album_type['und'][0]['value'] = $release_type;
                        $my_collection->field_album_image['und'][0]['fid'] = $fid;
                        $my_collection->save();
                        if ($featured_count >= 10) {
                            break;
                        }
                    }
                }
            }
            node_save($node);
        }
    }
    $log = "total records: " . $total_records . " and records with Artist ID :" . $count;
    file_put_contents(dirname(__FILE__) . "/tivo_sync.log", "[" . date('l jS\of F Y h:i:s A') . "] -#{$log} \n", FILE_APPEND | LOCK_EX);
    $log = 'Tivo Sync ended';
    file_put_contents(dirname(__FILE__) . "/tivo_sync.log", "[" . date('l jS\of F Y h:i:s A') . "] -#{$log} \n\n", FILE_APPEND | LOCK_EX);
}

/**
 * inside happy.module
 * Implements hook_views_pre_render()
 */
function music_custom_views_pre_render(&$views)
{
    if ($views->name == 'manage_music_category' || $views->name == 'riders' || $views->name == 'gallery') {
        // Include the CTools tools that we need.
        ctools_include('ajax');
        ctools_include('modal');
        // Add CTools' javascript to the page.
        ctools_modal_add_js();
    }

    if ($views->name == 'riders') {
        ctools_include('ajax');
        ctools_include('modal');
        ctools_add_js('ajax-responder');
        ctools_add_js('music-profile-rider', 'music_custom');
    }
}

function move_tivo_about()
{
    // Return all nids of nodes of type "music_profile".
    $nids = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->fields('n', array('type'))
        ->condition('n.type', 'music_profile')
        ->execute()
        ->fetchCol(); // returns an indexed array

    // Now return the node objects.
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $key => $node) {
        //TIVO social link
        if (!empty($node->field_twitter_id[LANGUAGE_NONE][0]['value'])) {
            $node->field_manual_twitter_id[LANGUAGE_NONE] = $node->field_twitter_id[LANGUAGE_NONE];
            unset($node->field_twitter_id[LANGUAGE_NONE][0]);
        }
        if (!empty($node->field_facebook_url[LANGUAGE_NONE][0]['value'])) {
            $node->field_manual_facebook_id[LANGUAGE_NONE] = $node->field_facebook_url[LANGUAGE_NONE];
            unset($node->field_facebook_url[LANGUAGE_NONE][0]);
        }
        node_save($node);
    }
}


function music_custom_404()
{

    unset($_GET['destination']);
    drupal_get_messages();
    drupal_set_message("The page you requested was not found.", "error");
    $_SESSION['unwanted'] = 'unwanted';
    drupal_goto('<front>');
   /* $current_url = $_SERVER['HTTP_HOST'].request_uri();

    if (strpos($current_url, 'Music/') !== false) {

      $split_url = explode("Music/", $current_url);
      if(count($split_url)>=1){
        $converted_text = strtolower($split_url[1]);
        $chnage_url = str_replace($split_url[1],$converted_text,$current_url);
        $newchange = "http://".$chnage_url;
      }
        drupal_get_messages();
        drupal_set_message('test', "error");
        $_SESSION['unwanted'] = 'unwanted';
        echo "Hi";
        drupal_goto($newchange);
        }*/
    //unset($_GET['destination']);

    //drupal_set_message("The page you requested was not found.", "error");
   // $_SESSION['unwanted'] = 'unwanted';
    //drupal_goto('<front>');
}

function music_custom_403()
{
    unset($_GET['destination']);
    drupal_get_messages();
    drupal_set_message("You are not authorized to access requested page.", "error");
    $_SESSION['unwanted'] = 'unwanted';
    drupal_goto('<front>');
}
/**
 * Handle default switch case
 * @param string $module_name
 * @param string $function_name
 * @param string/int $value
 */
function as_handle_switch_default($module_name, $function_name, $value)
{
    watchdog('switch default case', "Value '{$value}' appeared for default case in function '{$function_name}' of module '{$module_name}'", NULL, WATCHDOG_CRITICAL);
}
/**
 * Create log for errors
 * @param object $e
 * @param string $module
 * @param string $message
 */
function music_log_error($e, $module, $message)
{
    $error = $e->getJsonBody();
    $err = $error['error'];
    watchdog($module, "{$message}. Error Type: {$err['type']}. Error Message: {$err['message']}", NULL, WATCHDOG_ERROR);
}

function get_terms_by_vocab($vocab)
{
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocab);
    return entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
}

function music_region_client()
{
    $output = "";
    //Query for fetching states color ends here
    $simplemaps_worldmap_mapdata = array();
    $main_settings = array();
    //General settings
    $main_settings['width'] = 'responsive';
    $main_settings['background_color'] = '#FFFFFF';
    $main_settings['background_transparent'] = 'yes';
    $main_settings['border_color'] = '#D4DDDD';
    //State defaults
    $main_settings['state_description'] = 'State description';
    $main_settings['state_color'] = '#F8FAFA';
    $main_settings['state_hover_color'] = '#F8FAFA';
    $main_settings['border_size'] = .5;
    $main_settings['all_states_inactive'] = 'yes';
    $main_settings['all_states_zoomable'] = 'no';
    //Labels
    $main_settings['label_color'] = '#666666';
    $main_settings['label_hover_color'] = '#666666';
    $main_settings['label_size'] = 12;
    $main_settings['label_font'] = 'Arial';
    $main_settings['hide_labels'] = 'no';
    //Zoom settings
    if ($_SESSION['screen_width'] <= 767) {
        $main_settings['initial_zoom'] = 5;
        $main_settings['initial_zoom_solo'] = 'no';
        $main_settings['manual_zoom'] = 'no';
        $main_settings['popups'] = 'off';
    } else {
        $main_settings['initial_zoom'] = -1;
        $main_settings['initial_zoom_solo'] = 'no';
        $main_settings['manual_zoom'] = 'yes';
        $main_settings['popups'] = 'on_hover';
    }
    $main_settings['zoom_percentage'] = .80;
    $main_settings['zoom'] = 'yes';
    $main_settings['back_image'] = 'no';
    $main_settings['initial_back'] = 'no';
    $main_settings['region_opacity'] = 1;
    $main_settings['region_hover_opacity'] = 1;
    $main_settings['zoom_out_incrementally'] = 'no';
    $main_settings['zoom_time'] = .1;
    //Popup settings
    $main_settings['div'] = 'small-width-map';
    $main_settings['auto_load'] = 'yes';
    $main_settings['url_new_tab'] = 'no';
    $main_settings['images_directory'] = 'default';
    $main_settings['fade_time'] = .1;
    $main_settings['link_text'] = '';
    //State specific settings
    $state_specific = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    $exclude_zoom_zones = array('united_states', 'canada', 'south_america', 'caribbean', 'central_america_mexico', 'europe', 'africa', 'middle_east', 'asia', 'oceania');
    $states_arr = array();
    foreach ($zoom_zones as $zoom_zone) {
        $state_details = array();
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (!in_array($key, $exclude_zoom_zones)) {
            $state_details['name'] = $zoom_zone->name;
            $state_specific[$key] = $state_details;
        }
    }
    //Regions specific settings
    $exclude_zoom_zones2 = array('africa', 'asia', 'central_and_south_america', 'europe', 'middle_east', 'north_america', 'south_asia_and_oceania');
    $regions = array();
    $i = -1;
    $vocabulary = taxonomy_vocabulary_machine_name_load('music_zoom_zones_grouping');
    $zoom_zones = taxonomy_get_tree($vocabulary->vid, $parent = 0, $max_depth = 2, $load_entities = TRUE);
    foreach ($zoom_zones as $zoom_zone) {
        $depth = $zoom_zone->depth;
        $key = $zoom_zone->field_key['und'][0]['value'];
        if (in_array($key, $exclude_zoom_zones2)) {
            $i++;
            $regions[$i]['name'] = $zoom_zone->name;
            $states = array();
        } else {
            $states[] = $key;
            $regions[$i]['states'] = $states;
        }
        $regions[$i]['color'] = "#CCCCCC";
        $regions[$i]['hover_color'] = "#96A7AA";
    }

    $simplemaps_worldmap_mapdata['main_settings'] = $main_settings;
    $simplemaps_worldmap_mapdata['state_specific'] = $state_specific;
    $simplemaps_worldmap_mapdata['regions'] = $regions;
    $final_data['simplemaps_worldmap_mapdata'] = $simplemaps_worldmap_mapdata;
    $final_data['states_arr'] = implode(",", $states_arr);
    $simplemaps_worldmap_mapdata = json_encode($final_data);
    /*
     * First colored Map ends here
     */

    print $simplemaps_worldmap_mapdata;
    exit;
}

function update_music_profile_alias()
{
    $query = "SELECT n.nid FROM node n WHERE n.type='music_profile'";
    $result = db_query($query)->fetchAll();
    foreach ($result as $record) {
        $nid = $record->nid;
        $node = node_load($nid);
        node_save($node);
    }
    die('Updated Music profile Aliases');
}

function music_custom_node_presave($node)
{
    $type = $node->type;
    if ($type == 'music_profile') {
        //Check if it has nick name
        $node_title = str_replace(array('$', '&'), array('s', 'and'), $node->title);
        $node_title_alias = strtolower(preg_replace("/[^a-zA-Z0-9]+/", "", $node_title));
        $connect_id = $node->field_connect_id[LANGUAGE_NONE][0]['value'];
        if ($node_title_alias != 'danlevy') {
            variable_set("cid_" . $node_title_alias, $connect_id);
            if (!empty($node->field_nick_name) && $node->field_nick_name[LANGUAGE_NONE][0]['value'] != '') { //yes
                //Check if display nick name is checked
                $node_nick_name = str_replace(array('$', '&'), array('s', 'and'), $node->field_nick_name[LANGUAGE_NONE][0]['value']);
                $node_nick_name_slug = strtolower(preg_replace("/[^a-zA-Z0-9]+/", "", $node_nick_name));
                $node_nick_name_alias = get_unique_nick_name_slug($node_nick_name_slug, $connect_id);
                variable_set("cid_" . $node_nick_name_alias, $connect_id);
                if (!empty($node->field_display_nick_name) && $node->field_display_nick_name[LANGUAGE_NONE][0]['value'] == '1') { // Yes
                    variable_set("mpid_" . $connect_id, $node_nick_name_alias);
                } else {
                    variable_set("mpid_" . $connect_id, $node_title_alias);
                }
            } else { //No
                variable_set("mpid_" . $connect_id, $node_title_alias);
            }
            watchdog('Created MP Alias for nid : ', $node->nid);
        }

        // $node_title = $node->title;
        // if(!empty($node->field_display_nick_name) && $node->field_display_nick_name[LANGUAGE_NONE][0]['value'] == '1' && !empty($node->field_nick_name) && $node->field_nick_name[LANGUAGE_NONE][0]['value'] != ''){
        //     $node_title = $node->field_nick_name[LANGUAGE_NONE][0]['value'];
        // }
        // $title = str_replace(array('$','&'), array('s','and'), $node_title);
        // $alias = strtolower(preg_replace("/[^a-zA-Z0-9]+/", "", $title));
        // watchdog('Created MP Alias for nid : ',$node->nid);
        // variable_set("cid_".$alias,$connect_id);
        // variable_set("mpid_".$connect_id,$alias);
    }
}

function get_unique_nick_name_slug($slug, $connect_id, $num = 0)
{
    $new_slug = $num ? $slug . '-' . $num : $slug;
    $slug_exist = false;
    if (variable_get('cid_' . $new_slug) && variable_get('cid_' . $new_slug) != $connect_id) {
        $slug_exist = true;
    }
    if (!$slug_exist) {
        return $new_slug;
    } else {
        $num++;
        return get_unique_nick_name_slug($slug, $connect_id, $num);
    }
}

function title_to_alias($title)
{
    $title = str_replace(array('$', '&'), array('s', 'and'), $title);
    return strtolower(preg_replace("/[^a-zA-Z0-9]+/", "", $title));
}

function writeLogMessageToFile($msg = "")
{
    $error_message = '[' . date("F j, Y, g:i a e O") . '] ' . $msg . "\n";
    $log_file = "/var/www/html/clients_status.log";
    error_log($error_message, 3, $log_file);
}

function music_custom_node_update($node)
{
    if ($node->type == 'music_profile') {
        global $user;
        $originalValue = isset($node->original->field_profile_status['und'][0]['value']) ? $node->original->field_profile_status['und'][0]['value'] : 'None';
        $currentValue = isset($node->field_profile_status['und'][0]['value']) ? $node->field_profile_status['und'][0]['value'] : 'None';
        $status = "Status updated from " . $originalValue . " to " . $currentValue . " by user " . $user->uid . " at " . time();
        writeLogMessageToFile("Node ID: " . $node->nid . ", Status: " . $status . ", Hook: music_custom_node_update");
    }
}
